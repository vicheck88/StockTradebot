coinPriceHistory<-coinPriceHistory[candle_date_time_kst>=minDay]
#for(i in 2:nrow(coinPriceHistory)){
#  if(is.na(coinPriceHistory[i,]$movingAvg))
#    coinPriceHistory[i,]$movingAvg=coinPriceHistory[i-1]$movingAvg
#}
coinPriceHistory[,':='(disparity=trade_price/movingAvg*100-100,disparity2=trade_price/movingAvg2*100-100)]
#이평선과 비교해 높을 경우 매수, 낮을 경우 매도
#구입: 1%부터 1%당 현금 10%씩
#판매: -1%부터 1%당 현금 20%씩. 단, 10% 떨어지는 경우는 전부 손절
targetRatio<-1
coinPriceHistory$investRatio<-0
getInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$disparity
if(disparity>0) {
addRatio<-floor(disparity)*0.5
}  else addRatio<-floor(disparity)*0.5
#}  else addRatio<-floor(disparity)*0.5
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
if(i>=10){
disparityTrend<-table[(i-9):i,]$disparity
reg<-lm(1:10 ~ disparityTrend)
b<-summary(reg)$coefficients[2,1]
p<-summary(reg)$coefficients[2,-1][3]
if(p<0.05 & b<0){
newRatio<-newRatio/3
}
}
table[i,]$investRatio<-newRatio
}
return(table)
}
coinPriceHistory<-coinPriceHistory[,getInvestRatio(.SD),by=market]
#시간단위일 경우 시간변경 필요
#coinPriceHistory[,candle_date_time_kst:=as.Date(coinPriceHistory[,min(candle_date_time_kst)])+(.I-1)*2]
coinRatioTable<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,investRatio)]
coinRatioTable[,candle_date_time_kst:=as_datetime(candle_date_time_kst,tz=Sys.timezone())]
coinRatioTable[,cashRatio:=1-investRatio]
coinAdjusted<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,trade_price)]
coinAdjusted<-coinAdjusted[,candle_date_time_kst:=as_datetime(candle_date_time_kst,tz=Sys.timezone())]
coinAdjusted[,prevValue:=shift(trade_price,1)]
coinAdjusted[,adjustedPrice:=(trade_price/prevValue)-1]
#coinAdjusted[,adjustedPrice:=((trade_price/prevValue)-1)*3]
coinAdjusted<-coinAdjusted[,.(candle_date_time_kst,adjustedPrice)]
coinAdjusted$adjustedCache<-0
coinAdjusted<-coinAdjusted[candle_date_time_kst>='2018-01-01 09:00:00']
coinRatioTable<-coinRatioTable[candle_date_time_kst>='2018-01-01 09:00:00']
rets<-as.xts(coinAdjusted)
rets<-na.omit(rets)
coinRatioTable<-as.xts(coinRatioTable)
Tactical = Return.portfolio(rets, coinRatioTable, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('매수 후 보유', '시점 선택 전략'))
charts.PerformanceSummary(portfolios,
main = "Buy & Hold vs Tactical")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/script")
source("./coinFunctionList.R",encoding="utf-8")
library(data.table)
library(xts)
library(PerformanceAnalytics)
library(quantmod)
library(lubridate)
num<-1
coinNumLimit<-2
bandLimit<-0.3
#1.가장 시가총액이 높은 두 코인의 이동평균선 계산
#시가총액 비율:
coinList<-getUpbitCoinListDetail(coinNumLimit)
indexCoin<-getIndexBalance(coinList[1:num,],1,"MARKET")
#이평선
type<-"days"
#type<-"minutes"
movingAvgDay<-30
movingAvgDay2<-10
unit<-60
#unit<-240
count<-200
#과거 가격들 구하기(2000일)
date<-Sys.Date()+1
coinPriceHistory<-NULL
curRowNum<-0
for(i in 1:1000){
if(type=="days"){
toDate<-paste0(as.Date(date)-1,'T09:00:00')
} else if(type=="minutes"){
toDate<-as_datetime(date)-60
toDate<-str_replace(toDate," ","T")
}
coinPriceHistory<-rbind(coinPriceHistory,getCoinPriceHistory(indexCoin$market,type,unit,count,toDate))
coinPriceHistory<-unique(coinPriceHistory)
date<-coinPriceHistory[,min(candle_date_time_kst)]
if(nrow(coinPriceHistory)==curRowNum) {break}
curRowNum<-nrow(coinPriceHistory)
}
coinPriceHistory<-coinPriceHistory[,.(market,candle_date_time_kst,trade_price)]
setkeyv(coinPriceHistory,c("market","candle_date_time_kst"))
coinPriceHistory[candle_date_time_kst %like% "T09:00:00",isDayStart:=T]
#이동평균선 구하기(Day 기준)
movingAvg<-coinPriceHistory[isDayStart==T,.(movingAvg=frollmean(trade_price,movingAvgDay,align='right'),movingAvg2=frollmean(trade_price,movingAvgDay2,align='right')),by=market]
movingAvg$candle_date_time_kst<-coinPriceHistory[isDayStart==T,candle_date_time_kst]
coinPriceHistory<-movingAvg[coinPriceHistory,on=c("market","candle_date_time_kst")]
for(i in 1:nrow(coinPriceHistory)){
row<-coinPriceHistory[i,]
time<-row$candle_date_time_kst
subTable<-coinPriceHistory[isDayStart==T][time>=candle_date_time_kst]
if(nrow(subTable)<movingAvgDay) next
subTable<-rbind(subTable,row)
subTable<-subTable[(nrow(subTable)-movingAvgDay):nrow(subTable),]
v<-last(subTable[,frollmean(trade_price,movingAvgDay,align="right")])
coinPriceHistory[i,]$movingAvg<-v
}
minDay<-min(coinPriceHistory[is.na(movingAvg)==F,candle_date_time_kst])
coinPriceHistory<-coinPriceHistory[candle_date_time_kst>=minDay]
#for(i in 2:nrow(coinPriceHistory)){
#  if(is.na(coinPriceHistory[i,]$movingAvg))
#    coinPriceHistory[i,]$movingAvg=coinPriceHistory[i-1]$movingAvg
#}
coinPriceHistory[,':='(disparity=trade_price/movingAvg*100-100,disparity2=trade_price/movingAvg2*100-100)]
#이평선과 비교해 높을 경우 매수, 낮을 경우 매도
#구입: 1%부터 1%당 현금 10%씩
#판매: -1%부터 1%당 현금 20%씩. 단, 10% 떨어지는 경우는 전부 손절
targetRatio<-1
coinPriceHistory$investRatio<-0
getInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$disparity
if(disparity>0) {
addRatio<-floor(disparity)*0.5
}  else addRatio<-floor(disparity)*0.5
#}  else addRatio<-floor(disparity)*0.5
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
#if(i>=10){
#  disparityTrend<-table[(i-9):i,]$disparity
#  reg<-lm(1:10 ~ disparityTrend)
#  b<-summary(reg)$coefficients[2,1]
#  p<-summary(reg)$coefficients[2,-1][3]
#  if(p<0.05 & b<0){
#    newRatio<-newRatio/3
#  }
}
table[i,]$investRatio<-newRatio
}
return(table)
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/script")
source("./coinFunctionList.R",encoding="utf-8")
library(data.table)
library(xts)
library(PerformanceAnalytics)
library(quantmod)
library(lubridate)
num<-1
coinNumLimit<-2
bandLimit<-0.3
#1.가장 시가총액이 높은 두 코인의 이동평균선 계산
#시가총액 비율:
coinList<-getUpbitCoinListDetail(coinNumLimit)
indexCoin<-getIndexBalance(coinList[1:num,],1,"MARKET")
#이평선
type<-"days"
#type<-"minutes"
movingAvgDay<-30
movingAvgDay2<-10
unit<-60
#unit<-240
count<-200
#과거 가격들 구하기(2000일)
date<-Sys.Date()+1
coinPriceHistory<-NULL
curRowNum<-0
for(i in 1:1000){
if(type=="days"){
toDate<-paste0(as.Date(date)-1,'T09:00:00')
} else if(type=="minutes"){
toDate<-as_datetime(date)-60
toDate<-str_replace(toDate," ","T")
}
coinPriceHistory<-rbind(coinPriceHistory,getCoinPriceHistory(indexCoin$market,type,unit,count,toDate))
coinPriceHistory<-unique(coinPriceHistory)
date<-coinPriceHistory[,min(candle_date_time_kst)]
if(nrow(coinPriceHistory)==curRowNum) {break}
curRowNum<-nrow(coinPriceHistory)
}
coinPriceHistory<-coinPriceHistory[,.(market,candle_date_time_kst,trade_price)]
setkeyv(coinPriceHistory,c("market","candle_date_time_kst"))
coinPriceHistory[candle_date_time_kst %like% "T09:00:00",isDayStart:=T]
#이동평균선 구하기(Day 기준)
movingAvg<-coinPriceHistory[isDayStart==T,.(movingAvg=frollmean(trade_price,movingAvgDay,align='right'),movingAvg2=frollmean(trade_price,movingAvgDay2,align='right')),by=market]
movingAvg$candle_date_time_kst<-coinPriceHistory[isDayStart==T,candle_date_time_kst]
coinPriceHistory<-movingAvg[coinPriceHistory,on=c("market","candle_date_time_kst")]
for(i in 1:nrow(coinPriceHistory)){
row<-coinPriceHistory[i,]
time<-row$candle_date_time_kst
subTable<-coinPriceHistory[isDayStart==T][time>=candle_date_time_kst]
if(nrow(subTable)<movingAvgDay) next
subTable<-rbind(subTable,row)
subTable<-subTable[(nrow(subTable)-movingAvgDay):nrow(subTable),]
v<-last(subTable[,frollmean(trade_price,movingAvgDay,align="right")])
coinPriceHistory[i,]$movingAvg<-v
}
minDay<-min(coinPriceHistory[is.na(movingAvg)==F,candle_date_time_kst])
coinPriceHistory<-coinPriceHistory[candle_date_time_kst>=minDay]
#for(i in 2:nrow(coinPriceHistory)){
#  if(is.na(coinPriceHistory[i,]$movingAvg))
#    coinPriceHistory[i,]$movingAvg=coinPriceHistory[i-1]$movingAvg
#}
coinPriceHistory[,':='(disparity=trade_price/movingAvg*100-100,disparity2=trade_price/movingAvg2*100-100)]
#이평선과 비교해 높을 경우 매수, 낮을 경우 매도
#구입: 1%부터 1%당 현금 10%씩
#판매: -1%부터 1%당 현금 20%씩. 단, 10% 떨어지는 경우는 전부 손절
targetRatio<-1
coinPriceHistory$investRatio<-0
getInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$disparity
if(disparity>0) {
addRatio<-floor(disparity)*0.5
}  else addRatio<-floor(disparity)*0.5
#}  else addRatio<-floor(disparity)*0.5
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
#if(i>=10){
#  disparityTrend<-table[(i-9):i,]$disparity
#  reg<-lm(1:10 ~ disparityTrend)
#  b<-summary(reg)$coefficients[2,1]
#  p<-summary(reg)$coefficients[2,-1][3]
#  if(p<0.05 & b<0){
#    newRatio<-newRatio/3
#  }
#}
table[i,]$investRatio<-newRatio
}
return(table)
}
coinPriceHistory<-coinPriceHistory[,getInvestRatio(.SD),by=market]
#시간단위일 경우 시간변경 필요
#coinPriceHistory[,candle_date_time_kst:=as.Date(coinPriceHistory[,min(candle_date_time_kst)])+(.I-1)*2]
coinRatioTable<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,investRatio)]
coinRatioTable[,candle_date_time_kst:=as_datetime(candle_date_time_kst,tz=Sys.timezone())]
coinRatioTable[,cashRatio:=1-investRatio]
coinAdjusted<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,trade_price)]
coinAdjusted<-coinAdjusted[,candle_date_time_kst:=as_datetime(candle_date_time_kst,tz=Sys.timezone())]
coinAdjusted[,prevValue:=shift(trade_price,1)]
coinAdjusted[,adjustedPrice:=(trade_price/prevValue)-1]
#coinAdjusted[,adjustedPrice:=((trade_price/prevValue)-1)*3]
coinAdjusted<-coinAdjusted[,.(candle_date_time_kst,adjustedPrice)]
coinAdjusted$adjustedCache<-0
coinAdjusted<-coinAdjusted[candle_date_time_kst>='2018-01-01 09:00:00']
coinRatioTable<-coinRatioTable[candle_date_time_kst>='2018-01-01 09:00:00']
rets<-as.xts(coinAdjusted)
rets<-na.omit(rets)
coinRatioTable<-as.xts(coinRatioTable)
Tactical = Return.portfolio(rets, coinRatioTable, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('매수 후 보유', '시점 선택 전략'))
charts.PerformanceSummary(portfolios,
main = "Buy & Hold vs Tactical")
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
token<-getToken(apiConfig,account)
if(isKoreanTradeOpen(token,apiConfig,account,today)=="N") stop("Market closed")
cancelResult<-cancelAllOrders(apiConfig,account,token)
for(res in cancelResult) sendMessage(res)
snpTrackCode<-'360750'
prices<-adjustedPriceFromNaver('day',200,snpTrackCode)
averageSnpPrice<-mean(prices[,1])
currentSnpPrice<-tail(prices,1)[,1]
snpCurrentDisparity<-100*currentSnpPrice/averageSnpPrice-100
nasdaqTrackCode<-'133690'
prices<-adjustedPriceFromNaver('day',200,nasdaqTrackCode)
averageNasdaqPrice<-mean(prices[,1])
currentNasdaqPrice<-tail(prices,1)[,1]
nasdaqCurrentDisparity<-100*currentNasdaqPrice/averageNasdaqPrice-100
top7TrackCode<-'465580'
prices<-adjustedPriceFromNaver('day',200,top7TrackCode)
averageTop7Price<-mean(prices[,1])
currentTop7Price<-tail(prices,1)[,1]
top7CurrentDisparity<-100*currentTop7Price/averageTop7Price-100
symbols = c('QQQ')
getSymbols(symbols, src = 'yahoo')
prices = tail(Ad(QQQ),200)
currentPrice=tail(prices,1)
QQQ.Adjusted.MA.200<-mean(prices)
QQQcurrentDisparity<-(100*currentPrice/QQQ.Adjusted.MA.200)-100
nasdaqLevCode<-'418660' #TIGER 미국나스닥100레버리지(합성)
top7LevCode<-'465610' #ACE 미국빅테TOP7Plus레버리지(합성)
sofrCode<-'456880' #ACE 미국달러SOFR금리(합성)
highYieldCode<-'468380' #KODEX iShares 미국하이일드액티브
currentTop7LevPrice<-getCurrentPrice(apiConfig,account,token,top7LevCode)
currentNasdaqLevPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
currentHighyieldPrice<-getCurrentPrice(apiConfig,account,token,highYieldCode)
currentBalance<-getBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-currentBalance$sheet[,sum(as.numeric(evlu_amt))]+getOrderableAmount(apiConfig,account,token,nasdaqLevCode)
curStockRatio<-0
if(nrow(currentBalance$sheet)>0){
curStockBalance<-sum(as.numeric(currentBalance$sheet[pdno!=456880,evlu_amt]))
if(length(curStockBalance)>0) curStockRatio<-curStockBalance/totalBalanceSum
}
#disp 1 ~ 2: 0.5
#disp 2 ~ 20: 1
#disp 20 ~ : 0
stockRatio<-floor(QQQcurrentDisparity)*0.5
if(stockRatio>=1) {
stockRatio<-1
}else if(stockRatio<=-1){
stockRatio<-0
}else if(stockRatio<=0){
stockRatio<-min(abs(stockRatio),curStockRatio)
} else{
stockRatio<-max(abs(stockRatio),curStockRatio)
}
if(QQQcurrentDisparity>20) stockRatio<-0
top7NasdaqDiff<-top7CurrentDisparity-nasdaqCurrentDisparity
top7InvestRatio<-max(0,min(0.2,floor(top7NasdaqDiff)/10)*stockRatio)
nasdaqInvestRatio<-stockRatio-top7InvestRatio
if(hour(Sys.time())==12){
message<-paste0("TIGER 미국SnP500 가격: ",currentSnpPrice,"\n")
message<-paste0(message,"TIGER 미국나스닥100 가격: ",currentNasdaqPrice,"\n")
message<-paste0(message,"ACE 미국빅테크TOP7Plus 가격: ",currentTop7Price,"\n\n")
message<-paste0(message,"TIGER 미국SnP500 200 MA: ",round(averageSnpPrice,2),"\n")
message<-paste0(message,"TIGER 미국나스닥100 200 MA: ",round(averageNasdaqPrice,2),"\n")
message<-paste0(message,"ACE 미국빅테크TOP7Plus 200 MA: ",round(averageTop7Price,2),"\n\n")
message<-paste0(message,"TIGER 미국SnP500 Disparity: ", round(snpCurrentDisparity,2),"\n")
message<-paste0(message,"TIGER 미국나스닥100 Disparity: ", round(nasdaqCurrentDisparity,2),"\n")
message<-paste0(message,"ACE 미국빅테크TOP7Plus Disparity: ", round(top7CurrentDisparity,2),"\n\n")
message<-paste0(message,"QQQ Disparity: ", round(QQQcurrentDisparity,2),"\n\n")
message<-paste0(message,"TIGER 미국나스닥100레버리지 비율: ",nasdaqInvestRatio,"\n")
message<-paste0(message,"ACE 미국빅테크TOP7Plus 비율: ",top7InvestRatio)
sendMessage(message)
}
nasdaqBalanceSum<-totalBalanceSum*nasdaqInvestRatio
top7BalanceSum<-totalBalanceSum*top7InvestRatio
bondBalanceSum<-totalBalanceSum-top7BalanceSum-nasdaqBalanceSum
goalBalanceSheet<-data.table(종목코드=nasdaqLevCode,종목명='ACE 미국빅테크TOP7Plus(합성)',현재가=currentTop7LevPrice,목표금액=top7BalanceSum,주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=nasdaqLevCode,종목명='TIGER 미국나스닥100레버리지(합성)',현재가=currentNasdaqLevPrice,목표금액=nasdaqBalanceSum,주문구분='00'))
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=sofrCode,종목명='ACE 미국달러SOFR금리(합성)',현재가=currentSofrPrice,목표금액=0,주문구분='00'))
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=highYieldCode,종목명='KODEX iShares 미국하이일드액티브',현재가=currentHighyieldPrice,목표금액=bondBalanceSum,주문구분='00'))
if(length(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','hldg_qty','evlu_amt')]
names(currentBalanceSheet)<-c('종목코드','종목명','보유수량','평가금액')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','종목명'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
setorder(combinedSheet,-목표금액)
remainingPortion<-totalBalanceSum
for(i in 1:nrow(combinedSheet)){
row<-combinedSheet[i,]
remTable<-combinedSheet[-(1:i),]
availableAmount<-min(row$목표금액,remainingPortion)
if(row$목표금액>0){
qty<-row[,floor((availableAmount-평가금액)/현재가)]
combinedSheet[i,목표금액:=row$평가금액+qty*row$현재가]
}
else{
combinedSheet[i,목표금액:=remainingPortion/(nrow(remTable)+1)]
}
remainingPortion<-remainingPortion-combinedSheet[i,목표금액]
}
combinedSheet<-combinedSheet[,c('종목코드','종목명','보유수량','목표금액','평가금액')]
buySheet<-combinedSheet[평가금액<목표금액]
sellSheet<-combinedSheet[평가금액>목표금액]
buySheet
sellSheet
remainingPortion
setorder(combinedSheet,-목표금액)
remainingPortion<-totalBalanceSum
nasdaqBalanceSum<-totalBalanceSum*nasdaqInvestRatio
top7BalanceSum<-totalBalanceSum*top7InvestRatio
bondBalanceSum<-totalBalanceSum-top7BalanceSum-nasdaqBalanceSum
goalBalanceSheet<-data.table(종목코드=nasdaqLevCode,종목명='ACE 미국빅테크TOP7Plus(합성)',현재가=currentTop7LevPrice,목표금액=top7BalanceSum,주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=nasdaqLevCode,종목명='TIGER 미국나스닥100레버리지(합성)',현재가=currentNasdaqLevPrice,목표금액=nasdaqBalanceSum,주문구분='00'))
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=sofrCode,종목명='ACE 미국달러SOFR금리(합성)',현재가=currentSofrPrice,목표금액=0,주문구분='00'))
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=highYieldCode,종목명='KODEX iShares 미국하이일드액티브',현재가=currentHighyieldPrice,목표금액=bondBalanceSum,주문구분='00'))
if(length(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','hldg_qty','evlu_amt')]
names(currentBalanceSheet)<-c('종목코드','종목명','보유수량','평가금액')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','종목명'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
setorder(combinedSheet,-목표금액)
remainingPortion<-totalBalanceSum
combinedSheet
i<-1
row<-combinedSheet[i,]
remTable<-combinedSheet[-(1:i),]
availableAmount<-min(row$목표금액,remainingPortion)
availableAmount
if(row$목표금액>0){
qty<-row[,floor((availableAmount-평가금액)/현재가)]
combinedSheet[i,목표금액:=row$평가금액+qty*row$현재가]
}
combinedSheet
remainingPortion
remainingPortion<-remainingPortion-combinedSheet[i,목표금액]
remainingPortion
i<-2
row<-combinedSheet[i,]
remTable<-combinedSheet[-(1:i),]
availableAmount<-min(row$목표금액,remainingPortion)
availableAmount
if(row$목표금액>0){
qty<-row[,floor((availableAmount-평가금액)/현재가)]
combinedSheet[i,목표금액:=row$평가금액+qty*row$현재가]
}
else{
remainingPortion<-remainingPortion-combinedSheet[i,목표금액]
if(row$목표금액>0){
qty<-row[,floor((availableAmount-평가금액)/현재가)]
combinedSheet[i,목표금액:=row$평가금액+qty*row$현재가]
} else{
combinedSheet[i,목표금액:=remainingPortion/(nrow(remTable)+1)]
}
remainingPortion<-remainingPortion-combinedSheet[i,목표금액]
remainingPortion
combinedSheet
remainingPortion
row[i,목표금액]
갲
갲
row
row[i,현재가]
row[i,'현재가']
row[1,현재가]
row[,현재가]
qty<-row[,floor((remainingPortion-평가금액)/현재가)]
qty
setorder(combinedSheet,-목표금액)
remainingPortion<-totalBalanceSum
for(i in 1:nrow(combinedSheet)){
row<-combinedSheet[i,]
remTable<-combinedSheet[-(1:i),]
availableAmount<-min(row$목표금액,remainingPortion)
qty<-row[,floor((availableAmount-평가금액)/현재가)]
combinedSheet[i,목표금액:=row$평가금액+qty*row$현재가]
#else{
#  qty<-row[,floor((remainingPortion-평가금액)/현재가)]
#  combinedSheet[i,목표금액:=remainingPortion/(nrow(remTable)+1)]
#}
remainingPortion<-remainingPortion-combinedSheet[i,목표금액]
}
combinedSheet
setorder(combinedSheet,-목표금액)
remainingPortion<-totalBalanceSum
for(i in 1:nrow(combinedSheet)){
row<-combinedSheet[i,]
remTable<-combinedSheet[-(1:i),]
availableAmount<-min(row$목표금액,remainingPortion)
if(row$목표금액>0){
qty<-row[,floor((availableAmount-평가금액)/현재가)]
combinedSheet[i,목표금액:=row$평가금액+qty*row$현재가]
} else{
qty<-row[,floor(remainingPortion/현재가)]
combinedSheet[i,목표금액:=qty*row$현재가]
}
remainingPortion<-remainingPortion-combinedSheet[i,목표금액]
}
combinedSheet
