totalBalanceSum<-currentBalance$sheet[,sum(as.numeric(evlu_amt))]+getOrderableAmount(apiConfig,account,token,nasdaqLevCode)
curStockRatio<-0
if(nrow(currentBalance$sheet)>0){
curStockBalance<-sum(as.numeric(currentBalance$sheet[pdno!=456880,evlu_amt]))
curStockRatio<-curStockBalance/totalBalanceSum
}
#disp 1 ~ 2: 0.5
#disp 2 ~ 20: 1
#disp 20 ~ : 0
stockRatio<-abs(floor(QQQcurrentDisparity)*0.5)
stockRatio<-min(1,stockRatio)
stockRatio<-max(0,stockRatio)
if(QQQcurrentDisparity>=0) {
stockRatio<-max(stockRatio,curStockRatio)
} else stockRatio<-min(stockRatio,curStockRatio)
if(QQQcurrentDisparity>20) stockRatio<-0
top7NasdaqDiff<-top7CurrentDisparity-nasdaqCurrentDisparity
top7InvestRatio<-max(0,min(0.2,floor(top7NasdaqDiff)/10)*stockRatio)
nasdaqInvestRatio<-stockRatio-top7InvestRatio
top7InvestRatio
QQQcurrentDisparity<--1
stockRatio
if(QQQcurrentDisparity>=0) {
stockRatio<-max(stockRatio,curStockRatio)
} else stockRatio<-min(stockRatio,curStockRatio)
stockRatio
curStockRatio
curStockRatio<-1
if(QQQcurrentDisparity>=0) {
stockRatio<-max(stockRatio,curStockRatio)
} else stockRatio<-min(stockRatio,curStockRatio)
stockRatio
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
if(isHoliday(today)) stop("Holiday")
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
token<-getToken(apiConfig,account)
if(isKoreanTradeOpen(token,apiConfig,account,today)=="N") stop("Market closed")
cancelResult<-cancelAllOrders(apiConfig,account,token)
for(res in cancelResult) sendMessage(res)
snpTrackCode<-'360750'
prices<-adjustedPriceFromNaver('day',200,snpTrackCode)
averageSnpPrice<-mean(prices[,1])
currentSnpPrice<-tail(prices,1)[,1]
snpCurrentDisparity<-100*currentSnpPrice/averageSnpPrice-100
nasdaqTrackCode<-'133690'
prices<-adjustedPriceFromNaver('day',200,nasdaqTrackCode)
averageNasdaqPrice<-mean(prices[,1])
currentNasdaqPrice<-tail(prices,1)[,1]
nasdaqCurrentDisparity<-100*currentNasdaqPrice/averageNasdaqPrice-100
top7TrackCode<-'465580'
prices<-adjustedPriceFromNaver('day',200,top7TrackCode)
averageTop7Price<-mean(prices[,1])
currentTop7Price<-tail(prices,1)[,1]
top7CurrentDisparity<-100*currentTop7Price/averageTop7Price-100
symbols = c('QQQ')
getSymbols(symbols, src = 'yahoo')
prices = tail(Ad(QQQ),200)
currentPrice=tail(prices,1)
QQQ.Adjusted.MA.200<-mean(prices)
QQQcurrentDisparity<-(100*currentPrice/QQQ.Adjusted.MA.200)-100
nasdaqLevCode<-'418660' #TIGER 미국나스닥100레버리지(합성)
top7LevCode<-'465610' #ACE 미국빅테TOP7Plus레버리지(합성)
sofrCode<-'456880' #ACE 미국달러SOFR금리(합성)
currentTop7LevPrice<-getCurrentPrice(apiConfig,account,token,top7LevCode)
currentNasdaqLevPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
currentBalance<-getBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-currentBalance$sheet[,sum(as.numeric(evlu_amt))]+getOrderableAmount(apiConfig,account,token,nasdaqLevCode)
curStockRatio<-0
if(nrow(currentBalance$sheet)>0){
curStockBalance<-sum(as.numeric(currentBalance$sheet[pdno!=456880,evlu_amt]))
curStockRatio<-curStockBalance/totalBalanceSum
}
#setwd("/home/pi/stockInfoCrawler/StockTradebot/script")
setwd("/Users/chhan/StockTradebot/script")
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ','QQQ','SPY')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
qqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"QQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
spyPrice<-getCurrentOverseasPrice(apiConfig,account,token,'SPY','AMS')
boxxPrice<-getCurrentOverseasPrice(apiConfig,account,token,"BOXX",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=tqqqPrice,QQQ.Adjusted=qqqPrice,SPY.Adjusted=spyPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
print(currentPrice)
#currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
currentDisparity<-currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100]
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-floor((as.numeric(currentBalance$summary2[,"tot_asst_amt"])-as.numeric(currentBalance$summary2[,"wdrw_psbl_tot_amt"]))/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
}
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity)*0.5
if(TQQQGoalRatio>=1){
TQQQGoalRatio<-1
}else if(TQQQGoalRatio<=-1){
TQQQGoalRatio<--1
}else{
TQQQGoalRatio<-min(abs(TQQQGoalRatio),curTQQQRatio)
}
#sendMessage
message<-paste0("SPY price: ",currentPrice$SPY.Adjusted)
message<-paste0(message,"\nQQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nTQQQ price: ",currentPrice$TQQQ.Adjusted)
sendMessage(message)
message<-paste0("SPY 200 MA: ",round(currentPrice$SPY.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$QQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
sendMessage(message)
message<-paste0("SPY Disparity: ", round(currentPrice[,100*SPY.Adjusted/SPY.Adjusted.MA.200-100],2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentPrice[,100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100],2))
sendMessage(message)
message<-paste0("Today TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('BOXX'),거래소_현재가='AMS',거래소='AMEX',현재가=boxxPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(length(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','ovrs_excg_cd','ccld_qty_smtl1','frcr_evlu_amt2','buy_crcy_cd')]
names(currentBalanceSheet)<-c('종목코드','종목명','거래소','보유수량','평가금액','매수통화코드')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','거래소'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
combinedSheet[,매수통화코드:='USD']
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet[is.na(매수통화코드)]$매수통화코드<-"USD"
combinedSheet<-combinedSheet[(signal>0 & 목표금액>평가금액) | (signal<0 & 목표금액<평가금액) | (signal==0 & 평가금액!=목표금액)]
print("Final stock list")
print(combinedSheet)
sellSheet<-combinedSheet[평가금액>목표금액]
sellShet
sellSheet
sellRes<-orderOverseasStocks(token,apiConfig,account,sellSheet) #매도 먼저
stockTable<-sellSheet
i<-1
code<-stockTable[i,]$종목코드
excdcode2<-stockTable[i,]$거래소_현재가
excdcode<-stockTable[i,]$거래소
ordertype<-stockTable[i,]$주문구분
price<-getCurrentOverseasPrice(apiConfig,account,token,code,excdcode2)
curQty<-stockTable[i,]$보유수량
priceSum<-stockTable[i,]$목표금액-price*curQty
priceSum<-min(priceSum,getAvailablePurchaseAmount(token,apiConfig,account))
if(sign(priceSum)!=sign(stockTable[i,]$signal)) { next }
if(ordertype=='34') price<-price*(1+sign(priceSum)/100) #LOC 매수/매도는 일부러 가격을 변경
qty<-floor(priceSum/price)
qty
priceSum
price
curQty
stockTable[i,]$목표금액
combinedSheet
goalBalanceSheet
goalBalanceSum
totalBalanceSum
TQQQGoalRatio
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity)*0.5
if(TQQQGoalRatio>=1){
TQQQGoalRatio<-1
}else if(TQQQGoalRatio<=-1){
TQQQGoalRatio<-0
}else if(currentDisparity<0){
TQQQGoalRatio<-min(0.5,curTQQQRatio)
}else TQQQGoalRatio<-max(0.5,curTQQQRatio)
#sendMessage
message<-paste0("SPY price: ",currentPrice$SPY.Adjusted)
message<-paste0(message,"\nQQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nTQQQ price: ",currentPrice$TQQQ.Adjusted)
sendMessage(message)
message<-paste0("SPY 200 MA: ",round(currentPrice$SPY.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$QQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
sendMessage(message)
message<-paste0("SPY Disparity: ", round(currentPrice[,100*SPY.Adjusted/SPY.Adjusted.MA.200-100],2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentPrice[,100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100],2))
sendMessage(message)
message<-paste0("Today TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('BOXX'),거래소_현재가='AMS',거래소='AMEX',현재가=boxxPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(length(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','ovrs_excg_cd','ccld_qty_smtl1','frcr_evlu_amt2','buy_crcy_cd')]
names(currentBalanceSheet)<-c('종목코드','종목명','거래소','보유수량','평가금액','매수통화코드')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','거래소'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
combinedSheet[,매수통화코드:='USD']
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet[is.na(매수통화코드)]$매수통화코드<-"USD"
combinedSheet<-combinedSheet[(signal>0 & 목표금액>평가금액) | (signal<0 & 목표금액<평가금액) | (signal==0 & 평가금액!=목표금액)]
print("Final stock list")
print(combinedSheet)
sellSheet<-combinedSheet[평가금액>목표금액]
sellRes<-orderOverseasStocks(token,apiConfig,account,sellSheet) #매도 먼저
if(length(sellRes)>0){
sendMessage("Sell orders")
for(i in nrow(sellRes)){
row<-sellRes[i,]
text<-paste0("rt_cd: ",row$rt_cd," msg_cd: ",row$msg_cd," msg: ",row$msg1," code: ",row$code," qty: ",row$qty," price: ",row$price)
sendMessage(text,0)
Sys.sleep(0.04)
}
Sys.sleep(30)
}
buySheet<-combinedSheet[평가금액<=목표금액]
buyRes<-orderOverseasStocks(token,apiConfig,account,buySheet) #매수 다음
if(length(buyRes)>0){
print("Buy orders")
sendMessage("Buy orders")
for(i in nrow(buyRes)){
row<-buyRes[i,]
text<-paste0("rt_cd: ",row$rt_cd," msg_cd: ",row$msg_cd," msg: ",row$msg1," code: ",row$code," qty: ",row$qty," price: ",row$price)
sendMessage(text,0)
Sys.sleep(0.04)
}
}
revokeToken(apiConfig,account,token)
#setwd("/home/pi/stockInfoCrawler/StockTradebot/script")
setwd("/Users/chhan/StockTradebot/script")
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ','QQQ','SPY')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
qqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"QQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
spyPrice<-getCurrentOverseasPrice(apiConfig,account,token,'SPY','AMS')
boxxPrice<-getCurrentOverseasPrice(apiConfig,account,token,"BOXX",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=tqqqPrice,QQQ.Adjusted=qqqPrice,SPY.Adjusted=spyPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
print(currentPrice)
#currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
currentDisparity<-currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100]
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-floor((as.numeric(currentBalance$summary2[,"tot_asst_amt"])-as.numeric(currentBalance$summary2[,"wdrw_psbl_tot_amt"]))/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
}
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity)*0.5
if(TQQQGoalRatio>=1){
TQQQGoalRatio<-1
}else if(TQQQGoalRatio<=-1){
TQQQGoalRatio<-0
}else if(currentDisparity<0){
TQQQGoalRatio<-min(0.5,curTQQQRatio)
}else TQQQGoalRatio<-max(0.5,curTQQQRatio)
#sendMessage
message<-paste0("SPY price: ",currentPrice$SPY.Adjusted)
message<-paste0(message,"\nQQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nTQQQ price: ",currentPrice$TQQQ.Adjusted)
sendMessage(message)
message<-paste0("SPY 200 MA: ",round(currentPrice$SPY.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$QQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
sendMessage(message)
message<-paste0("SPY Disparity: ", round(currentPrice[,100*SPY.Adjusted/SPY.Adjusted.MA.200-100],2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentPrice[,100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100],2))
sendMessage(message)
message<-paste0("Today TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('BOXX'),거래소_현재가='AMS',거래소='AMEX',현재가=boxxPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(length(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','ovrs_excg_cd','ccld_qty_smtl1','frcr_evlu_amt2','buy_crcy_cd')]
names(currentBalanceSheet)<-c('종목코드','종목명','거래소','보유수량','평가금액','매수통화코드')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','거래소'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
combinedSheet[,매수통화코드:='USD']
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet[is.na(매수통화코드)]$매수통화코드<-"USD"
combinedSheet<-combinedSheet[(signal>0 & 목표금액>평가금액) | (signal<0 & 목표금액<평가금액) | (signal==0 & 평가금액!=목표금액)]
print("Final stock list")
print(combinedSheet)
sellSheet<-combinedSheet[평가금액>목표금액]
sellRes<-orderOverseasStocks(token,apiConfig,account,sellSheet) #매도 먼저
buySheet<-combinedSheet[평가금액<=목표금액]
buySheet
buyRes<-orderOverseasStocks(token,apiConfig,account,buySheet) #매수 다음
buyRes
orderOverseasStocks(token,apiConfig,account,buySheet)
goalBalanceSheet
combinedSheet
stockTable<-buySheet
i<-1
code<-stockTable[i,]$종목코드
excdcode2<-stockTable[i,]$거래소_현재가
excdcode<-stockTable[i,]$거래소
ordertype<-stockTable[i,]$주문구분
price<-getCurrentOverseasPrice(apiConfig,account,token,code,excdcode2)
price
curQty<-stockTable[i,]$보유수량
priceSum<-stockTable[i,]$목표금액-price*curQty
curQty
priceSUm
priceSum
priceSum<-min(priceSum,getAvailablePurchaseAmount(token,apiConfig,account))
priceSum
if(sign(priceSum)!=sign(stockTable[i,]$signal)) { next }
if(sign(priceSum)!=sign(stockTable[i,]$signal)) { next }
sign(priceSum)!=sign(stockTable[i,]$signal)
if(ordertype=='34') price<-price*(1+sign(priceSum)/100) #LOC 매수/매도는 일부러 가격을 변경
price
qty<-floor(priceSum/price)
qty
r<-orderOverseasStock(apiConfig,account,token,excdcode,code,qty,price,ordertype)
r
code<-stockTable[i,]$종목코드
excdcode2<-stockTable[i,]$거래소_현재가
excdcode<-stockTable[i,]$거래소
ordertype<-stockTable[i,]$주문구분
price<-getCurrentOverseasPrice(apiConfig,account,token,code,excdcode2)
curQty<-stockTable[i,]$보유수량
priceSum<-stockTable[i,]$목표금액-price*curQty
priceSum<-min(priceSum,getAvailablePurchaseAmount(token,apiConfig,account))
if(sign(priceSum)!=sign(stockTable[i,]$signal)) { next }
if(ordertype=='34') price<-price*(1+sign(priceSum)/100) #LOC 매수/매도는 일부러 가격을 변경
qty<-floor(priceSum/price)
print(paste("code:",code," name:",stockTable[i,]$종목명," qty:",qty," price:",price, " ordersum:",qty*price))
if(qty==0){
print("skip order: qty is 0")
next;
}
r<-orderOverseasStock(apiConfig,account,token,excdcode,code,qty,price,ordertype)
r$idx<-i
print(paste("rc_cd:",r$rt_cd," msg_cd:",r$msg_cd," msg:",r$msg1))
res<-rbind(res,as.data.table(r))
Sys.sleep(0.1)
#token<-getToken(apiConfig,account)
res<-NULL
code<-stockTable[i,]$종목코드
excdcode2<-stockTable[i,]$거래소_현재가
excdcode<-stockTable[i,]$거래소
ordertype<-stockTable[i,]$주문구분
price<-getCurrentOverseasPrice(apiConfig,account,token,code,excdcode2)
curQty<-stockTable[i,]$보유수량
priceSum<-stockTable[i,]$목표금액-price*curQty
priceSum<-min(priceSum,getAvailablePurchaseAmount(token,apiConfig,account))
if(sign(priceSum)!=sign(stockTable[i,]$signal)) { next }
if(ordertype=='34') price<-price*(1+sign(priceSum)/100) #LOC 매수/매도는 일부러 가격을 변경
qty<-floor(priceSum/price)
print(paste("code:",code," name:",stockTable[i,]$종목명," qty:",qty," price:",price, " ordersum:",qty*price))
if(qty==0){
print("skip order: qty is 0")
next;
}
r<-orderOverseasStock(apiConfig,account,token,excdcode,code,qty,price,ordertype)
r$idx<-i
print(paste("rc_cd:",r$rt_cd," msg_cd:",r$msg_cd," msg:",r$msg1))
res<-rbind(res,as.data.table(r))
Sys.sleep(0.1)
res
buyRes<-orderOverseasStocks(token,apiConfig,account,buySheet) #매수 다음
buyRes
sign(stockTable[i,]$signal))
sign(stockTable[i,]$signal)
sign(priceSum)
buyRes<-orderOverseasStocks(token,apiConfig,account,buySheet) #매수 다음
buyRes
orderOverseasStocks<-function(token,apiConfig, account, stockTable){
if(nrow(stockTable)==0) return(NULL)
#token<-getToken(apiConfig,account)
res<-NULL
for(i in 1:nrow(stockTable)){
code<-stockTable[i,]$종목코드
excdcode2<-stockTable[i,]$거래소_현재가
excdcode<-stockTable[i,]$거래소
ordertype<-stockTable[i,]$주문구분
price<-getCurrentOverseasPrice(apiConfig,account,token,code,excdcode2)
curQty<-stockTable[i,]$보유수량
priceSum<-stockTable[i,]$목표금액-price*curQty
priceSum<-min(priceSum,getAvailablePurchaseAmount(token,apiConfig,account))
if(sign(stockTable[i,]$signal)!=0 & sign(priceSum)!=sign(stockTable[i,]$signal)) { next }
if(ordertype=='34') price<-price*(1+sign(priceSum)/100) #LOC 매수/매도는 일부러 가격을 변경
qty<-floor(priceSum/price)
print(paste("code:",code," name:",stockTable[i,]$종목명," qty:",qty," price:",price, " ordersum:",qty*price))
if(qty==0){
print("skip order: qty is 0")
next;
}
r<-orderOverseasStock(apiConfig,account,token,excdcode,code,qty,price,ordertype)
r$idx<-i
print(paste("rc_cd:",r$rt_cd," msg_cd:",r$msg_cd," msg:",r$msg1))
res<-rbind(res,as.data.table(r))
Sys.sleep(0.1)
}
#revokeToken(apiConfig,account,token)
return(res)
}
sellRes<-orderOverseasStocks(token,apiConfig,account,sellSheet) #매도 먼저
buyRes<-orderOverseasStocks(token,apiConfig,account,buySheet) #매수 다음
