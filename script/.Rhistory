movingAvg
as.xts(prices)
tbl<-as.xts(prices)
names(tbl)
tbl
names(tbl)<-'asfd'
tbl
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
names(tbl)<-'test'
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
movingAvg
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
names(tbl)<-code
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
movingAvg
code<-'379810'
prices<-adjustedPriceFromNaver('day',200,'379810')
prices
is.data.table(prices)
mean(prices$379810)
mean(prices$"379810")
averagePrice<-mean(prices$code)
averagePrice<-mean(prices$'378910')
code<-'379810'
prices<-adjustedPriceFromNaver('day',200,'379810')
averagePrice<-mean(prices$'378910')
averagePrice<-mean(prices$"378910")
prices
prices$379810
prices$"379810"
prices$"378910"
averagePrice<-mean(prices$"379810")
prices
currentPrice<-prices[-1,][,1]
prices
prices[-1,]
prices[1,]
prices[2,,]
prices[2,]
prices[-3,]
prices[,1]
prices[,1][-1]
a<-c(1,2,3,4,5)
c[-1]
c
a[-1]
tail(prices,1)
tail(prices,1)[,1]
currentDisparity<-currentPrice/averagePrice-100
currentPrice<-tail(prices,1)[,1]
currentDisparity<-currentPrice/averagePrice-100
currentDisparity
currentPrice
averagePrice
currentPrice/averagePrice
currentDisparity<-100*currentPrice/averagePrice-100
currentDisparity
trackCode<-'379810'
get(trackCode)
eval(trackCode)
?get
averagePrice<-mean(prices$eval(trackCode))
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices$eval(trackCode))
eval(trackCode)
averagePrice<-mean(prices$get(trackCode))
prices$get(trackCode)
prices$eval(trackCode)
prices$(eval(trackCode))
eval(trackCode)
eval(trackCode)[1]
prices$eval(trackCode)[1]
trackCode
prices[,1]
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
currentPrice
?sleep
?Sys.sleep
Sys.sleep(10)
code
cnd
cnt
interval
# url 생성
url = paste0(
'https://fchart.stock.naver.com/sise.nhn?symbol='
,code,'&timeframe=',interval,'&count=',cnt+1,'&requestType=0')
url
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
today<-str_replace_all(Sys.Date(),"-","")
token<-getToken(apiConfig,account)
account
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
averagePrice
prices
currentPrice
currentDisparity
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
account
today<-str_replace_all(Sys.Date(),"-","")
token<-getToken(apiConfig,account)
if(isKoreanHoliday(token,apiConfig,account,today)=="N") stop("Market closed")
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
nasdaqLevCode<-'418660' #tiger 나스닥 레버리지
sofrCode<-'456880' #ace sofr
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
token
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
nasdaqLevCode
apiConfig
account
getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
code<-nasdaqLevCode
priceUrl<-paste0(apiConfig$url,'/uapi/domestic-stock/v1/quotations/inquire-price')
headers<-c(
Authorization=paste('Bearer',token),
appkey=account$appkey,
appsecret=account$appsecret,
tr_id='FHKST01010100'
)
query<-list(FID_COND_MRKT_DIV_CODE='J',FID_INPUT_ISCD=code)
response<-GET(priceUrl,add_headers(headers),query=query)
res<-fromJSON(rawToChar(response$content))
if(res$rt_cd!=0) return(-1)
as.numeric(res$output$stck_prpr)
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
goalRatio<-floor(currentDisparity)*0.5
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
if(currentDisparity>20) goalRatio<-0
goalRatio
currentDisparity
currentBalance<-getBalancesheet(token,apiConfig,account)
currentBalance
totalBalanceSum<-as.numeric(currentBalance$summary$tot_evlu_amt)
goalBalanceSum<-totalBalanceSum*goalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=nasdaqLevCode,종목명='tiger 나스닥 레버리지',현재가=currentNasdaqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=sofrCode,종목명='ace sofr',현재가=currentSofrPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
goalBalanceSheet
a$aa<-0
a$test<-2
a
b
b$test<-2
b
prices
price
goalBalanceSheet
goalBalanceSheet[,종목명]
goalBalanceSheet$signal
goalBalanceSheet$종목명
for(i in 1:3){print(i)}
list()
a=list(a=3)
a
b=list(b=3)
b
c(a,b)
d<-c(a,b)
for(l in c){print(l)}
c
for(l in d){print(l)}
a
a$f<=3
a$f<-3
a
for(l in d){print(l)}
b$f<-1
for(l in d){print(l$f)}
for(l in d){l}
d
d[1]
d[2]
c(NULL,a)
response
response$content
rawToChar(response$content)
res<-rawToChar(response$content)
res
sendMessage(res)
a<-c()
a
length(a)
for(i in a){print(i)}
a<-c(1,3)
for(i in a){print(i)}
setwd("/home/pi/stockInfoCrawler/StockTradebot/script")
#setwd("/Users/chhan/StockTradebot/script")
#source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
#source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
source("~/stockInfoCrawler/StockTradebot/script/Han2FunctionList.R") #라즈베리에서 읽는 경우
source("~/stockInfoCrawler/StockTradebot/script/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
#setwd("/home/pi/stockInfoCrawler/StockTradebot/script")
setwd("/Users/chhan/StockTradebot/script")
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ','QQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
qqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"QQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
boxxPrice<-getCurrentOverseasPrice(apiConfig,account,token,"BOXX",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=tqqqPrice,QQQ.Adjusted=qqqPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
print(currentPrice)
#currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
currentDisparity<-currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100]
currentPrice
currentDisparity
#TQQQratio
#TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-floor(currentDisparity)*0.5
TQQQGoalRatio
currentDisparity
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
if(sign(currentDisparity)>=0) TQQQGoalRatio<-max(TQQQGoalRatio,curTQQQRatio)
if(sign(currentDisparity)<0) TQQQGoalRatio<-min(TQQQGoalRatio,curTQQQRatio)
TQQQGoalRatio
totalBalanceSum<-floor((as.numeric(currentBalance$summary2[,"tot_asst_amt"])-as.numeric(currentBalance$summary2[,"wdrw_psbl_tot_amt"]))/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
if(length(curTQQQRatio)) curTQQQRatio<-0
}
#TQQQratio
#TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-floor(currentDisparity)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
if(sign(currentDisparity)>=0) TQQQGoalRatio<-max(TQQQGoalRatio,curTQQQRatio)
if(sign(currentDisparity)<0) TQQQGoalRatio<-min(TQQQGoalRatio,curTQQQRatio)
TQQQGoalRatio
curTQQQRatio
currentBalance
totalBalanceSum<-floor((as.numeric(currentBalance$summary2[,"tot_asst_amt"])-as.numeric(currentBalance$summary2[,"wdrw_psbl_tot_amt"]))/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-floor((as.numeric(currentBalance$summary2[,"tot_asst_amt"])-as.numeric(currentBalance$summary2[,"wdrw_psbl_tot_amt"]))/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
if(length(curTQQQRatio)) curTQQQRatio<-0
}
totalBalanceSum
curTQQQRatio
if(nrow(currentBalance$sheet)>0){
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
if(length(curTQQQRatio)) curTQQQRatio<-0
}
curTQQQRatio
as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2]
)
currentBalance
currentBalance$sheet
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQBalance
curTQQQRatio<-curTQQQBalance/totalBalanceSum
curTQQQRatio
length(curTQQQRatio)
if(nrow(currentBalance$sheet)>0){
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
}
#TQQQratio
#TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-floor(currentDisparity)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
TQQQGoalRatio
totalBalanceSum<-floor((as.numeric(currentBalance$summary2[,"tot_asst_amt"])-as.numeric(currentBalance$summary2[,"wdrw_psbl_tot_amt"]))/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
}
curTQQQRatio
#TQQQratio
#TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-floor(currentDisparity)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
if(sign(currentDisparity)>=0) TQQQGoalRatio<-max(TQQQGoalRatio,curTQQQRatio)
if(sign(currentDisparity)<0) TQQQGoalRatio<-min(TQQQGoalRatio,curTQQQRatio)
TQQQGoalRatio
#sendMessage
message<-paste0("QQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nTQQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$QQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentPrice[,100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
message
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('BOXX'),거래소_현재가='AMS',거래소='AMEX',현재가=boxxPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(nrow(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','ovrs_excg_cd','ccld_qty_smtl1','frcr_evlu_amt2','buy_crcy_cd')]
names(currentBalanceSheet)<-c('종목코드','종목명','거래소','보유수량','평가금액','매수통화코드')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','거래소'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
combinedSheet[,매수통화코드:='USD']
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet[is.na(매수통화코드)]$매수통화코드<-"USD"
combinedSheet<-combinedSheet[(signal>0 & 목표금액>평가금액) | (signal<0 & 목표금액<평가금액) | (signal==0 & 평가금액!=목표금액)]
print("Final stock list")
print(combinedSheet)
if(nrow(combinedSheet)>0){
sellSheet<-combinedSheet[평가금액>목표금액]
if(nrow(sellSheet)>0){
print("Sell orders")
sellRes<-orderOverseasStocks(token,apiConfig,account,sellSheet) #매도 먼저
sendMessage("Sell orders")
for(i in nrow(sellRes)){
row<-sellRes[i,]
text<-paste0("rt_cd: ",row$rt_cd," msg_cd: ",row$msg_cd," msg: ",row$msg1," code: ",row$code," qty: ",row$qty," price: ",row$price)
sendMessage(text,0)
Sys.sleep(0.04)
}
}
buySheet<-combinedSheet[평가금액<목표금액]
if(nrow(buySheet)>0){
buyRes<-orderOverseasStocks(token,apiConfig,account,buySheet) #매수 다음
if(nrow(buyRes)>0) {
print("Buy orders")
sendMessage("Buy orders")
}
for(i in nrow(buyRes)){
row<-buyRes[i,]
text<-paste0("rt_cd: ",row$rt_cd," msg_cd: ",row$msg_cd," msg: ",row$msg1," code: ",row$code," qty: ",row$qty," price: ",row$price)
sendMessage(text,0)
Sys.sleep(0.04)
}
}
print("failed stocks")
if(exists("sellRes")) print(sellRes[rt_cd!='0'])
if(exists("buyRes")) print(buyRes[rt_cd!='0'])
cnt<-0
failNum<-nrow(buyRes[rt_cd!='0'])
rebuySheet<-buySheet
rebuyRes<-buyRes
while(failNum>0 & cnt<=3){
cnt<-cnt+1
rebuySheet<-rebuySheet[rebuyRes[rt_cd!='0']$idx]
rebuyRes<-orderOverseasStocks(token,apiConfig,account,rebuySheet)
for(i in nrow(rebuyRes)){
sendMessage("Buy orders")
row<-rebuyRes[i,]
text<-paste0("rt_cd: ",row$rt_cd," msg_cd: ",row$msg_cd," msg: ",row$msg1," code: ",row$code," qty: ",row$qty," price: ",row$price)
sendMessage(text,0)
Sys.sleep(0.04)
}
failNum<-nrow(rebuyRes[rt_cd!='0'])
Sys.sleep(30)
}
res<-NULL
if(exists("sellRes")) res<-rbind(res,sellRes)
if(exists("buyRes")) res<-rbind(res,buyRes)
}
nrow(combinedSheet)
combinedSheet
combinedSheet$목표금액
bondBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('BOXX'),거래소_현재가='AMS',거래소='AMEX',현재가=boxxPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
goalBalanceSheet
totalBalanceSum<-floor((as.numeric(currentBalance$summary2[,"tot_asst_amt"])-as.numeric(currentBalance$summary2[,"wdrw_psbl_tot_amt"]))/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
length(curTQQQBalance)
length(curTQQQRatio)
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
today<-str_replace_all(Sys.Date(),"-","")
token<-getToken(apiConfig,account)
if(isKoreanHoliday(token,apiConfig,account,today)=="N") stop("Market closed")
cancelResult<-cancelAllOrders(apiConfig,account,token)
for(res in cancelResult) sendMessage(res)
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
