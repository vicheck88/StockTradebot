currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
nasdaqLevCode<-'418660' #TIGER 미국나스닥100레버리지(합성)
sofrCode<-'456880' #ACE 미국달러SOFR금리(합성)
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
#disp 1 ~ 2: 0.5
#disp 2 ~ 20: 1
#disp 20 ~ : 0
goalRatio<-abs(floor(currentDisparity)*0.5)
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
if(currentDisparity>20) goalRatio<-0
currentBalance<-getBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-currentBalance$sheet[,sum(as.numeric(evlu_amt))]+getOrderableAmount(apiConfig,account,token,nasdaqLevCode)
#totalBalanceSum<-as.numeric(currentBalance$summary$tot_evlu_amt)
#orderableAmount<-getOrderableAmount(apiConfig,account,token,nasdaqLevCode)
goalBalanceSum<-totalBalanceSum*goalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=nasdaqLevCode,종목명='TIGER 미국나스닥100레버리지(합성)',현재가=currentNasdaqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=sofrCode,종목명='ACE 미국달러SOFR금리(합성)',현재가=currentSofrPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(length(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','hldg_qty','evlu_amt')]
names(currentBalanceSheet)<-c('종목코드','종목명','보유수량','평가금액')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','종목명'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet<-combinedSheet[(signal>0 & 목표금액>평가금액) | (signal<0 & 목표금액<평가금액) | (signal==0 & 평가금액!=목표금액)]
buySheet<-combinedSheet[평가금액<=목표금액]
remainingPortion<-totalBalanceSum
for(i in 1:nrow(buySheet)){
row<-buySheet[i,]
remTable<-buySheet[-(1:i),]
availableAmount<-getOrderableAmount(apiConfig,account,token,row$종목코드)+row$평가금액
if(length(remTable)>0) availableAmount <- availableAmount+remTable[,sum(평가금액)]
availableAmount<-min(availableAmount,remainingPortion)
qty<-row[,min(0,floor((availableAmount-평가금액)/현재가))]
if(qty==0){
amt<-buySheet[i,평가금액]
} else{
amt<-availableAmount
}
buySheet[i,]$목표금액<-amt
remainingPortion<-remainingPortion-amt
}
remainingPortion
buySheet
sellSheet
sellSheet<-combinedSheet[평가금액>목표금액]
sellSheet
row<-sellSheet[1,]
row
amt<-min(row$목표금액+remainingPortion,row$평가금액)
amt
row$목표금액+remainingPortion
combinedSheet
remainingPortion<-totalBalanceSum
for(i in 1:nrow(combinedSheet)){
row<-combinedSheet[i,]
remTable<-combinedSheet[-(1:i),]
availableAmount<-getOrderableAmount(apiConfig,account,token,row$종목코드)+row$평가금액
if(length(remTable)>0) availableAmount <- availableAmount+remTable[,sum(평가금액)]
availableAmount<-min(availableAmount,remainingPortion)
if(row$목표금액>row$평가금액){
qty<-row[,min(0,floor((availableAmount-평가금액)/현재가))]
if(qty==0){
amt<-buySheet[i,평가금액]
} else{
amt<-availableAmount
}
combinedSheet[i,]$목표금액<-amt
remainingPortion<-remainingPortion-amt
} else{
combinedSheet[i,]$목표금액<-remainingPortion
}
}
combinedSheet
buySheet<-combinedSheet[평가금액<목표금액]
sellSheet<-combinedSheet[평가금액>목표금액]
buySheet
sellSheet
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
if(isHoliday(today)) stop("Holiday")
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
token<-getToken(apiConfig,account)
if(isKoreanTradeOpen(token,apiConfig,account,today)=="N") stop("Market closed")
cancelResult<-cancelAllOrders(apiConfig,account,token)
for(res in cancelResult) sendMessage(res)
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
nasdaqLevCode<-'418660' #TIGER 미국나스닥100레버리지(합성)
sofrCode<-'456880' #ACE 미국달러SOFR금리(합성)
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
#disp 1 ~ 2: 0.5
#disp 2 ~ 20: 1
#disp 20 ~ : 0
goalRatio<-abs(floor(currentDisparity)*0.5)
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
if(currentDisparity>20) goalRatio<-0
currentBalance<-getBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-currentBalance$sheet[,sum(as.numeric(evlu_amt))]+getOrderableAmount(apiConfig,account,token,nasdaqLevCode)
#totalBalanceSum<-as.numeric(currentBalance$summary$tot_evlu_amt)
#orderableAmount<-getOrderableAmount(apiConfig,account,token,nasdaqLevCode)
goalBalanceSum<-totalBalanceSum*goalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=nasdaqLevCode,종목명='TIGER 미국나스닥100레버리지(합성)',현재가=currentNasdaqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=sofrCode,종목명='ACE 미국달러SOFR금리(합성)',현재가=currentSofrPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(length(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','hldg_qty','evlu_amt')]
names(currentBalanceSheet)<-c('종목코드','종목명','보유수량','평가금액')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','종목명'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet<-combinedSheet[(signal>0 & 목표금액>평가금액) | (signal<0 & 목표금액<평가금액) | (signal==0 & 평가금액!=목표금액)]
buySheet<-combinedSheet[평가금액<=목표금액]
remainingPortion<-totalBalanceSum
for(i in 1:nrow(combinedSheet)){
row<-combinedSheet[i,]
remTable<-combinedSheet[-(1:i),]
availableAmount<-getOrderableAmount(apiConfig,account,token,row$종목코드)+row$평가금액
if(length(remTable)>0) availableAmount <- availableAmount+remTable[,sum(평가금액)]
availableAmount<-min(availableAmount,remainingPortion)
if(row$목표금액>row$평가금액){
qty<-row[,min(0,floor((availableAmount-평가금액)/현재가))]
if(qty==0){
amt<-buySheet[i,평가금액]
} else{
amt<-availableAmount
}
combinedSheet[i,]$목표금액<-amt
remainingPortion<-remainingPortion-amt
} else{
combinedSheet[i,]$목표금액<-remainingPortion
}
}
combinedSheet<-combinedSheet[,c('종목코드','종목명','보유수량','목표금액','평가금액')]
combinedSheet
#setwd("/home/pi/stockInfoCrawler/StockTradebot/script")
setwd("/Users/chhan/StockTradebot/script")
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ','QQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
qqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"QQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
spyPrice<-getCurrentOverseasPrice(apiConfig,account,token,'SPY','NAS')
spyPrice
tqqqPrice
spyPrice
getCurrentOverseasPrice(apiConfig,account,token,'SPY','AMS')
symbols = c('TQQQ','QQQ','SPY')
getSymbols(symbols, src = 'yahoo')
symbols
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=tqqqPrice,QQQ.Adjusted=qqqPrice,SPY.Adjusted=spyPrice)))
qqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"QQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
spyPrice<-getCurrentOverseasPrice(apiConfig,account,token,'SPY','AMS')
boxxPrice<-getCurrentOverseasPrice(apiConfig,account,token,"BOXX",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=tqqqPrice,QQQ.Adjusted=qqqPrice,SPY.Adjusted=spyPrice)))
prices<-as.data.table(prices)
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=tqqqPrice,QQQ.Adjusted=qqqPrice,SPY.Adjusted=spyPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
priceWithMA
currentPrice[,100*SPY.Adjusted/SPY.Adjusted.MA.200-100]
currentPrice<-tail(priceWithMA,1)
currentPrice
currentPrice<-currentPrice[,-1]
print(currentPrice)
#currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
currentDisparity<-currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100]
currentPrice[,100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100]
#sendMessage
message<-paste0("SPY price: ",currentPrice$SPY.Adjusted)
message<-paste0("QQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nTQQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nSPY 200 MA: ",round(currentPrice$SPY.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$QQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nSPY Disparity: ", round(currentPrice[,100*SPY.Adjusted/SPY.Adjusted.MA.200-100],2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentPrice[,100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
#setwd("/home/pi/stockInfoCrawler/StockTradebot/script")
setwd("/Users/chhan/StockTradebot/script")
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
#setwd("/home/pi/stockInfoCrawler/StockTradebot/script")
setwd("/Users/chhan/StockTradebot/script")
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ','QQQ','SPY')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
qqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"QQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
spyPrice<-getCurrentOverseasPrice(apiConfig,account,token,'SPY','AMS')
boxxPrice<-getCurrentOverseasPrice(apiConfig,account,token,"BOXX",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=tqqqPrice,QQQ.Adjusted=qqqPrice,SPY.Adjusted=spyPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
print(currentPrice)
#currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
currentDisparity<-currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100]
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-floor((as.numeric(currentBalance$summary2[,"tot_asst_amt"])-as.numeric(currentBalance$summary2[,"wdrw_psbl_tot_amt"]))/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
}
#TQQQratio
#TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-abs(floor(currentDisparity)*0.5)
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
if(sign(currentDisparity)>=0) TQQQGoalRatio<-max(TQQQGoalRatio,curTQQQRatio)
if(sign(currentDisparity)<0) TQQQGoalRatio<-min(TQQQGoalRatio,curTQQQRatio)
#sendMessage
message<-paste0("SPY price: ",currentPrice$SPY.Adjusted)
message<-paste0("QQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nTQQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nSPY 200 MA: ",round(currentPrice$SPY.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$QQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nSPY Disparity: ", round(currentPrice[,100*SPY.Adjusted/SPY.Adjusted.MA.200-100],2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentPrice[,100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('BOXX'),거래소_현재가='AMS',거래소='AMEX',현재가=boxxPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(length(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','ovrs_excg_cd','ccld_qty_smtl1','frcr_evlu_amt2','buy_crcy_cd')]
names(currentBalanceSheet)<-c('종목코드','종목명','거래소','보유수량','평가금액','매수통화코드')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','거래소'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
combinedSheet[,매수통화코드:='USD']
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet[is.na(매수통화코드)]$매수통화코드<-"USD"
combinedSheet<-combinedSheet[(signal>0 & 목표금액>평가금액) | (signal<0 & 목표금액<평가금액) | (signal==0 & 평가금액!=목표금액)]
print("Final stock list")
print(combinedSheet)
#sendMessage
message<-paste0("SPY price: ",currentPrice$SPY.Adjusted)
message<-paste0("QQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nTQQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nSPY 200 MA: ",round(currentPrice$SPY.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$QQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nSPY Disparity: ", round(currentPrice[,100*SPY.Adjusted/SPY.Adjusted.MA.200-100],2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentPrice[,100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
#sendMessage
message<-paste0("SPY price: ",currentPrice$SPY.Adjusted)
message<-paste0(messsage,"QQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nTQQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nSPY 200 MA: ",round(currentPrice$SPY.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$QQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nSPY Disparity: ", round(currentPrice[,100*SPY.Adjusted/SPY.Adjusted.MA.200-100],2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentPrice[,100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
#sendMessage
message<-paste0("SPY price: ",currentPrice$SPY.Adjusted)
message<-paste0(message,"QQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nTQQQ price: ",currentPrice$TQQQ.Adjusted)
sendMessage(message)
message<-paste0("\nSPY 200 MA: ",round(currentPrice$SPY.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$QQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
sendMessage(message)
message<-paste0("\nSPY Disparity: ", round(currentPrice[,100*SPY.Adjusted/SPY.Adjusted.MA.200-100],2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentPrice[,100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100],2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentPrice[,100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100],2))
sendMessage(message)
message<-paste0("\nToday TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
#sendMessage
message<-paste0("SPY price: ",currentPrice$SPY.Adjusted)
message<-paste0(message,"\nQQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nTQQQ price: ",currentPrice$TQQQ.Adjusted)
sendMessage(message)
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
if(isHoliday(today)) stop("Holiday")
base="http://apis.data.go.kr/B090041/openapi/service/SpcdeInfoService/getRestDeInfo"
year = year(Sys.Date())
month = month(Sys.Date())
key="PEWQgyukEMto9hnKQ1YpebLFfE%2F3VGib2d2TZ1XvjKICjFbNfZ8BeQNspNF9avuO%2B%2F4zqnDj2P4rgk2KjjkDgQ%3D%3D"
url<-paste(base,'?serviceKey=',key,'&pageNo=1&numOfRows=10&solYear=',year,'&solMonth=',sprintf("%02d",month),sep="")
data<-content(GET(url))$response$body
data<-content(GET(url))$response$body
data
if(isHoliday(today)) stop("Holiday")
holidayList<-c()
if(data$totalCount>0){
holidayList<-rbindlist(data$items$item)$locdate
}
data
data$items
data$items$item
data$items$item$locdate
rbindlist(data$items$item$locdate)
url<-paste(base,'?serviceKey=',key,'&pageNo=1&numOfRows=10&solYear=',year,'&solMonth=','09',sep="")
data<-content(GET(url))$response$body
holidayList<-c()
if(data$totalCount>0){
holidayList<-rbindlist(data$items$item)$locdate
}
holidayList
data$items$item)$locdate
(data$items$item)$locdate
(data$items$item)
(data$items$item)$locdate
rbindlist(data$items$item)$locdate
rbindlist(data$items$item)
url<-paste(base,'?serviceKey=',key,'&pageNo=1&numOfRows=10&solYear=',year,'&solMonth=12',sep="")
data<-content(GET(url))$response$body
holidayList<-c()
rbindlist(data$items$item)
data$items$item
as.data.table(data$items$item)
url<-paste(base,'?serviceKey=',key,'&pageNo=1&numOfRows=10&solYear=',year,'&solMonth=09',sep="")
data<-content(GET(url))$response$body
rbindlist(data$items$item)
as.data.table(data$items$item)
rbind(data$items$item)
rbindlist(data$items$item)
rbindlist(as.list(data$items$item))
url<-paste(base,'?serviceKey=',key,'&pageNo=1&numOfRows=10&solYear=',year,'&solMonth=12',sep="")
data<-content(GET(url))$response$body
rbindlist(data$items$item)
rbindlist(as.list(data$items$item))
data$items$itme
data$items$item
c(data$items$item)
rbindlist(c(data$items$item))
data$items$item$locdate
c(data$items$item$locdate)
isHoliday<-function(today){
base="http://apis.data.go.kr/B090041/openapi/service/SpcdeInfoService/getRestDeInfo"
year = year(Sys.Date())
month = month(Sys.Date())
key="PEWQgyukEMto9hnKQ1YpebLFfE%2F3VGib2d2TZ1XvjKICjFbNfZ8BeQNspNF9avuO%2B%2F4zqnDj2P4rgk2KjjkDgQ%3D%3D"
url<-paste(base,'?serviceKey=',key,'&pageNo=1&numOfRows=10&solYear=',year,'&solMonth=',sprintf("%02d",month),sep="")
data<-content(GET(url))$response$body
holidayList<-c()
if(data$totalCount==1) holidayList=c(data$items$item$locdate)
elif(data$totalCount>1){
if(isHoliday(today)) stop("Holiday")
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
isHoliday<-function(today){
base="http://apis.data.go.kr/B090041/openapi/service/SpcdeInfoService/getRestDeInfo"
year = year(Sys.Date())
month = month(Sys.Date())
key="PEWQgyukEMto9hnKQ1YpebLFfE%2F3VGib2d2TZ1XvjKICjFbNfZ8BeQNspNF9avuO%2B%2F4zqnDj2P4rgk2KjjkDgQ%3D%3D"
url<-paste(base,'?serviceKey=',key,'&pageNo=1&numOfRows=10&solYear=',year,'&solMonth=',sprintf("%02d",month),sep="")
data<-content(GET(url))$response$body
holidayList<-c()
if(data$totalCount==1) holidayList=c(data$items$item$locdate)
else if(data$totalCount>1){
holidayList<-rbindlist(data$items$item)$locdate
}
return(today %in% holidayList)
}
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
today<-str_replace_all(Sys.Date(),"-","")
today
library(RPostgres)
library(DBI)
library(jsonlite)
dbConfig=read_json("~/config.json")$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
conn
