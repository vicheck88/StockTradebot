coinPriceHistory<-movingAvg[coinPriceHistory,on=c("market","candle_date_time_kst")]
for(i in 1:nrow(coinPriceHistory)){
row<-coinPriceHistory[i,]
time<-row$candle_date_time_kst
subTable<-coinPriceHistory[isDayStart==T][time>=candle_date_time_kst]
if(nrow(subTable)<movingAvgDay) next
subTable<-rbind(subTable,row)
subTable<-subTable[(nrow(subTable)-movingAvgDay):nrow(subTable),]
v<-last(subTable[,frollmean(trade_price,movingAvgDay,align="right")])
coinPriceHistory[i,]$movingAvg<-v
}
minDay<-min(coinPriceHistory[is.na(movingAvg)==F,candle_date_time_kst])
coinPriceHistory<-coinPriceHistory[candle_date_time_kst>=minDay]
#for(i in 2:nrow(coinPriceHistory)){
#  if(is.na(coinPriceHistory[i,]$movingAvg))
#    coinPriceHistory[i,]$movingAvg=coinPriceHistory[i-1]$movingAvg
#}
coinPriceHistory[,disparity:=trade_price/movingAvg*100-100]
#이평선과 비교해 높을 경우 매수, 낮을 경우 매도
#구입: 1%부터 1%당 현금 10%씩
#판매: -1%부터 1%당 현금 20%씩. 단, 10% 떨어지는 경우는 전부 손절
targetRatio<-1
coinPriceHistory$investRatio<-0
getInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$disparity
if(disparity>0) {
addRatio<-floor(disparity)*0.5
}  else addRatio<-floor(disparity)*0.25
#}  else addRatio<-floor(disparity)*0.5
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
table[i,]$investRatio<-newRatio
}
return(table)
}
coinPriceHistory<-coinPriceHistory[,getInvestRatio(.SD),by=market]
#시간단위일 경우 시간변경 필요
#coinPriceHistory[,candle_date_time_kst:=as.Date(coinPriceHistory[,min(candle_date_time_kst)])+(.I-1)*2]
coinRatioTable<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,investRatio)]
coinRatioTable[,candle_date_time_kst:=as_datetime(candle_date_time_kst,tz=Sys.timezone())]
coinRatioTable[,cashRatio:=1-investRatio]
coinAdjusted<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,trade_price)]
coinAdjusted<-coinAdjusted[,candle_date_time_kst:=as_datetime(candle_date_time_kst,tz=Sys.timezone())]
coinAdjusted[,prevValue:=shift(trade_price,1)]
coinAdjusted[,adjustedPrice:=(trade_price/prevValue)-1]
#coinAdjusted[,adjustedPrice:=((trade_price/prevValue)-1)*3]
coinAdjusted<-coinAdjusted[,.(candle_date_time_kst,adjustedPrice)]
coinAdjusted$adjustedCache<-0
coinAdjusted<-coinAdjusted[candle_date_time_kst>='2018-01-01 09:00:00']
coinRatioTable<-coinRatioTable[candle_date_time_kst>='2018-01-01 09:00:00']
rets<-as.xts(coinAdjusted)
rets<-na.omit(rets)
coinRatioTable<-coinRatioTable[-1,]
coinRatioTable<-as.xts(coinRatioTable)
Tactical = Return.portfolio(rets, coinRatioTable, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('매수 후 보유', '시점 선택 전략'))
charts.PerformanceSummary(portfolios,
main = "Buy & Hold vs Tactical")
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
if(isHoliday(today)) stop("Holiday")
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
token<-getToken(apiConfig,account)
url<-paste0(apiConfig$url,'/uapi/domestic-stock/v1/trading/inquire-psbl-order') #현금주문
headers<-c(
Authorization=paste('Bearer',token),
appkey=account$appkey,
appsecret=account$appsecret,
tr_id=apiConfig$getOrderableAmountTrid
)
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
CTX_AREA_FK100=CTX_AREA_FK100,
PDNO=code,
ORD_UNPR="",
ORD_DVSN="00",
CMA_EVLU_AMT_ICLD_YN="N",
OVRS_ICLD_YN="Y"
)
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
PDNO=code,
ORD_UNPR="",
ORD_DVSN="00",
CMA_EVLU_AMT_ICLD_YN="N",
OVRS_ICLD_YN="Y"
)
code<-'418660'
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
PDNO=code,
ORD_UNPR="",
ORD_DVSN="00",
CMA_EVLU_AMT_ICLD_YN="N",
OVRS_ICLD_YN="Y"
)
response<-GET(viewUrl,add_headers(headers),query=query)
response<-GET(url,add_headers(headers),query=query)
response$content
res<-fromJSON(rawToChar(response$content))
res
getOrderableAmount<-function(apiConfig,account,token,code){
url<-paste0(apiConfig$url,'/uapi/domestic-stock/v1/trading/inquire-psbl-order') #현금주문
headers<-c(
Authorization=paste('Bearer',token),
appkey=account$appkey,
appsecret=account$appsecret,
tr_id=apiConfig$getOrderableAmountTrid
)
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
PDNO=code,
ORD_UNPR="",
ORD_DVSN="00",
CMA_EVLU_AMT_ICLD_YN="N",
OVRS_ICLD_YN="Y"
)
response<-GET(url,add_headers(headers),query=query)
output$status_code<-response$status_code
if(response$status_code!=200) return(NULL)
res<-fromJSON(rawToChar(response$content))
return(res$output$nrcvb_buy_amt)
}
price<-getCurrentPrice(apiConfig,account,token,code)
price
curQty<-stockTable[i,]$보유수량
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
if(isHoliday(today)) stop("Holiday")
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
token<-getToken(apiConfig,account)
if(isKoreanTradeOpen(token,apiConfig,account,today)=="N") stop("Market closed")
cancelResult<-cancelAllOrders(apiConfig,account,token)
for(res in cancelResult) sendMessage(res)
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
nasdaqLevCode<-'418660' #tiger 나스닥 레버리지
sofrCode<-'456880' #ace sofr
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
goalRatio<-floor(currentDisparity)*0.5
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
if(currentDisparity>20) goalRatio<-0
currentBalance<-getBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-as.numeric(currentBalance$summary$tot_evlu_amt)
goalBalanceSum<-totalBalanceSum*goalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=nasdaqLevCode,종목명='tiger 나스닥 레버리지',현재가=currentNasdaqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=sofrCode,종목명='ace sofr',현재가=currentSofrPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(length(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','hldg_qty','evlu_amt')]
names(currentBalanceSheet)<-c('종목코드','종목명','보유수량','평가금액')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','종목명'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet<-combinedSheet[,c('종목코드','종목명','보유수량','목표금액','평가금액')]
combinedSheet
curQty<-9
curQty<-0
min(getOrderableAmount(apiConfig,account,token,code), 19919329)
getOrderableAmount(apiConfig,account,token,code)
token
url<-paste0(apiConfig$url,'/uapi/domestic-stock/v1/trading/inquire-psbl-order') #현금주문
headers<-c(
Authorization=paste('Bearer',token),
appkey=account$appkey,
appsecret=account$appsecret,
tr_id=apiConfig$getOrderableAmountTrid
)
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
PDNO=code,
ORD_UNPR="",
ORD_DVSN="00",
CMA_EVLU_AMT_ICLD_YN="N",
OVRS_ICLD_YN="Y"
)
response<-GET(url,add_headers(headers),query=query)
output$status_code<-response$status_code
if(response$status_code!=200) return(NULL)
response
getOrderableAmount<-function(apiConfig,account,token,code){
url<-paste0(apiConfig$url,'/uapi/domestic-stock/v1/trading/inquire-psbl-order') #현금주문
headers<-c(
Authorization=paste('Bearer',token),
appkey=account$appkey,
appsecret=account$appsecret,
tr_id=apiConfig$getOrderableAmountTrid
)
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
PDNO=code,
ORD_UNPR="",
ORD_DVSN="00",
CMA_EVLU_AMT_ICLD_YN="N",
OVRS_ICLD_YN="Y"
)
response<-GET(url,add_headers(headers),query=query)
response$status_code
if(response$status_code!=200) return(NULL)
res<-fromJSON(rawToChar(response$content))
return(res$output$nrcvb_buy_amt)
}
getOrderableAmount(apiConfig,account,token,code)
min(getOrderableAmount(apiConfig,account,token,code), 19919329)
price
priceSum/price
priceSum<-19820227
qty<-floor(priceSum/price)
qty
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
if(isHoliday(today)) stop("Holiday")
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
token<-getToken(apiConfig,account)
if(isKoreanTradeOpen(token,apiConfig,account,today)=="N") stop("Market closed")
cancelResult<-cancelAllOrders(apiConfig,account,token)
for(res in cancelResult) sendMessage(res)
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
nasdaqLevCode<-'418660' #tiger 나스닥 레버리지
sofrCode<-'456880' #ace sofr
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
goalRatio<-floor(currentDisparity)*0.5
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
if(currentDisparity>20) goalRatio<-0
currentBalance<-getBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
source("~/StockTradebot/script/Han2ISARebalance.R", echo=TRUE)
orderableAmount<-getOrderableAmount(apiConfig,account,token,code)
orderableAmount
getOrderableAmount(apiConfig,account,token,code)
apiConfig
orderableAmount<-getOrderableAmount(apiConfig,account,token,sofrCode)
orderableAmount
getOrderableAmount(apiConfig,account,token,sofrCode)
apiConfig
account
token
token<-getToken(apiConfig,account)
orderableAmount<-getOrderableAmount(apiConfig,account,token,sofrCode)
orderableAmount
totalBalanceSum
orderableAmount<-getOrderableAmount(apiConfig,account,token,nasdaqLevCode)
orderableAmount
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
if(isHoliday(today)) stop("Holiday")
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
token<-getToken(apiConfig,account)
if(isKoreanTradeOpen(token,apiConfig,account,today)=="N") stop("Market closed")
cancelResult<-cancelAllOrders(apiConfig,account,token)
for(res in cancelResult) sendMessage(res)
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
nasdaqLevCode<-'418660' #tiger 나스닥 레버리지
sofrCode<-'456880' #ace sofr
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
#disp 1 ~ 2: 0.5
#disp 2 ~ 20: 1
#disp 20 ~ : 0
goalRatio<-floor(currentDisparity)*0.5
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
if(currentDisparity>20) goalRatio<-0
currentBalance<-getBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-as.numeric(currentBalance$summary$tot_evlu_amt)
orderableAmount<-getOrderableAmount(apiConfig,account,token,nasdaqLevCode)
goalBalanceSum<-totalBalanceSum*goalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=nasdaqLevCode,종목명='tiger 나스닥 레버리지',현재가=currentNasdaqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=sofrCode,종목명='ace sofr',현재가=currentSofrPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(length(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','hldg_qty','evlu_amt')]
names(currentBalanceSheet)<-c('종목코드','종목명','보유수량','평가금액')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','종목명'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet<-combinedSheet[,c('종목코드','종목명','보유수량','목표금액','평가금액')]
combinedSheet
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
if(isHoliday(today)) stop("Holiday")
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
token<-getToken(apiConfig,account)
if(isKoreanTradeOpen(token,apiConfig,account,today)=="N") stop("Market closed")
cancelResult<-cancelAllOrders(apiConfig,account,token)
for(res in cancelResult) sendMessage(res)
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
nasdaqLevCode<-'418660' #tiger 나스닥 레버리지
sofrCode<-'456880' #ace sofr
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
#disp 1 ~ 2: 0.5
#disp 2 ~ 20: 1
#disp 20 ~ : 0
goalRatio<-floor(currentDisparity)*0.5
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
if(currentDisparity>20) goalRatio<-0
currentBalance<-getBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
if(isHoliday(today)) stop("Holiday")
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
token<-getToken(apiConfig,account)
if(isKoreanTradeOpen(token,apiConfig,account,today)=="N") stop("Market closed")
cancelResult<-cancelAllOrders(apiConfig,account,token)
for(res in cancelResult) sendMessage(res)
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
nasdaqLevCode<-'418660' #tiger 나스닥 레버리지
sofrCode<-'456880' #ace sofr
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
#disp 1 ~ 2: 0.5
#disp 2 ~ 20: 1
#disp 20 ~ : 0
goalRatio<-floor(currentDisparity)*0.5
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
if(currentDisparity>20) goalRatio<-0
currentBalance<-getBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
token
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/script/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/RQuantFunctionList.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/script/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
today<-str_replace_all(Sys.Date(),"-","")
if(wday(Sys.Date()) %in% c(1,7)) stop("Weekend")
if(isHoliday(today)) stop("Holiday")
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$isa
token<-getToken(apiConfig,account)
if(isKoreanTradeOpen(token,apiConfig,account,today)=="N") stop("Market closed")
cancelResult<-cancelAllOrders(apiConfig,account,token)
for(res in cancelResult) sendMessage(res)
trackCode<-'379810'
prices<-adjustedPriceFromNaver('day',200,trackCode)
averagePrice<-mean(prices[,1])
currentPrice<-tail(prices,1)[,1]
currentDisparity<-100*currentPrice/averagePrice-100
nasdaqLevCode<-'418660' #tiger 나스닥 레버리지
sofrCode<-'456880' #ace sofr
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqLevCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
#disp 1 ~ 2: 0.5
#disp 2 ~ 20: 1
#disp 20 ~ : 0
goalRatio<-floor(currentDisparity)*0.5
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
if(currentDisparity>20) goalRatio<-0
currentBalance<-getBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
