<<<<<<< HEAD
col =
colorRampPalette(c('blue', 'white', 'red'))(200),
mar = c(0,0,0.5,0))
objective = function(w) {
obj = t(w) %*% covmat %*% w
return(obj)
}
heq.objective = function(w) {
sum_w = sum(w)
return( sum_w - 1 )
}
result = slsqp( x0 = rep(1/length(symbols),length(symbols)),
fn = objective,
hin = hin.objective,
heq = heq.objective)
print(result$par)
covmat = cov(rets)
cor(rets) %>%
corrplot(method = 'color', type = 'upper',
addCoef.col = 'black', number.cex = 0.7,
tl.cex = 0.6, tl.srt=45, tl.col = 'black',
col =
colorRampPalette(c('blue', 'white', 'red'))(200),
mar = c(0,0,0.5,0))
rets = Return.calculate(prices) %>% na.omit()
cor(rets) %>%
corrplot(method = 'color', type = 'upper',
addCoef.col = 'black', number.cex = 0.7,
tl.cex = 0.6, tl.srt=45, tl.col = 'black',
col =
colorRampPalette(c('blue', 'white', 'red'))(200),
mar = c(0,0,0.5,0))
rets
covmat = cov(rets)
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x)))) %>%
setNames(symbols)
prices
rets = Return.calculate(prices) %>% na.omit()
rest
rets
cor(rets) %>%
corrplot(method = 'color', type = 'upper',
addCoef.col = 'black', number.cex = 0.7,
tl.cex = 0.6, tl.srt=45, tl.col = 'black',
col =
colorRampPalette(c('blue', 'white', 'red'))(200),
mar = c(0,0,0.5,0))
covmat = cov(rets)
objective = function(w) {
obj = t(w) %*% covmat %*% w
return(obj)
}
hin.objective = function(w) {
return(w)
}
heq.objective = function(w) {
sum_w = sum(w)
return( sum_w - 1 )
}
result = slsqp( x0 = rep(1/length(symbols),length(symbols)),
fn = objective,
hin = hin.objective,
heq = heq.objective)
result
print(result$par)
print(result$value)
w_1 = result$par %>% round(., 4) %>%
setNames(colnames(rets))
print(w_1)
library(cccp)
opt = rp(x0 = rep(1/length(symbols),length(symbols)),
P = covmat,
mrc = rep(1/length(symbols),length(symbols)))
w = getx(opt) %>% drop()
w = (w / sum(w)) %>%
round(., 4) %>%
setNames(colnames(rets))
print(w)
w*5000
symbols = c('ARKK',
'JETS',
'PBW',
'XLY',
'XLP',
'NRGU',
'PAVE',
'FNGU',
'UPRO'
)
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x)))) %>%
setNames(symbols)
rets = Return.calculate(prices) %>% na.omit()
cor(rets) %>%
corrplot(method = 'color', type = 'upper',
addCoef.col = 'black', number.cex = 0.7,
tl.cex = 0.6, tl.srt=45, tl.col = 'black',
col =
colorRampPalette(c('blue', 'white', 'red'))(200),
mar = c(0,0,0.5,0))
covmat = cov(rets)
objective = function(w) {
obj = t(w) %*% covmat %*% w
return(obj)
}
hin.objective = function(w) {
return(w)
}
heq.objective = function(w) {
sum_w = sum(w)
return( sum_w - 1 )
}
result = slsqp( x0 = rep(1/length(symbols),length(symbols)),
fn = objective,
hin = hin.objective,
heq = heq.objective)
print(result$par)
print(result$value)
w_1 = result$par %>% round(., 4) %>%
setNames(colnames(rets))
print(w_1)
library(cccp)
opt = rp(x0 = rep(1/length(symbols),length(symbols)),
P = covmat,
mrc = rep(1/length(symbols),length(symbols)))
w = getx(opt) %>% drop()
w = (w / sum(w)) %>%
round(., 4) %>%
setNames(colnames(rets))
print(w)
w*5000
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
library(tidyr)
library(dplyr)
library(corrplot)
library(nloptr)
symbols = c('ARKK',
'JETS',
'PBW',
'XLY',
'XLP',
'NRGU',
'PAVE',
'FNGU',
'SOXL'
)
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x)))) %>%
setNames(symbols)
rets = Return.calculate(prices) %>% na.omit()
cor(rets) %>%
corrplot(method = 'color', type = 'upper',
addCoef.col = 'black', number.cex = 0.7,
tl.cex = 0.6, tl.srt=45, tl.col = 'black',
col =
colorRampPalette(c('blue', 'white', 'red'))(200),
mar = c(0,0,0.5,0))
covmat = cov(rets)
library(cccp)
opt = rp(x0 = rep(1/length(symbols),length(symbols)),
P = covmat,
mrc = rep(1/length(symbols),length(symbols)))
w = getx(opt) %>% drop()
w = (w / sum(w)) %>%
round(., 4) %>%
setNames(colnames(rets))
print(w)
w*5000
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
library(tidyr)
library(dplyr)
library(corrplot)
library(nloptr)
symbols = c('ARKK',
'JETS',
'PBW',
'XLY',
'XLP',
'NRGU',
'PAVE',
'FNGU',
'FAS'
)
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x)))) %>%
setNames(symbols)
rets = Return.calculate(prices) %>% na.omit()
cor(rets) %>%
corrplot(method = 'color', type = 'upper',
addCoef.col = 'black', number.cex = 0.7,
tl.cex = 0.6, tl.srt=45, tl.col = 'black',
col =
colorRampPalette(c('blue', 'white', 'red'))(200),
mar = c(0,0,0.5,0))
covmat = cov(rets)
library(cccp)
opt = rp(x0 = rep(1/length(symbols),length(symbols)),
P = covmat,
mrc = rep(1/length(symbols),length(symbols)))
w = getx(opt) %>% drop()
w = (w / sum(w)) %>%
round(., 4) %>%
setNames(colnames(rets))
print(w)
w*5000
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
library(tidyr)
library(dplyr)
library(corrplot)
library(nloptr)
symbols = c('XLP',
'XLY',
'JETS',
'PAVE',
'PBW',
'ARKK',
'NRGU',
'FNGU',
'FAS'
)
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x)))) %>%
setNames(symbols)
rets = Return.calculate(prices) %>% na.omit()
cor(rets) %>%
corrplot(method = 'color', type = 'upper',
addCoef.col = 'black', number.cex = 0.7,
tl.cex = 0.6, tl.srt=45, tl.col = 'black',
col =
colorRampPalette(c('blue', 'white', 'red'))(200),
mar = c(0,0,0.5,0))
covmat = cov(rets)
library(cccp)
opt = rp(x0 = rep(1/length(symbols),length(symbols)),
P = covmat,
mrc = rep(1/length(symbols),length(symbols)))
w = getx(opt) %>% drop()
w = (w / sum(w)) %>%
round(., 4) %>%
setNames(colnames(rets))
print(w)
w*5100
?shift
print(paste0(Sys.time()," : Starting Script"))
library(RPostgres)
library(DBI)
library(jsonlite)
dbConfig=read_json("./config.json")$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
#함수 불러돌이기
FfsQ<-data.table(dbGetQuery(conn,SQL("SELECT * from metainfo.분기재무제표")))
library(data.table)
FfsQ<-data.table(dbGetQuery(conn,SQL("SELECT * from metainfo.분기재무제표")))
?shift
FfsQ
DT[, cum.sum := Reduce(`+`, shift(값, 0:3)), by=c("종목코드","종류","계정")]
FfsQ[, cum.sum := Reduce(`+`, shift(값, 0:3)), by=c("종목코드","종류","계정")]
FfsQ[, cum.sum := Reduce(`+`, shift('값', 0:3)), by=c("종목코드","종류","계정")]
FfsQ[, cum.sum := Reduce(`+`, shift('값', 0:3)), by=c("종목코드","종류","계정","일자")]
FfsQ[, cum.sum := Reduce('+', shift('값', 0:3)), by=c("종목코드","종류","계정","일자")]
?Reduce
FfsQ[, cum.sum := Reduce('+', shift('값', 0:3))]
?shift
DT = data.table(year=2010:2014, v1=runif(5), v2=1:5, v3=letters[1:5])
DT
DT[,shift(.SD,1:2)]
DT[, shift(.SD, 1:2, NA, "lead", TRUE), .SDcols=2:4]
DT = data.table(year=rep(2010:2011, each=3), v1=1:6)
DT
DT[, c("lag1", "lag2") := shift(.SD, 1:2), by=year]
DT
DT = data.table(x=1:6, g=rep(1:2, each=3))
DT
DT[ , shift(x, fill=x[1L]), by=g]
DT[ , shift(x), by=g]
DT[,Reduce('+', shift(g, 0:3))]
DT[,shift(g, 0:3)]
DT[,Reduce('+', shift(g, 0:3)),by=V1]
DT[,Reduce('+', shift(g, 0:3)),by='V1']
DT[,res:=Reduce('+', shift(g, 0:3)),by='V1']
DT[,res:=Reduce('+', shift(g, 0:3)),by=c('V1')]
DT[,res:=Reduce('+', shift(g, 0:3)),by=1]
DT[,res:=Reduce('+', shift(g, 0:3))]
DT
DT[,res:=Reduce('+', shift(g, 0:3)),by=x]
DT
DT[,res:=Reduce('+', shift(x, 0:3)),by=g]
DT
DT[,res:=Reduce('+', shift(x, 0:1)),by=g]
DT
FfsQ
FfsQ[,shift(값,0:3)]
FfsQ[,shift(값,0:3),by=c("종목코드",""종류","계정","일자")]
FfsQ[,shift(값,0:3),by=list("종목코드",""종류","계정","일자")]
FfsQ[,shift(값,0:3),by=list("종목코드",종류","계정","일자")]
FfsQ[,shift(값,0:3),by=c("종목코드",종류","계정","일자")]
FfsQ[,shift(값,0:3),by=c("종목코드","종류","계정","일자")]
FfsQ[,shift("값",0:3),by=c("종목코드","종류","계정","일자")]
FfsQT<-FfsQ['종목코드'==036560]
FfsQT
FfsQT<-FfsQ['종목코드'=='036560']
FfsQT
FfsQ['종목코드'=='036560']
FfsQ['종류'=='재무상태표']
FfsQ['종류'='재무상태표']
FfsQ[종류=='재무상태표']
FfsQ[종목코드=='036560']
FfsQT<-FfsQ[종목코드=='036560']
as.data.frame(FfsQT)
FfsQT[,shift("값",0:3),by=c("종목코드","종류","계정","일자")]
as.data.frame(FfsQT[,shift("값",0:3),by=c("종목코드","종류","계정","일자")])
as.data.frame(FfsQT[,shift(값,0:3),by=c("종목코드","종류","계정","일자")])
as.data.frame(FfsQT[,shift(.SD,0:3),by=c("종목코드","종류","계정","일자")])
as.data.frame(FfsQT[,shift(.SD,0:3),by=c("종목코드","종류","계정")])
as.data.frame(FfsQT[,shift(.SD,1:3),by=c("종목코드","종류","계정")])
as.data.frame(FfsQT[,shift(.SD,1:3),by=c("종목코드","종류","계정","일자")])
as.data.frame(FfsQT[,shift(.SD,1:4),by=c("종목코드","종류","계정","일자")])
as.data.frame(FfsQT[,shift(.SD[,값],1:4),by=c("종목코드","종류","계정","일자")])
as.data.frame(FfsQT[,shift(.SD,1:4),by=c("종목코드","종류","계정","일자")])
shift(FfsQT,1:3)
as.data.frame(FfsQT[,shift(.SD,1:4),type="lag",by=c("종목코드","종류","계정","일자")])
as.data.frame(FfsQT[,shift(.SD,1:4),by=c("종목코드","종류","계정","일자"),.SDcols=5])
unique(FfsQT[,일자])
FfsQT
FfsQTT<-FfsQT[계정=='영업활동으로인한현금흐름']
FfsQTT
as.data.frame(FfsQTT[,shift(.SD,1:4),by=c("종목코드","종류","계정","일자"),.SDcols=5])
as.data.frame(FfsQTT[,shift(.SD,1:4),by=c("종목코드","종류","계정"),.SDcols=5])
FfsQTT[,T:=shift(.SD,1:4),by=c("종목코드","종류","계정"),.SDcols=5]
FfsQTT
FfsQTT[,T:=Reduce('+',shift(.SD,1:4)),by=c("종목코드","종류","계정"),.SDcols=5]
FfsQTT
3.2+3.2+2.6+2.8
FfsQTT[,T:=Reduce('+',shift(.SD,0:3)),by=c("종목코드","종류","계정"),.SDcols=5]
FfsQTT
FfsQTT
FfsQTT<-FfsQTT[order(일자)]
FfsQTT
FfsQ<-FfsQ[order(일자)]
FfsQ
FfsQTT[,sumT:=Reduce('+',shift(.SD,0:3)),by=c("종목코드","종류","계정"),.SDcols=5]
FfsQ[,sumT:=Reduce('+',shift(.SD,0:3)),by=c("종목코드","종류","계정"),.SDcols=5]
FfsQ
FfsQ[종목코드==053740]
FfsQ[종목코드=='053740']
as.data.frame(FfsQ[종목코드=='053740'])
FfsQ[종목코드=='053740'
][,sumT:=Reduce('+',shift(.SD,0:3)),by=c("종목코드","종류","계정"),.SDcols=5]
FfsQT<-FfsQ[종목코드=='005930']
FfsQT
dbGetQuery(conn,SQL("select * from metainfo.월별기업정보"))
corpTable<-as.data.table(dbGetQuery(conn,SQL("select * from metainfo.월별기업정보")))
corpTable
corpTable<-corpTable[,1:10]
corpTable
corpData<-corpTable[1,]
corpData
yearData<-FfsY
FfsY<-data.table(dbGetQuery(conn,SQL("SELECT * from metainfo.연간재무제표")))
FfsQ<-data.table(dbGetQuery(conn,SQL("SELECT * from metainfo.분기재무제표")))
yearData<-FfsY
quarterData<-FfsQ
businessDate<-as.Date(corpData[[1]],format='%Y-%m-%d')
code<-corpData[[2]]
yData<-yearData[종목코드==code]
qData<-quarterData[종목코드==code]
yData$일자<-as.character(yData$일자)
qData$일자<-as.character(qData$일자)
=======
monthlyMomentum<-latestValue/monthPrice[-12:-13]-1
avgMomentum<-(mean(monthlyMomentum))/volatility
result2<-rbind(result,unlist(c('종목코드'=code,Momentum=avgMomentum)))
Sys.sleep(0.3)
},
error=function(e) print(paste0("Fail to Read: ",code))
)
}
return(result)
}
winsorizing<-function(val){
newval<-ifelse(percent_rank(val)>0.99,
quantile(val,0.99,na.rm=TRUE),val)
return(newval)
}
library(RPostgres)
library(DBI)
library(jsonlite)
dbConfig=read_json("./config.json")$database
getwd()
setwd("./Github/StockTradebot/Rscript")
dbConfig=read_json("./config.json")$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
dbConfig
read_json("./config.json")
read_json("./config.json")
dbConfig=read_json("./config.json")$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
#함수 불러돌이기
source("./RQuantFunctionList.R",encoding="utf-8")
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
dbConfig=read_json("./config.json")$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
dbConfig
dbConfig=read_json("./config.json")$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
#함수 불러돌이기
source("./RQuantFunctionList.R",encoding="utf-8")
year<-as.character(2010:2020)
availableDate<-getLastBizdayofMonth(100)
availableDate<-availableDate[-99]
availableDate<-availableDate[availableDate>'2010-01-01']
year<-as.character(2010:2021)
availableDate<-getLastBizdayofMonth(100)
availableDate<-availableDate[-99]
availableDate<-availableDate[availableDate>'2010-01-01']
availableDate<-str_remove_all(availableDate,"-")
availableDateForFS<-availableDate[substr(availableDate,5,6) %in% c('03','05','08','11')]
availableDate
availableDateForFS
#전체 기업 데이터 획득
corpTable<-NULL
for(day in availableDate){
tryCatch(
{
df<-KRXDataMerge(day)
df<-subset(df,select=c("일자","종목코드", "종목명", "시장구분", "산업분류","현재가(종가)","시가총액(원)","주당배당금", "배당수익률","관리여부"))
corpTable<-rbind(corpTable,df)
},
error=function(e){
print(paste0("Fail to Read: ",day))
}
)
}
df
corpTable
rbind(corpTable,df)
corpTable<-rbind(corpTable,df)
corpTable
df<-KRXDataMerge(availableDate[1])
df
corpTable<-rbind(corpTable,df)
corpTable
corTable<-NULL
corpTable<-NULL
corpTable<-rbind(corpTable,df)
corpTable
#전체 기업 데이터 획득
corpTable<-NULL
for(day in availableDate){
tryCatch(
{
df<-KRXDataMerge(day)
df<-subset(df,select=c("일자","종목코드", "종목명", "시장구분", "산업분류","현재가(종가)","시가총액(원)","주당배당금", "배당수익률","관리여부"))
corpTable<-rbind(corpTable,df)
},
error=function(e){
print(paste0("Fail to Read: ",day))
}
)
}
df
corpTable
rbind(corpTable,df)
corpTable<-rbind(corpTable,df)
corpTable<-rbind(corpTable,df)
corpTable<-rbind(corpTable,df)
corpTable<-rbind(corpTable,df)
corpTable<-rbind(corpTable,df)
corpTable
df
day
corpTable<-NULL
df<-KRXDataMerge(day)
df<-subset(df,select=c("일자","종목코드", "종목명", "시장구분", "산업분류","현재가(종가)","시가총액(원)","주당배당금", "배당수익률","관리여부"))
df
#전체 기업 데이터 획득
corpTable<-NULL
for(day in availableDate){
tryCatch(
{
df<-KRXDataMerge(day)
df<-subset(df,select=c("일자","종목코드", "종목명", "시장구분", "산업분류","현재가(종가)","시가총액","주당배당금", "배당수익률","관리여부"))
corpTable<-rbind(corpTable,df)
},
error=function(e){
print(paste0("Fail to Read: ",day))
}
)
}
corpTable<-dbGetQuery(conn,"select * from metainfo.월별기업정보")
corpTable
corpTable2<-corpTable
corpTable<-subset(corpTable,select=c("일자","종목코드", "종목명", "시장구분", "산업분류","현재가(종가)","시가총액","주당배당금", "배당수익률","관리여부"))
corpTable
setDT(corpTable)
fsY<-dbGetQuery(conn,"select * from metainfo.연간재무제표")
fsQ<-dbGetQuery(conn,"select * from metainfo.분기재무제표")
fsQ
corpTable
yearData<-fsY
quarterData<-fsQ
corpData<-corpTable[79654,]
corpData
businessDate<-as.Date(corpData[[1]],format='%Y-%m-%d')
businessDatae
businessDate
code<-corpData[[2]]
yData<-yearData[종목코드==code]
qData<-quarterData[종목코드==code]
yearData
code
yData<-yearData[종목코드==code]
yearData[종목코드==code]
yearData['종목코드'==code]
yearData[종목코드==code]
yearData
yearData$종목코드
yearData[종목코드=='005930']
yearData[종목코드=='005930',]
yearData[,종목코드]
yearData[,'종목코드']
yearData[get(종목코드)==code]
yearData[1==code]
yearData[get("종목코드")==code]
yearData
setDT(yearData)
yearData[종목코드==code]
setDT(quarterData)
yData<-yearData[종목코드==code]
qData<-quarterData[종목코드==code]
yData$일자<-as.character(yData$일자)
qData$일자<-as.character(qData$일자)
yDate<-as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')
qDate<-as.Date(paste0(qData$일자,'.01'),format='%Y.%m.%d')
monthCrit<-month(yDate[1])
monthTerm<-rep(3,12)
monthTerm[monthCrit]<-4
monthCrit
monthTerm
month(yDate)<-month(yDate)+4
month(qDate)<-month(qDate)+monthTerm[month(qDate)]
yDate
qDate
fsQ
lastYearDate<-businessDate %m+% months(-12)
yData<-yData[yDate>=lastYearDate]
qData<-qData[qDate>=lastYearDate]
yDate<-yDate[yDate>=lastYearDate]
qDate<-qDate[qDate>=lastYearDate]
yData
qData
yDate
qDate
corpTABLE
corpTable
corpTable[1,1]
corpTable[1,]
corpTable[1,][[1]]
fsY$등록일자<-NULL
fsY
fsY[,등록일자:=NULL]
fsY[,등록일자:=1]
fsY
fsQ[,등록일자:=1]
fsQ
yData<-fsY[종목코드==code]
qData<-fsQ[종목코드==code]
yData
qData
yData$일자<-as.character(yData$일자)
qData$일자<-as.character(qData$일자)
yDate<-as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')
qDate<-as.Date(paste0(qData$일자,'.01'),format='%Y.%m.%d')
monthCrit<-month(yDate[1])
monthTerm<-rep(3,12)
monthTerm[monthCrit]<-4
month(yDate)<-month(yDate)+4
month(qDate)<-month(qDate)+monthTerm[month(qDate)]
yDate
qDate
yData$등록일자<-yDate
yData
fsY
unique(fsY$등록일자)
qDate
yData<-fsY[종목코드==code]
qData<-fsQ[종목코드==code]
yData$일자<-as.character(yData$일자)
qData$일자<-as.character(qData$일자)
yDate<-as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')
qDate<-as.Date(paste0(qData$일자,'.01'),format='%Y.%m.%d')
yDate
yData$일자
yDate<-as.Date(paste0(yData$일자,'.01')-1,format='%Y.%m.%d')
as.Date(paste0(yData$일자,'.01')-1
)
yDate<-as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')-1
yDate
yDate<-as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')-1
qDate<-as.Date(paste0(qData$일자,'.01'),format='%Y.%m.%d')-1
monthCrit<-month(yDate[1])
monthTerm<-rep(3,12)
monthTerm[monthCrit]<-4
month(yDate)<-month(yDate)+4
month(qDate)<-month(qDate)+monthTerm[month(qDate)]
yDate
qDate
as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')
as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')-1
>>>>>>> 2f9028dea9ca8e7a59708c72362670b782dd80c0
yDate<-as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')
qDate<-as.Date(paste0(qData$일자,'.01'),format='%Y.%m.%d')
monthCrit<-month(yDate[1])
monthTerm<-rep(3,12)
monthTerm[monthCrit]<-4
month(yDate)<-month(yDate)+4
month(qDate)<-month(qDate)+monthTerm[month(qDate)]
<<<<<<< HEAD
lastYearDate<-businessDate %m+% months(-12)
yData<-yData[yDate>=lastYearDate]
library(lubridate)
=======
yDate
qDate
yDate-1
fsY[종목코드==code]$등록일자<-yDate-1
fsQ[종목코드==code]$등록일자<-qDate-1
fsY
fsY$등록일자
unique(fsY$등록일자)
fsY$등록일자<-Sys.Date()
fsY
fsY$등록일자<-as.character(Sys.Date())
fsY$등록일자<-as.character(Sys.Date(),format='%Y-%m-%d')
fsY<-subset(fsY,select=-등록일자)
fsY
fsY[,등록일자:=Sys.Date()]
fsY
fsY[종목코드==code]$등록일자<-yDate-1
unique(fsY$등록일자)
?as_date
as.Date("2000-01-01",format="%Y-%m-%d")
fsY[,등록일자:=as.Date("2000-01-01",format="%Y-%m-%d")]
fsQ[,등록일자:=as.Date("2000-01-01",format="%Y-%m-%d")]
fsY
fsQ
fsQ<-subset(fsQ,select=-등록일자)
fsQ
fsQ[,등록일자:=as.Date("2000-01-01",format="%Y-%m-%d")]
fsQ
for(i in 1:nrow(corpTable)){
businessDate<-as.Date(corpTable[i,][[1]],format='%Y-%m-%d'))
code<-corpTable[i,][[2]]
yData<-fsY[종목코드==code]
qData<-fsQ[종목코드==code]
yData$일자<-as.character(yData$일자)
qData$일자<-as.character(qData$일자)
yDate<-as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')
qDate<-as.Date(paste0(qData$일자,'.01'),format='%Y.%m.%d')
>>>>>>> 2f9028dea9ca8e7a59708c72362670b782dd80c0
monthCrit<-month(yDate[1])
monthTerm<-rep(3,12)
monthTerm[monthCrit]<-4
month(yDate)<-month(yDate)+4
month(qDate)<-month(qDate)+monthTerm[month(qDate)]
<<<<<<< HEAD
lastYearDate<-businessDate %m+% months(-12)
yData<-yData[yDate>=lastYearDate]
qData<-qData[qDate>=lastYearDate]
yDate<-yDate[yDate>=lastYearDate]
qDate<-qDate[qDate>=lastYearDate]
yData
qDat
qData
yDate<-yData$일자
qDate<-qData$일자
qRank<-frank(-as.double(qDate),ties.method="dense")
yRank<-frank(-as.double(yDate),ties.method="dense")
if(length(yRank) == 0 & length(unique(qRank)) < 4 ){return(result)}
curQRange<-diff(range(as.double(qDate)[qRank<5]))
data
if(length(unique(qDate))>=4 & curQRange<=1){
data<-qData[qRank<=4]
} else{ data<-yData[yRank==1] }
data
corpTable
corpData<-corpTable[종목코드=='005930']
corpData
corpData<-corpData[37]
corpData
yearData
businessDate<-as.Date(corpData[[1]],format='%Y-%m-%d')
code<-corpData[[2]]
yData<-yearData[종목코드==code]
qData<-quarterData[종목코드==code]
=======
fsY[종목코드==code]$등록일자<-yDate-1
fsQ[종목코드==code]$등록일자<-qDate-1
}
for(i in 1:nrow(corpTable)){
businessDate<-as.Date(corpTable[i,][[1]],format='%Y-%m-%d')
code<-corpTable[i,][[2]]
yData<-fsY[종목코드==code]
qData<-fsQ[종목코드==code]
>>>>>>> 2f9028dea9ca8e7a59708c72362670b782dd80c0
yData$일자<-as.character(yData$일자)
qData$일자<-as.character(qData$일자)
yDate<-as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')
qDate<-as.Date(paste0(qData$일자,'.01'),format='%Y.%m.%d')
monthCrit<-month(yDate[1])
monthTerm<-rep(3,12)
monthTerm[monthCrit]<-4
month(yDate)<-month(yDate)+4
month(qDate)<-month(qDate)+monthTerm[month(qDate)]
<<<<<<< HEAD
lastYearDate<-businessDate %m+% months(-12)
yData<-yData[yDate>=lastYearDate]
qData<-qData[qDate>=lastYearDate]
yDate<-yDate[yDate>=lastYearDate]
qDate<-qDate[qDate>=lastYearDate]
if(!isNew){
yData<-yData[yDate<=businessDate]
qData<-qData[qDate<=businessDate]
}
yDate<-yData$일자
qDate<-qData$일자
qRank<-frank(-as.double(qDate),ties.method="dense")
yRank<-frank(-as.double(yDate),ties.method="dense")
if(length(yRank) == 0 & length(unique(qRank)) < 4 ){return(result)}
curQRange<-diff(range(as.double(qDate)[qRank<5]))
if(length(unique(qDate))>=4 & curQRange<=1){
data<-qData[qRank<=4]
} else{ data<-yData[yRank==1] }
data
data
data<-sumQuarterData(data)
sumQuarterData<-function(data){
fs<-data[data$종류=='재무상태표']
data<-data[data$종류!='재무상태표']
fs<-fs[fs$일자==max(fs$일자)]
fs<-fs[,-'일자']
if(length(unique(data$일자))>1) data<-data[,.(값=sum(값)),by=c('종목코드','종류','계정')] else{
data<-data[,-'일자']
}
names(fs)<-names(data)
data<-rbind(data,fs)
return(data)
}
data<-sumQuarterData(data)
data
fs<-data[data$종류=='재무상태표']
data<-data[data$종류!='재무상태표']
fs<-fs[fs$일자==max(fs$일자)]
fs<-fs[,-'일자']
if(length(unique(data$일자))>1) data<-data[,.(값=sum(값)),by=c('종목코드','종류','계정')] else{
data<-data[,-'일자']
}
fs
data
data[,.(값=sum(값)),by=c('종목코드','종류','계정')]
data[,.(값=sum('값')),by=c('종목코드','종류','계정')]
data[,.('값'=sum('값')),by=c('종목코드','종류','계정')]
data[,sum(값)),by=c('종목코드','종류','계정')]
data[,sum(값),by=c('종목코드','종류','계정')]
data[,sum(값)]
data[,sum(값),by=c('종목코드','종류','계정')]
data[,sum(값),by=list('종목코드','종류','계정')]
data[,sum(.SD),by=c('종목코드','종류','계정'),.SDcols=5]
data[,.(값=sum(.SD)),by=c('종목코드','종류','계정'),.SDcols=5]
data
data<-data[,.(값=sum(.SD)),by=c('종목코드','종류','계정'),.SDcols=5]
data
names(fs)<-names(data)
data<-rbind(data,fs)
data
corpData
corpData[data]
data[corpData]
data[corpData,by=종목코드]
data[corpData,on=종목코드]
data[corpData,on='종목코드']
corpData[data,on='종목코드']
data
data[,일자:=corpData[[1]]]
data
data
data<-select(data)
select
subset
subset(data,select=c(5,1,2,3,4))
corpData
corpData[,1]
corpData[,1][[1]]
corpData[[1]]
=======
fsY[종목코드==code]$등록일자<-yDate-1
fsQ[종목코드==code]$등록일자<-qDate-1
}
source('~/Github/StockTradebot/Rscript/RQuantFunctionList.R', encoding = 'UTF-8')
fsQ
i
businessDate<-as.Date(corpTable[i,][[1]],format='%Y-%m-%d')
code<-corpTable[i,][[2]]
yData<-fsY
qData<-fsQ
yData$일자<-as.character(yData$일자)
qData$일자<-as.character(qData$일자)
yDate<-as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')
qDate<-as.Date(paste0(qData$일자,'.01'),format='%Y.%m.%d')
yDate
qDate
fsY
fsY$등록일자<-as.Date(paste0(fsY$일자,'.01'),format='%Y.%m.%d')
fsY
fsQ$등록일자<-as.Date(paste0(fsQ$일자,'.01'),format='%Y.%m.%d')
fsQ
fsY[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')]
fsQ[fsY,on="일자"]
fsQ[fsY,on=종목코드,종류,계정,일자]
fsQ[fsY,on=c(종목코드,종류,계정,일자)]
fsQ[fsY,on=c("종목코드","종류","계정","일자")]
fsQ[fsY,on=c("종목코드","종류","계정","일자")]$일자
unique(fsQ[fsY,on=c("종목코드","종류","계정","일자")]$일자)
fsQ[fsY,on=c("종목코드","종류","계정","일자")]$일자
fsQ[fsY,on=c("종목코드","종류","계정","일자")]
fsQ[종목코드=='033780' & 종류=='포괄손익계산서' & 일자=='2017.12']
fsQ[종목코드=='033780' & 일자=='2017.12']
fsQ[종목코드=='033780']
fsQ[종목코드=='033780' & 종류=='포괄손익계산서' & 계정=='기타대손상각비 ']
fsQ[종목코드=='033780' & 종류=='포괄손익계산서' & 계정=='기타대손상각비']
fsQ[fsY,on=c("종목코드","종류","계정","일자"),nomatch=0]
unqiue(fsQ[fsY,on=c("종목코드","종류","계정","일자"),nomatch=0]$일자)
unique(fsQ[fsY,on=c("종목코드","종류","계정","일자"),nomatch=0]$일자)
month(fsY[,등록일자])<-month(fsY[,등록일자])+4
fsY
setDT(fsY)
month(fsY[,등록일자])<-month(fsY[,등록일자])+4
month(fsQ[,등록일자])<-month(fsQ[,등록일자])+3
fsY[,등록일자]
month(fsY[,등록일자])
month(fsY[,등록일자])+4
month(fsY[,등록일자])<-month(fsY[,등록일자])+4
library(lubridate)
month(fsY[,등록일자])<-month(fsY[,등록일자])+4
fsY
fsY[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')]
fsQ[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')]
month(fsY[,등록일자])<-month(fsY[,등록일자])+4
month(fsY[,등록일자])
fsY
fsY$등록일자
month(fsY$등록일자)<-month(fsY$등록일자)+4
fsY
month(fsQ$등록일자)<-month(fsQ$등록일자)+3
joinedQ<-fsQ[fsY,on=c("종목코드","종류","계정","일자"),nomatch=0]
fsY[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')-1]
fsQ[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')-1]
fsY
month(fsY$등록일자)<-month(fsY$등록일자)+4
month(fsQ$등록일자)<-month(fsQ$등록일자)+3
joinedQ<-fsQ[fsY,on=c("종목코드","종류","계정","일자"),nomatch=0]
joinedQ<-fsQ[fsY,on=c("종목코드","종류","계정","일자"),nomatch=0]
joinedQ
?setdiff
?setintersect
fintersect(fsQ,joinedQ)
joinedQ
fsQ
fsQ[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')-1]
fsQ
month(fsY$등록일자)<-month(fsY$등록일자)+4
month(fsQ$등록일자)<-month(fsQ$등록일자)+3
fsQ
month(fsQ$등록일자)+3
fsQ[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')-1]
fsQ
d<-fsQ[1759292,]
d
month(d$등록일자)<-month(d$등록일자)+3
d
fsQ[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')-1]
d<-fsQ[1759292,]
d
month(d$등록일자)
month(d$등록일자)+3
a<-d$등록일자
ㅁ
a
month(a)<-month(a)+3
a
a
a<-d$등록일자
a
a$month
a %m+% 3
a
ymd(a)
?ymd
a %m+% months(3)
month(a)<-month(a)+months(3)
a
fsY$등록일자<-fsY$등록일자 %m+% months(3)
fsY[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')-1]
fsQ[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')-1]
fsY$등록일자<-fsY$등록일자 %m+% months(4)
fsQ$등록일자<-fsQ$등록일자 %m+% months(3)
fsQ
fsY
fsY[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')]
fsQ[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')]
fsY$등록일자<-fsY$등록일자 %m+% months(4)-1
fsQ$등록일자<-fsQ$등록일자 %m+% months(3)-1
fsY
fsQ
joinedQ<-fsQ[fsY,on=c("종목코드","종류","계정","일자"),nomatch=0]
joinedQ
?merge
joinedQ<-fsQ[fsY,.(종목코드,종류,계정,일자,값,i.등록일자자),on=c("종목코드","종류","계정","일자"),nomatch=0]
joinedQ<-fsQ[fsY,.(종목코드,종류,계정,일자,값,i.등록일자),on=c("종목코드","종류","계정","일자"),nomatch=0]
joinedQ
joinedQ<-fsQ[fsY,.(종목코드,종류,계정,일자,값,등록일자),on=c("종목코드","종류","계정","일자"),nomatch=0]
joinedQ
joinedQ<-fsQ[fsY,.(종목코드,종류,계정,일자,값,등록일자=i.등록일자자),on=c("종목코드","종류","계정","일자"),nomatch=0]
joinedQ<-fsQ[fsY,.(종목코드,종류,계정,일자,값,등록일자=i.등록일자),on=c("종목코드","종류","계정","일자"),nomatch=0]
joinedQ
joinedQ<-fsQ[fsY,on=c("종목코드","종류","계정","일자"),nomatch=0]
joinedQ
fsQ<-rbind(fsQ,joinedQ)
fsQ
joinedQ
joinedQ<-fsQ[fsY,.(종목코드,종류,계정,일자,값,등록일자=i.등록일자),on=c("종목코드","종류","계정","일자"),nomatch=0]
fsQ<-rbind(fsQ,joinedQ)
joinedQ
fsQ
joinedQ
joinedQ$종목코드
unique(joinedQ$종목코드)
joineQ
joinedQ
fsQ<-rbind(fsQ,joinedQ)
fsQ<-rbindlist(fsQ,joinedQ)
fsQ<-rbind(fsQ,joinedQ)
joinedQ[is.null(종목코드)]
joinedQ[!is.null(종목코드)]
rbind(fsQ,joinedQ,fill=TRUE)
setDT(joinedQ)
rbind(fsQ,joinedQ)
names(joinedQ)<-names(fsQ)
rbind(fsQ,joinedQ)
unique(rbind(fsQ,joinedQ),fromLast=TRUE)
unique(rbind(fsQ,joinedQ),by=c("종목코드","종류","계정","일자"),fromLast=TRUE)
unique(rbind(fsQ,joinedQ),by=c("종목코드","종류","계정","일자","값"),fromLast=TRUE)
max(fsQ$등록일자)
Sys.Date()
Sys.Date()
fsQ
fsY
dbWriteTable(conn,SQL("test.분기재무제표"),fsQ,overwrite=TRUE,row.names=FALSE)
dbWriteTable(conn,SQL("test.분기재무제표"),fsQ,overwrite=TRUE,row.names=FALSE,encoding='UTF-8')
dbWriteTable(conn,"test.분기재무제표",fsQ,overwrite=TRUE,row.names=FALSE)
Encoding(fsQ)
Encoding(fsQ$title)
Encoding(fsQ$종목코드)
foreach(var col in fsQ) print(col)
foreach(col in fsQ) print(col)
for(col in fsQ) print(col)
for(i in length(names(fsQ)) print(i)
fsQ[[i]]
fsQ[[1]]
for(i in 1:length(names(fsQ)) print(i)
for(i in 1:length(names(fsQ))) print(i)
for(i in 1:length(names(fsQ))) Encoding(fsQ[[i]])<-"UTF-8"
for (name in colnames(raw[,sapply(fsQ, is.character), with=F])){
Encoding(fsQ[[name]]) <- "UTF-8"}
for (name in colnames(fsQ[,sapply(fsQ, is.character), with=F])){
Encoding(fsQ[[name]]) <- "UTF-8"}
dbWriteTable(conn,SQL("test.분기재무제표"),fsQ,overwrite=TRUE,row.names=FALSE)
fsQ
fsetdiff(joinedQ,fsQ)
fsQ
joinedQ
fsQ
fintersect(fsQ,joinedQ)
fsQ[fsY,.(종목코드,종류,계정,일자,값,등록일자=i.등록일자),on=c("종목코드","종류","계정","일자"),nomatch=0]
joinedQ
fsQ<-unique(rbind(fsQ,joinedQ),by=c("종목코드","종류","계정","일자","값"),fromLast=TRUE)
fintersect(fsQ,joinedQ)
fdiff(fsQ,joinedQ)
?fintersect
fsetdiff(joinedQ,fsQ)
fsQ[,등록일자:=as.Date(paste0(일자,'.01'),format='%Y.%m.%d')]
fsetdiff(joinedQ,fsQ)
fsetdiff(joinedQ,fsQ,by=c('종목코드','종류','계정','일자','값'))
fsetdiff(joinedQ[,-등록일자],fsQ[,-등록일자],by=c('종목코드','종류','계정','일자','값'))
fsetdiff(joinedQ[,-등록일자],fsQ[,-등록일자])
fsetdiff(joinedQ[-등록일자],fsQ[-등록일자])
fsQ[,-등록일자]
fsQ[,-'등록일자']
fsetdiff(joinedQ[-'등록일자'],fsQ[-'등록일자'])
fsetdiff(joinedQ[,-'등록일자'],fsQ[,-'등록일자'])
fsetdiff(fsQ[,-'등록일자'],joinedQ[,-'등록일자'])
>>>>>>> 2f9028dea9ca8e7a59708c72362670b782dd80c0
