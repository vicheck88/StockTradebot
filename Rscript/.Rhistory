#unit<-60
unit<-240
count<-200
#과거 가격들 구하기(2000일)
date<-Sys.Date()+1
coinPriceHistory<-NULL
curRowNum<-0
for(i in 1:100){
if(type=="days"){
toDate<-paste0(as.Date(date)-1,'T09:00:00')
} else if(type=="minutes"){
toDate<-as_datetime(date)-240*60
toDate<-str_replace(toDate," ","T")
}
coinPriceHistory<-rbind(coinPriceHistory,getCoinPriceHistory(indexCoin$market,type,unit,count,toDate))
coinPriceHistory<-unique(coinPriceHistory)
date<-coinPriceHistory[,min(candle_date_time_kst)]
if(nrow(coinPriceHistory)==curRowNum) {break}
curRowNum<-nrow(coinPriceHistory)
}
coinPriceHistory<-coinPriceHistory[,.(market,candle_date_time_kst,trade_price)]
setkeyv(coinPriceHistory,c("market","candle_date_time_kst"))
#이동평균선 구하기
movingAvg<-coinPriceHistory[,.(movingAvg=rollmean(trade_price,movingAvgDay,align='right')),by=market]
movingAvg<-movingAvg[,.(movingAvg=c(rep(NA,nrow(coinPriceHistory)-.N),movingAvg)),by=market]
coinPriceHistory<-cbind(coinPriceHistory,movingAvg=movingAvg$movingAvg)
coinPriceHistory[,disparity:=trade_price/movingAvg*100-100]
coinPriceHistory<-na.omit(coinPriceHistory)
#이평선과 비교해 높을 경우 매수, 낮을 경우 매도
#구입: 1%부터 1%당 현금 10%씩
#판매: -1%부터 1%당 현금 20%씩. 단, 10% 떨어지는 경우는 전부 손절
targetRatio<-1
coinPriceHistory$investRatio<-0
getInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$disparity
if(disparity>0) {
addRatio<-floor(disparity)*0.5
}  else addRatio<-floor(disparity)*0.25
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
table[i,]$investRatio<-newRatio
}
return(table)
}
coinPriceHistory<-coinPriceHistory[,getInvestRatio(.SD),by=market]
coinRatioTable<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,investRatio)]
coinRatioTable[,candle_date_time_kst:=as.Date(candle_date_time_kst)]
coinRatioTable[,cashRatio:=1-investRatio]
coinAdjusted<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,trade_price)]
coinAdjusted<-coinAdjusted[,candle_date_time_kst:=as.Date(candle_date_time_kst)]
coinAdjusted[,prevValue:=shift(trade_price,1)]
coinAdjusted[,adjustedPrice:=(trade_price/prevValue)-1]
coinAdjusted<-coinAdjusted[,.(candle_date_time_kst,adjustedPrice)]
symbols = c('SHY')
getSymbols(symbols, src = 'yahoo')
rets = Return.calculate(Ad(SHY))
coinAdjusted<-as.xts(coinAdjusted)
rets<-na.omit(cbind(coinAdjusted,rets))
rets<-replace(rets,is.na(rets),0)
coinRatioTable<-coinRatioTable[-1,]
coinRatioTable<-as.xts(coinRatioTable)
Tactical = Return.portfolio(rets, coinRatioTable, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('매수 후 보유', '시점 선택 전략'))
charts.PerformanceSummary(portfolios,
main = "Buy & Hold vs Tactical")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
library(data.table)
library(xts)
library(PerformanceAnalytics)
library(quantmod)
library(lubridate)
num<-1
coinNumLimit<-2
bandLimit<-0.3
#1.가장 시가총액이 높은 두 코인의 이동평균선 계산
#시가총액 비율:
coinList<-getUpbitCoinListDetail(coinNumLimit)
indexCoin<-getIndexBalance(coinList[1:num,],1,"MARKET")
#이평선
type<-"days"
#type<-"minutes"
movingAvgDay<-30
#movingAvgDay<-240
unit<-60
unit<-240
count<-200
#과거 가격들 구하기(2000일)
date<-Sys.Date()+1
coinPriceHistory<-NULL
curRowNum<-0
for(i in 1:100){
if(type=="days"){
toDate<-paste0(as.Date(date)-1,'T09:00:00')
} else if(type=="minutes"){
toDate<-as_datetime(date)-240*60
toDate<-str_replace(toDate," ","T")
}
coinPriceHistory<-rbind(coinPriceHistory,getCoinPriceHistory(indexCoin$market,type,unit,count,toDate))
coinPriceHistory<-unique(coinPriceHistory)
date<-coinPriceHistory[,min(candle_date_time_kst)]
if(nrow(coinPriceHistory)==curRowNum) {break}
curRowNum<-nrow(coinPriceHistory)
}
coinPriceHistory<-coinPriceHistory[,.(market,candle_date_time_kst,trade_price)]
setkeyv(coinPriceHistory,c("market","candle_date_time_kst"))
#이동평균선 구하기
movingAvg<-coinPriceHistory[,.(movingAvg=rollmean(trade_price,movingAvgDay,align='right')),by=market]
movingAvg<-movingAvg[,.(movingAvg=c(rep(NA,nrow(coinPriceHistory)-.N),movingAvg)),by=market]
coinPriceHistory<-cbind(coinPriceHistory,movingAvg=movingAvg$movingAvg)
coinPriceHistory[,disparity:=trade_price/movingAvg*100-100]
coinPriceHistory<-na.omit(coinPriceHistory)
#이평선과 비교해 높을 경우 매수, 낮을 경우 매도
#구입: 1%부터 1%당 현금 10%씩
#판매: -1%부터 1%당 현금 20%씩. 단, 10% 떨어지는 경우는 전부 손절
targetRatio<-1
coinPriceHistory$investRatio<-0
getInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$disparity
if(disparity>0) {
addRatio<-floor(disparity)*0.5
}  else addRatio<-floor(disparity)*0.25
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
table[i,]$investRatio<-newRatio
}
return(table)
}
coinPriceHistory<-coinPriceHistory[,getInvestRatio(.SD),by=market]
coinRatioTable<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,investRatio)]
coinRatioTable[,candle_date_time_kst:=as.Date(candle_date_time_kst)]
coinRatioTable[,cashRatio:=1-investRatio]
coinAdjusted<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,trade_price)]
coinAdjusted<-coinAdjusted[,candle_date_time_kst:=as.Date(candle_date_time_kst)]
coinAdjusted[,prevValue:=shift(trade_price,1)]
coinAdjusted[,adjustedPrice:=(trade_price/prevValue)-1]
coinAdjusted<-coinAdjusted[,.(candle_date_time_kst,adjustedPrice)]
symbols = c('SHY')
getSymbols(symbols, src = 'yahoo')
rets = Return.calculate(Ad(SHY))
coinAdjusted<-as.xts(coinAdjusted)
rets<-na.omit(cbind(coinAdjusted,rets))
rets<-replace(rets,is.na(rets),0)
coinRatioTable<-coinRatioTable[-1,]
coinRatioTable<-as.xts(coinRatioTable)
Tactical = Return.portfolio(rets, coinRatioTable, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('매수 후 보유', '시점 선택 전략'))
charts.PerformanceSummary(portfolios,
main = "Buy & Hold vs Tactical")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
library(data.table)
library(xts)
library(PerformanceAnalytics)
library(quantmod)
library(lubridate)
num<-1
coinNumLimit<-2
bandLimit<-0.3
#1.가장 시가총액이 높은 두 코인의 이동평균선 계산
#시가총액 비율:
coinList<-getUpbitCoinListDetail(coinNumLimit)
indexCoin<-getIndexBalance(coinList[1:num,],1,"MARKET")
#이평선
type<-"days"
#type<-"minutes"
movingAvgDay<-60
#movingAvgDay<-240
unit<-60
unit<-240
count<-200
#과거 가격들 구하기(2000일)
date<-Sys.Date()+1
coinPriceHistory<-NULL
curRowNum<-0
for(i in 1:100){
if(type=="days"){
toDate<-paste0(as.Date(date)-1,'T09:00:00')
} else if(type=="minutes"){
toDate<-as_datetime(date)-240*60
toDate<-str_replace(toDate," ","T")
}
coinPriceHistory<-rbind(coinPriceHistory,getCoinPriceHistory(indexCoin$market,type,unit,count,toDate))
coinPriceHistory<-unique(coinPriceHistory)
date<-coinPriceHistory[,min(candle_date_time_kst)]
if(nrow(coinPriceHistory)==curRowNum) {break}
curRowNum<-nrow(coinPriceHistory)
}
coinPriceHistory<-coinPriceHistory[,.(market,candle_date_time_kst,trade_price)]
setkeyv(coinPriceHistory,c("market","candle_date_time_kst"))
#이동평균선 구하기
movingAvg<-coinPriceHistory[,.(movingAvg=rollmean(trade_price,movingAvgDay,align='right')),by=market]
movingAvg<-movingAvg[,.(movingAvg=c(rep(NA,nrow(coinPriceHistory)-.N),movingAvg)),by=market]
coinPriceHistory<-cbind(coinPriceHistory,movingAvg=movingAvg$movingAvg)
coinPriceHistory[,disparity:=trade_price/movingAvg*100-100]
coinPriceHistory<-na.omit(coinPriceHistory)
#이평선과 비교해 높을 경우 매수, 낮을 경우 매도
#구입: 1%부터 1%당 현금 10%씩
#판매: -1%부터 1%당 현금 20%씩. 단, 10% 떨어지는 경우는 전부 손절
targetRatio<-1
coinPriceHistory$investRatio<-0
getInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$disparity
if(disparity>0) {
addRatio<-floor(disparity)*0.5
}  else addRatio<-floor(disparity)*0.25
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
table[i,]$investRatio<-newRatio
}
return(table)
}
coinPriceHistory<-coinPriceHistory[,getInvestRatio(.SD),by=market]
coinRatioTable<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,investRatio)]
coinRatioTable[,candle_date_time_kst:=as.Date(candle_date_time_kst)]
coinRatioTable[,cashRatio:=1-investRatio]
coinAdjusted<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,trade_price)]
coinAdjusted<-coinAdjusted[,candle_date_time_kst:=as.Date(candle_date_time_kst)]
coinAdjusted[,prevValue:=shift(trade_price,1)]
coinAdjusted[,adjustedPrice:=(trade_price/prevValue)-1]
coinAdjusted<-coinAdjusted[,.(candle_date_time_kst,adjustedPrice)]
symbols = c('SHY')
getSymbols(symbols, src = 'yahoo')
rets = Return.calculate(Ad(SHY))
coinAdjusted<-as.xts(coinAdjusted)
rets<-na.omit(cbind(coinAdjusted,rets))
rets<-replace(rets,is.na(rets),0)
coinRatioTable<-coinRatioTable[-1,]
coinRatioTable<-as.xts(coinRatioTable)
Tactical = Return.portfolio(rets, coinRatioTable, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('매수 후 보유', '시점 선택 전략'))
charts.PerformanceSummary(portfolios,
main = "Buy & Hold vs Tactical")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
library(data.table)
library(xts)
library(PerformanceAnalytics)
library(quantmod)
library(lubridate)
num<-1
coinNumLimit<-2
bandLimit<-0.3
#1.가장 시가총액이 높은 두 코인의 이동평균선 계산
#시가총액 비율:
coinList<-getUpbitCoinListDetail(coinNumLimit)
indexCoin<-getIndexBalance(coinList[1:num,],1,"MARKET")
#이평선
type<-"days"
#type<-"minutes"
movingAvgDay<-20
#movingAvgDay<-240
unit<-60
unit<-240
count<-200
#과거 가격들 구하기(2000일)
date<-Sys.Date()+1
coinPriceHistory<-NULL
curRowNum<-0
for(i in 1:100){
if(type=="days"){
toDate<-paste0(as.Date(date)-1,'T09:00:00')
} else if(type=="minutes"){
toDate<-as_datetime(date)-240*60
toDate<-str_replace(toDate," ","T")
}
coinPriceHistory<-rbind(coinPriceHistory,getCoinPriceHistory(indexCoin$market,type,unit,count,toDate))
coinPriceHistory<-unique(coinPriceHistory)
date<-coinPriceHistory[,min(candle_date_time_kst)]
if(nrow(coinPriceHistory)==curRowNum) {break}
curRowNum<-nrow(coinPriceHistory)
}
coinPriceHistory<-coinPriceHistory[,.(market,candle_date_time_kst,trade_price)]
setkeyv(coinPriceHistory,c("market","candle_date_time_kst"))
#이동평균선 구하기
movingAvg<-coinPriceHistory[,.(movingAvg=rollmean(trade_price,movingAvgDay,align='right')),by=market]
movingAvg<-movingAvg[,.(movingAvg=c(rep(NA,nrow(coinPriceHistory)-.N),movingAvg)),by=market]
coinPriceHistory<-cbind(coinPriceHistory,movingAvg=movingAvg$movingAvg)
coinPriceHistory[,disparity:=trade_price/movingAvg*100-100]
coinPriceHistory<-na.omit(coinPriceHistory)
#이평선과 비교해 높을 경우 매수, 낮을 경우 매도
#구입: 1%부터 1%당 현금 10%씩
#판매: -1%부터 1%당 현금 20%씩. 단, 10% 떨어지는 경우는 전부 손절
targetRatio<-1
coinPriceHistory$investRatio<-0
getInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$disparity
if(disparity>0) {
addRatio<-floor(disparity)*0.5
}  else addRatio<-floor(disparity)*0.25
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
table[i,]$investRatio<-newRatio
}
return(table)
}
coinPriceHistory<-coinPriceHistory[,getInvestRatio(.SD),by=market]
coinRatioTable<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,investRatio)]
coinRatioTable[,candle_date_time_kst:=as.Date(candle_date_time_kst)]
coinRatioTable[,cashRatio:=1-investRatio]
coinAdjusted<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,trade_price)]
coinAdjusted<-coinAdjusted[,candle_date_time_kst:=as.Date(candle_date_time_kst)]
coinAdjusted[,prevValue:=shift(trade_price,1)]
coinAdjusted[,adjustedPrice:=(trade_price/prevValue)-1]
coinAdjusted<-coinAdjusted[,.(candle_date_time_kst,adjustedPrice)]
symbols = c('SHY')
getSymbols(symbols, src = 'yahoo')
rets = Return.calculate(Ad(SHY))
coinAdjusted<-as.xts(coinAdjusted)
rets<-na.omit(cbind(coinAdjusted,rets))
rets<-replace(rets,is.na(rets),0)
coinRatioTable<-coinRatioTable[-1,]
coinRatioTable<-as.xts(coinRatioTable)
Tactical = Return.portfolio(rets, coinRatioTable, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('매수 후 보유', '시점 선택 전략'))
charts.PerformanceSummary(portfolios,
main = "Buy & Hold vs Tactical")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
library(data.table)
library(xts)
library(PerformanceAnalytics)
library(quantmod)
library(lubridate)
num<-1
coinNumLimit<-2
bandLimit<-0.3
#1.가장 시가총액이 높은 두 코인의 이동평균선 계산
#시가총액 비율:
coinList<-getUpbitCoinListDetail(coinNumLimit)
indexCoin<-getIndexBalance(coinList[1:num,],1,"MARKET")
#이평선
type<-"days"
#type<-"minutes"
movingAvgDay<-30
#movingAvgDay<-240
unit<-60
unit<-240
count<-200
#과거 가격들 구하기(2000일)
date<-Sys.Date()+1
coinPriceHistory<-NULL
curRowNum<-0
for(i in 1:100){
if(type=="days"){
toDate<-paste0(as.Date(date)-1,'T09:00:00')
} else if(type=="minutes"){
toDate<-as_datetime(date)-240*60
toDate<-str_replace(toDate," ","T")
}
coinPriceHistory<-rbind(coinPriceHistory,getCoinPriceHistory(indexCoin$market,type,unit,count,toDate))
coinPriceHistory<-unique(coinPriceHistory)
date<-coinPriceHistory[,min(candle_date_time_kst)]
if(nrow(coinPriceHistory)==curRowNum) {break}
curRowNum<-nrow(coinPriceHistory)
}
coinPriceHistory<-coinPriceHistory[,.(market,candle_date_time_kst,trade_price)]
setkeyv(coinPriceHistory,c("market","candle_date_time_kst"))
#이동평균선 구하기
movingAvg<-coinPriceHistory[,.(movingAvg=rollmean(trade_price,movingAvgDay,align='right')),by=market]
movingAvg<-movingAvg[,.(movingAvg=c(rep(NA,nrow(coinPriceHistory)-.N),movingAvg)),by=market]
coinPriceHistory<-cbind(coinPriceHistory,movingAvg=movingAvg$movingAvg)
coinPriceHistory[,disparity:=trade_price/movingAvg*100-100]
coinPriceHistory<-na.omit(coinPriceHistory)
#이평선과 비교해 높을 경우 매수, 낮을 경우 매도
#구입: 1%부터 1%당 현금 10%씩
#판매: -1%부터 1%당 현금 20%씩. 단, 10% 떨어지는 경우는 전부 손절
targetRatio<-1
coinPriceHistory$investRatio<-0
getInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$disparity
if(disparity>0) {
addRatio<-floor(disparity)*0.5
}  else addRatio<-floor(disparity)*0.25
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
table[i,]$investRatio<-newRatio
}
return(table)
}
coinPriceHistory<-coinPriceHistory[,getInvestRatio(.SD),by=market]
coinRatioTable<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,investRatio)]
coinRatioTable[,candle_date_time_kst:=as.Date(candle_date_time_kst)]
coinRatioTable[,cashRatio:=1-investRatio]
coinAdjusted<-coinPriceHistory[market=="KRW-BTC",.(candle_date_time_kst,trade_price)]
coinAdjusted<-coinAdjusted[,candle_date_time_kst:=as.Date(candle_date_time_kst)]
coinAdjusted[,prevValue:=shift(trade_price,1)]
coinAdjusted[,adjustedPrice:=(trade_price/prevValue)-1]
coinAdjusted<-coinAdjusted[,.(candle_date_time_kst,adjustedPrice)]
symbols = c('SHY')
getSymbols(symbols, src = 'yahoo')
rets = Return.calculate(Ad(SHY))
coinAdjusted<-as.xts(coinAdjusted)
rets<-na.omit(cbind(coinAdjusted,rets))
rets<-replace(rets,is.na(rets),0)
coinRatioTable<-coinRatioTable[-1,]
coinRatioTable<-as.xts(coinRatioTable)
Tactical = Return.portfolio(rets, coinRatioTable, verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('매수 후 보유', '시점 선택 전략'))
charts.PerformanceSummary(portfolios,
main = "Buy & Hold vs Tactical")
round(1.434,2)
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('RPostgres', 'DBI','stringr')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
dbconfig<-config$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbconfig$database,host=dbconfig$host,port=dbconfig$port,user=dbconfig$user,password=dbconfig$passwd)
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
#재무제표 이상한 기업 우선 거르기
#최근 1년 간 분기재무제표에서 매출, 매출원가가 음수인 경우가 한 번이라도 있다면 목록에서 제거
prevDate<-str_replace(substring(Sys.Date()-365,1,7),'-','.')
sql<-sprintf("select * from metainfo.월별기업정보 a
where 일자=(select max(일자) from metainfo.월별기업정보)
and not exists (
select 1 from (
select * from metainfo.분기재무제표 c
union all
select * from metainfo.연간재무제표 y
) m
where 일자>'%s'
and (계정='매출액' or 계정='매출원가')
and 값<0 and a.종목코드=m.종목코드)",prevDate)
corpTable<-dbGetQuery(conn,SQL(sql))
setDT(corpTable)
filter<-function(data){
dat<-data[관리여부!="관리종목"]
dat<-dat[is.na(매출총이익)==F]
dat<-dat[is.na(영업활동으로인한현금흐름)==F]
dat<-dat[is.na(자산)==F]
dat<-dat[매출액>=매출총이익] #매출원가가 -인 경우 제외
dat<-dat[자본>자본금] #자본잠식상태가 아님
dat<-dat[영업활동으로인한현금흐름>0]
dat<-dat[매출총이익>0]
dat<-dat[is.na(유상증자)] #최근 1년간 유상증자 안함
return(dat)
}
orderData<-function(data){
data[,SIZERANK:=rank(시가총액)]
data[,QUALITYRANK:=rank(-(매출총이익+영업활동으로인한현금흐름)/자산)]
data[,VALUERANK:=0]
data[,MOMENTUMRANK:=0]
data[,TOTALRANK:=QUALITYRANK+SIZERANK+VALUERANK+MOMENTUMRANK]
setorder(data,TOTALRANK,QUALITYRANK,SIZERANK)
return(data)
}
stocknum<-15
goalBalance<-66000000
#args<-commandArgs(trailingOnly = TRUE)
#stocknum<-as.numeric(args[1])
#goalBalanceSum<-as.numeric(args[2])
output<-filter(corpTable)
output<-orderData(output)
output<-output[1:stocknum]
output$일자<-as.character(output$일자)
output
output<-filter(corpTable)
output<-orderData(output)
output
output
output[,order(QUALITYRANK)]
output[order(QUALITYRANK)]
output[order(TOTALRANK)]
