hin.objective = function(w) {
return(w-0.05)
}
heq.objective = function(w) {
sum_w = sum(w)
return( sum_w - 1 )
}
result2<-getMVPRatio(result2)
result2
result[Quality_Rank<=10]
result['종목코드'=='005930']
result['종목명'=='삼성전자']
nrow(resul)
nrow(result)
result
result2
#재무데이터 얻기
result1<-NULL
for(i in 1:nrow(corpsInfoData)){
#for(i in 1:100){
tryCatch(
{
code<-codeList[i]
result1<-rbind(result1,unlist(c(code=code,getCurrentValueQualityFactorQuarter(code))))
Sys.sleep(0.5)
},
error=function(e) print(paste0("Fail to Read: ",code))
)
}
result1<-NULL
for(i in 1:nrow(corpsInfoData)){
#for(i in 1:100){
tryCatch(
{
code<-codeList[i]
result1<-rbind(result1,unlist(c(code=code,getCurrentValueQualityFactorQuarter(code))))
Sys.sleep(0.5)
},
error=function(e) print(paste0("Fail to Read: ",code))
)
}
result1<-NULL
for(i in 1:nrow(corpsInfoData)){
#for(i in 1:100){
tryCatch(
{
code<-codeList[i]
result1<-rbind(result1,unlist(c(code=code,getCurrentValueQualityFactorQuarter(code))))
Sys.sleep(0.5)
},
error=function(e) print(paste0("Fail to Read: ",code))
)
}
result1<-as.data.table(result1)
result2<-result1[,lapply(.SD[,2:8], as.double)]
result2[,code:=result1$code]
result1<-setDT(merge(reducedCorpsInfoData,result2,by.x='종목코드',by.y='code'))
#모멘텀 구하기
result2<-NULL
for(i in 1:nrow(corpsInfoData)){
#for(i in 1:100){
tryCatch(
{
code<-codeList[i]
priceList<-adjustedPriceFromNaver('day',365,code)
Return<-Return.calculate(priceList)
Return<-Return[!is.na(Return)]
volatility<-sd(Return)*sqrt(length(Return))
monthPrice<-adjustedPriceFromNaver('month',14,code)[,1]
latestValue<-monthPrice[13]
monthlyMomentum<-latestValue/monthPrice[-12:-13]-1
avgMomentum<-(mean(monthlyMomentum))/volatility
result2<-rbind(result2,unlist(c('종목코드'=code,Momentum=avgMomentum)))
Sys.sleep(0.5)
},
error=function(e) print(paste0("Fail to Read: ",code))
)
}
result<-result1[as.data.table(result2),on='종목코드']
result$Momentum<-as.double(result$Momentum)
result$NCAV_Ratio<-result$NCAV/result$"시가총액(원)"
result$PER<-winsorizing(result$PER)
result$PBR<-winsorizing(result$PBR)
result$PCR<-winsorizing(result$PCR)
result$PSR<-winsorizing(result$PSR)
result[,c("PER_N","PBR_N","PCR_N","PSR_N"):=
list((PER-mean(PER,na.rm=TRUE))/sd(PER,na.rm=TRUE),
(PBR-mean(PBR,na.rm=TRUE))/sd(PBR,na.rm=TRUE),
(PCR-mean(PCR,na.rm=TRUE))/sd(PCR,na.rm=TRUE),
(PSR-mean(PSR,na.rm=TRUE))/sd(PSR,na.rm=TRUE))]
result[,c("Value_Rank","Quality_Rank","Momentum_Rank"):=
list(rank(PER_N+PBR_N+PCR_N+PSR_N),rank(-GPA),rank(-Momentum))]
result[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
result
result[NewFScore<3]
result['종목코드'=='005630']
getCurrentValueQualityFactorQuarter('005630')
getCurrentValueQualityFactorQuarter('005930')
code<-'005930'
fs <- getFSFromFnGuide('Q',code)
fs
value_type <- c('지배주주순이익','자본','영업활동으로인한현금흐름','매출액','유상증자','매출총이익')
ordinaryStockNums<-getCurrentOrdinaryStockNumbers(code)
curPrice<-getCurrentPrice(code)
value_index<-c()
tmp<-rowSums(fs[value_type,])
value_index['PER']<-tmp['지배주주순이익']
value_index['PBR']<-fs['자본',4]
value_index['PCR']<-tmp['영업활동으로인한현금흐름']
value_index['PSR']<-tmp['매출액']
value_index
data_value<-curPrice/(value_index*100000000/ordinaryStockNums)
data_value['NCAV']<-(fs['유동자산',]-fs['부채',])[4]*100000000
data_value
ordinaryStockNums
tmp
fs['자산']
fs['자산',]
fs
213302/831613
fs['자산',4]
tmp['매출총이익']/fs['자산',4]
result
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 & PCR>0 & PSR>0]
filteredResult
filteredResult<-filteredResult[total_Rank<=10]
filteredResult
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 & PCR>0 & PSR>0]
filteredResult[NCAV_Ratio>=1]
a<-filteredResult[NCAV_Ratio>=1]
a
a[rank(a$total_Rank)<=10]
filteredResult
filteredResult[total_Rank<=10]
filteredResult[Momentum>=1]
filteredResult[Momentum>=0]
a
result[,c("PER_N","PBR_N","PCR_N","PSR_N"):=
list((PER-mean(PER,na.rm=TRUE))/sd(PER,na.rm=TRUE),
(PBR-mean(PBR,na.rm=TRUE))/sd(PBR,na.rm=TRUE),
(PCR-mean(PCR,na.rm=TRUE))/sd(PCR,na.rm=TRUE),
(PSR-mean(PSR,na.rm=TRUE))/sd(PSR,na.rm=TRUE))]
result[,c("Value_Rank","Quality_Rank","Momentum_Rank"):=
list(rank(PER_N+PBR_N+PCR_N+PSR_N),rank(-GPA),rank(-Momentum))]
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 & PCR>0 & PSR>0 ]
filteredResult<-filteredResult[total_Rank<=20]
result[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 & PCR>0 & PSR>0 & NCAV_Ratio>=1]
result[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
result
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 & PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult
result[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
filteredResult[,"sum_rank":=
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE)]
filteredResult
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 & PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
filteredResult[order('시가총액(원)')]
filteredResult[order('시가총액(원)'),]
filteredResult[[1]][order('시가총액(원)'),]
filteredResult
filteredResult[[1]]
filteredResult[[2]]
filteredResult[[3]]
filteredResult[order('시가총액(원)')]
order(filteredResult'시가총액(원)')
order(filteredResult$'시가총액(원)')
filteredResult[order(filteredResult$'시가총액(원)')]
filteredResult[order(filteredResult$NCAV_Ratio]
filteredResult[order(filteredResult$NCAV_Ratio,]
filteredResult[order(filteredResult$NCAV_Ratio)]
filteredResult[order(-filteredResult$NCAV_Ratio)]
nrow(result)
getMVPRatio<-function(resultTable){
result = slsqp( x0 = rep(1/resultTable, nrow(resultTable)),
fn = objective,
hin = hin.objective,
heq = heq.objective)
resultTable$'투자비율'<-round(result$par,4)
return(resultTable)
}
tmpcol<-colnames(filteredResult)
filteredResult$Date<-as.Date(today,"%Y%m%d")
setcolorder(filteredResult,c("Date",tmpcol))
covmat<-getCovarianceMarix(filteredResult$'종목코드')
filteredResult<-getMVPRatio(filteredResult)
filteredResult
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 & PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
tmpcol<-colnames(filteredResult)
filteredResult$Date<-as.Date(today,"%Y%m%d")
setcolorder(filteredResult,c("Date",tmpcol))
covmat<-getCovarianceMarix(filteredResult$'종목코드')
filteredResult<-getMVPRatio(filteredResult)
filteredResult
resultTable
reducedCorpsInfoData
getMVPRatio<-function(resultTable){
result = slsqp( x0 = rep(1/resultTable, nrow(resultTable)),
fn = objective,
hin = hin.objective,
heq = heq.objective)
resultTable$'투자비율'<-round(result$par,4)
return(resultTable)
}
covma
covma
covmat
filteredResult<-getMVPRatio(filteredResult)
getMVPRatio<-function(resultTable){
result = slsqp( x0 = rep(1/nrow(resultTable), nrow(resultTable)),
fn = objective,
hin = hin.objective,
heq = heq.objective)
resultTable$'투자비율'<-round(result$par,4)
return(resultTable)
}
filteredResult<-getMVPRatio(filteredResult)
filteredResult
getMVPRatio(filteredResult)
resultTable<-filteredResult
result = slsqp( x0 = rep(1/nrow(resultTable), nrow(resultTable)),
fn = objective,
hin = hin.objective,
heq = heq.objective)
result
filteredResult
covmat
hin.objective = function(w) {
return(w)
}
getMVPRatio<-function(resultTable){
result = slsqp( x0 = rep(1/nrow(resultTable), nrow(resultTable)),
fn = objective,
hin = hin.objective,
heq = heq.objective)
resultTable$'투자비율'<-round(result$par,4)
return(resultTable)
}
filteredResult<-getMVPRatio(filteredResult)
getMVPRatio(filteredResult)
covmat
slsqp( x0 = rep(1/nrow(resultTable), nrow(resultTable)),
fn = objective,
hin = hin.objective,
heq = heq.objective)
resultTable$'투자비율'<-round(result$par,4)
codeList
codeList<-codeList[1:20]
#MVP 측정 위한 공분산 행렬 구하기
getCovarianceMarix<-function(codeList){
return(cov(do.call(cbind,lapply(codeList,function(x) na.omit(Return.calculate(adjustedPriceFromNaver('day',365,x)))[-1,]))))
}
getCovarianceMarix(codeList)
#MVP 측정 위한 공분산 행렬 구하기
getCovarianceMarix<-function(codeList){
return(cor(do.call(cbind,lapply(codeList,function(x) na.omit(Return.calculate(adjustedPriceFromNaver('day',365,x)))[-1,]))))
}
getCovarianceMarix(codeList)
#MVP 측정 위한 공분산 행렬 구하기
getCovarianceMarix<-function(codeList){
return(cor(do.call(cbind,lapply(codeList,function(x) na.omit(Return.calculate(adjustedPriceFromNaver('day',250,x)))[-1,]))))
}
#MVP 측정 위한 공분산 행렬 구하기
getCovarianceMarix<-function(codeList){
return(cov(do.call(cbind,lapply(codeList,function(x) na.omit(Return.calculate(adjustedPriceFromNaver('day',250,x)))[-1,]))))
}
getConnection(codeList)
getCovarianceMarix(codeList)
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
symbols = c('SPY', # 미국 주식
'IEV', # 유럽 주식
'EWJ', # 일본 주식
'EEM', # 이머징 주식
'TLT', # 미국 장기채
'IEF', # 미국 중기채
'IYR', # 미국 리츠
'RWX', # 글로벌 리츠
'GLD', # 금
'DBC'  # 상품
)
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x)))) %>%
setNames(symbols)
rets = Return.calculate(prices) %>% na.omit()
prices
rets
cov(rets)
getMVPRatio<-function(resultTable){
result = slsqp( x0 = rep(1/nrow(resultTable), nrow(resultTable)),
fn = objective,
hin = hin.objective,
heq = heq.objective,
upper=rep(0.2,nrow(resultTable)))
resultTable$'투자비율'<-round(result$par,4)
return(resultTable)
}
getMVPRatio(resultTable)
library(cccp)
quantile
?quantile
quantile(1:1000)
quantile(1:1000)[2]
result
result1
result2
result<-result1[as.data.table(result2),on='종목코드']
result$Momentum<-as.double(result$Momentum)
result$NCAV_Ratio<-result$NCAV/result$"시가총액(원)"
result
result$PER<-winsorizing(result$PER)
result$PBR<-winsorizing(result$PBR)
result$PCR<-winsorizing(result$PCR)
result$PSR<-winsorizing(result$PSR)
result[,c("PER_N","PBR_N","PCR_N","PSR_N"):=
list((PER-mean(PER,na.rm=TRUE))/sd(PER,na.rm=TRUE),
(PBR-mean(PBR,na.rm=TRUE))/sd(PBR,na.rm=TRUE),
(PCR-mean(PCR,na.rm=TRUE))/sd(PCR,na.rm=TRUE),
(PSR-mean(PSR,na.rm=TRUE))/sd(PSR,na.rm=TRUE))]
result[,c("Value_Rank","Quality_Rank","Momentum_Rank"):=
list(rank(PER_N+PBR_N+PCR_N+PSR_N),rank(-GPA),rank(-Momentum))]
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1 & '시가총액(원)'<=quantile('시가총액(원)')[2]]
result
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult
filteredResult['시가총액(원)']
filteredResult[,'시가총액(원)']
filteredResult[,'시가총액(원)'<=quantile('시가총액(원)')[2]]
filteredResult[,'시가총액(원)'<=quantile(filteredResult$'시가총액(원)')[2]]
filteredResult['시가총액(원)'<=quantile(filteredResult$'시가총액(원)')[2]]
filteredResult$'시가총액(원)'<=quantile('시가총액(원)')[2]
filteredResult$'시가총액(원)'<=quantile(filteredResult$'시가총액(원)')[2]
result$'시가총액(원)'<=quantile(result$'시가총액(원)')[2]
filteredResult<-result[result$'시가총액(원)'<=quantile(result$'시가총액(원)')[2]]
filteredResult
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult
result$'시가총액(원)'<=quantile(result$'시가총액(원)')[2]
quantile(result$'시가총액(원)')[2]
result[2,]
filteredResult$'종목코드'=='005930'
filteredRsult[filteredResult$'종목코드'=='005930']
filteredResult[filteredResult$'종목코드'=='005930']
result[result$'종목코드'=='005930']
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
covmat<-getCovarianceMarix(filteredResult$'종목코드')
filteredResult<-getMVPRatio(filteredResult)
filteredResult
result
result[order(Value_Rank)]
result[order(Quality_Rank)]
result[order(Momentum_Rank)]
result[order(Value_Rank)]
filteredResult<-result[result$'시가총액(원)'>=quantile(result$'시가총액(원)')[2]]
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
filteredResult<-result[result$'시가총액(원)'<=quantile(result$'시가총액(원)')[2]]
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
quantile(result$'시가총액(원)')[2]
filteredResult<-result[result$'시가총액(원)'<=quantile(result$'시가총액(원)')[2]]
filteredResult<-result[result$'시가총액(원)'<=quantile(result$'시가총액(원)')[2]]
filteredResult <- filteredResult[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
filteredResult<-result[result$'시가총액(원)'>=quantile(result$'시가총액(원)')[2]]
filteredResult <- filteredResult[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-result[result$'시가총액(원)'>=quantile(result$'시가총액(원)')[2]]
filteredResult <- filteredResult[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
filteredResult<-result[result$'시가총액(원)'<=quantile(result$'시가총액(원)')[2]]
filteredResult <- filteredResult[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
fileredRe
filteredResulteredRe
filteredResultered
filteredResult
quantile(result$'시가총액(원)')
quantile(result$'시가총액(원)')[1]
filteredResult<-result[rank('시가총액(원)')>300]
filteredResult
filteredResult<-result[rank('시가총액(원)')>300,]
filteredResult
filteredResult<-result[rank(result$'시가총액(원)')>300]
filteredResult
corpsInfoData
filteredResult <- filteredResult[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
tmpcol<-colnames(filteredResult)
filteredResult
#filteredResult<-result[result$'시가총액(원)'<=quantile(result$'시가총액(원)')[2]]
#filteredResult<-result[rank(result$'시가총액(원)')>300]
filteredResult <- result[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
rank(result$'시가총액(원)'>300)
rank(result$'시가총액(원)')
#filteredResult<-result[result$'시가총액(원)'<=quantile(result$'시가총액(원)')[2]]
filteredResult<-result[rank(-result$'시가총액(원)')>300]
filteredResult <- filteredResult[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
rank(-result$'시가총액(원)')
result[[33,]]
result[[33]]
result[33,]
filteredResult<-result[rank(-result$'시가총액(원)')>300]
filteredResult <- filteredResult[NewFScore==3 & PER>0 & PBR>0 &
PCR>0 & PSR>0 & NCAV_Ratio>=1]
filteredResult[,"total_Rank":=rank(
(Value_Rank-mean(Value_Rank,na.rm=TRUE))/sd(Value_Rank,na.rm=TRUE)+
(Quality_Rank-mean(Quality_Rank,na.rm=TRUE))/sd(Quality_Rank,na.rm=TRUE)+
(Momentum_Rank-mean(Momentum_Rank,na.rm=TRUE))/sd(Momentum_Rank,na.rm=TRUE),ties.method = "average")]
filteredResult<-filteredResult[total_Rank<=20]
filteredResult
filteredResult[order(total_Rank)]
