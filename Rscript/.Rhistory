}
return(rbindlist(res))
}
getMomentumHistory<-function(coinList,candleType,unit,count,priceType,momentumPeriod){
#priceType: opening_price, high_price, low_price, trade_price
priceList<-getCoinPriceHistory(coinList,candleType,unit,count)
priceList<-subset(priceList,select=c("market","candle_date_time_kst",priceType))
priceList[,prevPrice:=shift(get(priceType),momentumPeriod,NA,"lead"),by=market]
priceList<-na.omit(priceList)
priceList[,momentum:=get(priceType)/prevPrice*100]
return(subset(priceList,select=c("market","candle_date_time_kst","momentum")))
}
getUpbitCoinMomentum<-function(candleType,unit,momentumPeriod, coinList){
coinList<-paste("KRW",coinList,sep="-")
momentum<-getMomentumHistory(coinList,candleType,unit,momentumPeriod+1,"trade_price",momentumPeriod)
return(momentum)
}
getCurrentBalance<-function(){
logPath<-paste0(logDir,"coinLog.",Sys.Date(),".log")
log_open(logPath)
log_print("CURRENT BALANCE")
krwCoinList<-getUpbitCoinList()
balanceList<-getCurrentUpbitAccountInfo()
KRWRow<-balanceList[1,]
balanceList<-merge(balanceList,krwCoinList[,1],by.x="currency",by.y="market")
balanceList<-rbind(KRWRow,balanceList)
log_print(balanceList)
balanceList[,market:=paste0("KRW-",currency)]
log_print("CURRENT COIN PRICE")
price=getCurrentUpbitPrice(balanceList$market[-1])
price<-rbind(price,as.list(c("KRW-KRW",1)))
balanceList<-merge(balanceList,price,by.x="market",by.y="market")
balanceList[,trade_price:=as.double(trade_price)]
curBalanceList<-balanceList[,.(market,currency,balance=balance*trade_price,curvolume=balance)]
return(curBalanceList)
}
getMomentumBalance<-function(coinList,num,limitRatio,type,momentumList){
momentumList[,symbol:=sapply(strsplit(market,"-"),function(x)x[2])]
momentumList <- coinList[momentumList,on=c("symbol")]
momentumList <- coinList[momentumList,on=c("symbol")]
momentumList<-momentumList[order(-momentum)]
momentumList<-momentumList[,.(symbol,market,market_cap)]
if(type=="MARKET"){
momentumList<-na.omit(momentumList)
momentumList[,ratio:=market_cap/sum(market_cap)*limitRatio]
} else if(type=="EQUAL"){
momentumList[,ratio:=1/num*limitRatio]
}
return(momentumList[1:num,])
}
getIndexBalance<-function(coinList, limitRatio, type){
coinList[,market:=paste0("KRW-",symbol)]
coinList<-coinList[,.(symbol,market,market_cap)]
num<-NROW(coinList)
if(type=="MARKET"){
coinList[,ratio:=market_cap/sum(market_cap)*limitRatio]
} else if(type=="EQUAL"){
coinList[,ratio:=1/num*limitRatio]
}
return(coinList)
}
createOrderTable<-function(balanceCombinedTable){
minimumOrder<-getMinimumOrderUnit(balanceCombinedTable$market)
balanceCombinedTable<-merge(balanceCombinedTable,minimumOrder,by.x="market",by.y="market",all=TRUE)
balanceCombinedTable[is.na(balance)]$balance<-0
balanceCombinedTable[is.na(targetBalance)]$targetBalance<-0
balanceCombinedTable[is.na(ratio)]$ratio<-0
balanceCombinedTable[is.na(curvolume)]$curvolume<-0
balanceCombinedTable[,diff:=targetBalance-balance]
balanceCombinedTable[diff<0][diff>ask_min]$targetBalance<-balanceCombinedTable[diff<0][diff>ask_min]$balance
balanceCombinedTable[diff>0][diff<bid_min]$targetBalance<-balanceCombinedTable[diff>0][diff<bid_min]$balance
balanceCombinedTable[,diff:=targetBalance-balance]
balanceCombinedTable[,sellall:=targetBalance==0]
totalBalance<-balanceCombinedTable[,sum(targetBalance)]
remainedBalance<-totalBalance-balanceCombinedTable[diff==0][,sum(balance)]
if(remainedBalance!=totalBalance){
balanceCombinedTable[diff!=0]$targetBalance<-balanceCombinedTable[diff!=0][,ratio/sum(ratio)]*remainedBalance
balanceCombinedTable[,diff:=targetBalance-balance]
}
balanceCombinedTable<-balanceCombinedTable[,.(market,diff,curvolume,sellall)]
names(balanceCombinedTable)<-c("market","buyamount","currentvolume","sellall")
return(balanceCombinedTable)
}
rebalanceTable<-function(table){
logPath<-paste0(logDir,"coinLog.",Sys.Date(),".log")
log_open(logPath)
table<-table[buyamount!=0]
table$ord_type<-'limit'
table$side<-'bid'
table[buyamount<0]$side<-'ask'
table[,buyamount:=abs(buyamount)]
table[,price:=getCurrentUpbitPrice(table$market)$trade_price]
table[,volume:=buyamount/price]
table[sellall==T]$volume<-table[sellall==T]$currentvolume
table[side=="ask"][currentvolume<volume]$volume<-table[side=="ask"][currentvolume<volume]$currentvolume
log_open()
table<-subset(table,select=c("market","side","volume","price","ord_type"))
log_print("Final Table List")
log_print(table)
log_close()
if(NROW(table[side=="ask"])>0){
orderCoin(table[side=="ask"])
Sys.sleep(2)
}
orderCoin(table[side=="bid"])
}
orderCoin<-function(order){
logPath<-paste0(logDir,"coinLog.",Sys.Date(),".log")
log_open(logPath)
query<-paste0("market=",order$market,"&side=",order$side,"&volume=",order$volume,"&price=",order$price,"&ord_type=",order$ord_type)
tokenList<-sapply(query,function(x) createJwtToken(x,runif(1,1000,33553)))
url<-"https://api.upbit.com/v1/orders"
for(i in 1:NROW(order)){
res<-POST(url,add_headers(Authorization=paste0("Bearer ",tokenList[i])),body=as.list(order[i,]),encode='json')
log_print(query[i])
log_print(res$status_code)
log_print(rawToChar(res$content))
Sys.sleep(0.3)
}
}
getMinimumOrderUnit<-function(coinList){
table<-NULL
query<-paste0("market=",coinList)
tokenList<-sapply(query,function(x) createJwtToken(x,runif(1,1000,33553)))
url<-paste0("https://api.upbit.com/v1/orders/chance?",query)
for(i in 1:length(coinList)){
res<-GET(url[i],add_headers(Authorization=paste0("Bearer ",tokenList[i])))
if(res$status_code==200){
list<-fromJSON(rawToChar(res$content))
table<-rbind(table,c(coinList[i],list$market$ask$min_total,list$market$bid$min_total))
}
}
table<-as.data.table(table)
names(table)<-c("market","ask_min","bid_min")
table[,ask_min:=as.double(ask_min)]
table[,bid_min:=as.double(bid_min)]
table[,ask_min:=-ask_min]
return(table)
}
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
#setwd("C:/Users/vicen/Documents/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
num<-5
coinNumLimit<-100
bandLimit<-0.3
currentBalance<-getCurrentBalance()
totalBalance<-currentBalance[,sum(balance)]
coinList<-getUpbitCoinListDetail(coinNumLimit)
#1. 전체 시장의 모멘텀 계산(3개월로 계산)
#전체 시장에서 상승하는 모멘텀의 개수비율로 코인과 현금의 비중 조절
#시총 상위 100개의 코인으로 모멘텀 계산산
#현금비중=100-margetStrength
momentumList<-getUpbitCoinMomentum("days","",100, coinList$symbol)
marketStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
#모멘텀 방식: 0 ~ 50%, 인덱스: 나머지
#지금 1달 간의 모멘텀 계산
#상위 5개의 코인 매입
momentumList<-getUpbitCoinMomentum("days","",30,getUpbitCoinList()$market)
momentumStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
momentumRatioLimit<-marketStrength*momentumStrength*0.5
momentumCoin<-getMomentumBalance(coinList,num,momentumRatioLimit,"EQUAL",momentumList)
#인덱스
#5개의 코인 구입
#비율:
indexLimitRatio <- marketStrength-momentumRatioLimit
indexCoin<-getIndexBalance(coinList[1:num,],indexLimitRatio,"MARKET")
coinMomentumUnionTable<-rbind(indexCoin,momentumCoin)
coinMomentumUnionTable<-coinMomentumUnionTable[,.(ratio=sum(ratio)),by=c("symbol","market","market_cap")]
#totalBalance<-sum(currentBalance$balance)
balanceCombinedTable<-merge(coinMomentumUnionTable,currentBalance,by="market",all=TRUE)
balanceCombinedTable[,totalBalance:=totalBalance]
balanceCombinedTable<-balanceCombinedTable[market!="KRW-KRW"]
balanceCombinedTable[is.na(ratio)]$ratio<-0
balanceCombinedTable[is.na(balance)]$balance<-0
balanceCombinedTable[is.na(curvolume)]$curvolume<-0
balanceCombinedTable[,symbol:=sapply(strsplit(market,"-"),function(x)x[2])]
balanceCombinedTable[,targetBalance:=totalBalance*ratio]
balanceCombinedTable[,curRatio:=balance/totalBalance]
balanceCombinedTable[,diffRatio:=abs(curRatio-ratio)]
balanceCombinedTable[,outsideofBand:=diffRatio>ratio*bandLimit]
if(sum(balanceCombinedTable$outsideofBand)){
orderTable<-createOrderTable(balanceCombinedTable)
rebalanceTable(orderTable)
} else{
logPath<-paste0(logDir,"coinLog.",Sys.Date(),".log")
log_open(logPath)
log_print("Every coins are in the band. Buy Nothing")
log_close()
}
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
#setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
setwd("C:/Users/vicen/Documents/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
num<-5
coinNumLimit<-100
bandLimit<-0.5
currentBalance<-getCurrentBalance()
totalBalance<-currentBalance[,sum(balance)]
coinList<-getUpbitCoinListDetail(coinNumLimit)
#1. 전체 시장의 모멘텀 계산(3개월로 계산)
#전체 시장에서 상승하는 모멘텀의 개수비율로 코인과 현금의 비중 조절
#시총 상위 100개의 코인으로 모멘텀 계산산
#현금비중=100-margetStrength
momentumList<-getUpbitCoinMomentum("days","",c(100),c(1), coinList$symbol)
marketStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
#모멘텀 방식: 0 ~ 50%, 인덱스: 나머지
#지금 1달 간의 모멘텀 계산
#상위 5개의 코인 매입
momentumList<-getUpbitCoinMomentum("days","",c(10,20,30),c(0.5,0.3,0.2),getUpbitCoinList()$market)
momentumStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
momentumRatioLimit<-marketStrength*momentumStrength*0.5
momentumCoin<-getMomentumBalance(coinList,num,momentumRatioLimit,"EQUAL",momentumList)
#인덱스
#5개의 코인 구입
#비율:
indexLimitRatio <- marketStrength-momentumRatioLimit
indexCoin<-getIndexBalance(coinList[1:num,],indexLimitRatio,"MARKET")
coinMomentumUnionTable<-rbind(indexCoin,momentumCoin)
coinMomentumUnionTable<-coinMomentumUnionTable[,.(ratio=sum(ratio)),by=c("symbol","market","market_cap")]
coinMomentumUnionTable
balanceCombinedTable<-merge(coinMomentumUnionTable,currentBalance,by="market",all=TRUE)
balanceCombinedTable[,totalBalance:=totalBalance]
balanceCombinedTable<-balanceCombinedTable[market!="KRW-KRW"]
balanceCombinedTable[is.na(ratio)]$ratio<-0
balanceCombinedTable[is.na(balance)]$balance<-0
balanceCombinedTable[is.na(curvolume)]$curvolume<-0
balanceCombinedTable[,symbol:=sapply(strsplit(market,"-"),function(x)x[2])]
balanceCombinedTable[,targetBalance:=totalBalance*ratio]
balanceCombinedTable[,curRatio:=balance/totalBalance]
balanceCombinedTable[,diffRatio:=abs(curRatio-ratio)]
balanceCombinedTable[,outsideofBand:=diffRatio>ratio*bandLimit]
failOrder<-c()
orderTable<-createOrderTable(balanceCombinedTable)
orderTable
table<-orderTable
table<-table[buyamount!=0]
table$ord_type<-'limit'
table$side<-'bid'
table[buyamount<0]$side<-'ask'
table[,buyamount:=abs(buyamount)]
table[,price:=getCurrentUpbitPrice(table$market)$trade_price]
table[,volume:=buyamount/price]
table[sellall==T]$volume<-table[sellall==T]$currentvolume
table[side=="ask"][currentvolume<volume]$volume<-table[side=="ask"][currentvolume<volume]$currentvolume
log_open()
table<-subset(table,select=c("market","side","volume","price","ord_type"))
log_print("Final Table List")
log_print(table)
log_close()
coinMomentumUnionTable
a<-c("KRW-BTC","KRW_ETH")
coinMomentumUnionTable[market %in% a]
a<-c("KRW-BTC","KRW-ETH")
coinMomentumUnionTable[market %in% a]
coinMomentumUnionTable[market %in% c()]
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
#setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
setwd("C:/Users/vicen/Documents/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
num<-5
coinNumLimit<-100
bandLimit<-0.5
currentBalance<-getCurrentBalance()
totalBalance<-currentBalance[,sum(balance)]
coinList<-getUpbitCoinListDetail(coinNumLimit)
#1. 전체 시장의 모멘텀 계산(3개월로 계산)
#전체 시장에서 상승하는 모멘텀의 개수비율로 코인과 현금의 비중 조절
#시총 상위 100개의 코인으로 모멘텀 계산산
#현금비중=100-margetStrength
momentumList<-getUpbitCoinMomentum("days","",c(100),c(1), coinList$symbol)
marketStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
marketStrength
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
#setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
setwd("C:/Users/vicen/Documents/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
num<-5
coinNumLimit<-100
bandLimit<-0.5
currentBalance<-getCurrentBalance()
totalBalance<-currentBalance[,sum(balance)]
coinList<-getUpbitCoinListDetail(coinNumLimit)
#1. 전체 시장의 모멘텀 계산(3개월로 계산)
#전체 시장에서 상승하는 모멘텀의 개수비율로 코인과 현금의 비중 조절
#시총 상위 100개의 코인으로 모멘텀 계산산
#현금비중=100-margetStrength
momentumList<-getUpbitCoinMomentum("days","",c(100),c(1), coinList$symbol)
marketStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
momentumStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
momentumRatioLimit<-marketStrength*momentumStrength*0.5
momentumCoin<-getMomentumBalance(coinList,num,momentumRatioLimit,"EQUAL",momentumList)
indexCoin<-getIndexBalance(coinList[1:num,],indexLimitRatio,"MARKET")
coinMomentumUnionTable<-rbind(indexCoin,momentumCoin)
coinMomentumUnionTable<-coinMomentumUnionTable[,.(ratio=sum(ratio)),by=c("symbol","market","market_cap")]
#모멘텀 방식: 0 ~ 50%, 인덱스: 나머지
#지금 1달 간의 모멘텀 계산
#상위 5개의 코인 매입
momentumList<-getUpbitCoinMomentum("days","",c(10,20,30),c(0.5,0.3,0.2),getUpbitCoinList()$market)
#인덱스
#5개의 코인 구입
#비율:
indexLimitRatio <- marketStrength-momentumRatioLimit
#인덱스
#5개의 코인 구입
#비율:
indexLimitRatio <- marketStrength-momentumRatioLimit
indexCoin<-getIndexBalance(coinList[1:num,],indexLimitRatio,"MARKET")
coinMomentumUnionTable<-rbind(indexCoin,momentumCoin)
coinMomentumUnionTable<-coinMomentumUnionTable[,.(ratio=sum(ratio)),by=c("symbol","market","market_cap")]
coinMomentumUnionTable
#totalBalance<-sum(currentBalance$balance)
balanceCombinedTable<-merge(coinMomentumUnionTable,currentBalance,by="market",all=TRUE)
balanceCombinedTable[,totalBalance:=totalBalance]
balanceCombinedTable<-balanceCombinedTable[market!="KRW-KRW"]
balanceCombinedTable[is.na(ratio)]$ratio<-0
balanceCombinedTable[is.na(balance)]$balance<-0
balanceCombinedTable[is.na(curvolume)]$curvolume<-0
balanceCombinedTable[,symbol:=sapply(strsplit(market,"-"),function(x)x[2])]
balanceCombinedTable[,targetBalance:=totalBalance*ratio]
balanceCombinedTable[,curRatio:=balance/totalBalance]
balanceCombinedTable[,diffRatio:=abs(curRatio-ratio)]
balanceCombinedTable[,outsideofBand:=diffRatio>ratio*bandLimit]
balanceCombinedTable
sum(balanceCombinedTable$outsideofBand)
marketStrength
momentumRatioLimit
indexLimitRatio
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
#setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
setwd("C:/Users/vicen/Documents/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
num<-5
coinNumLimit<-100
bandLimit<-0.5
currentBalance<-getCurrentBalance()
totalBalance<-currentBalance[,sum(balance)]
coinList<-getUpbitCoinListDetail(coinNumLimit)
#1. 전체 시장의 모멘텀 계산(3개월로 계산)
#전체 시장에서 상승하는 모멘텀의 개수비율로 코인과 현금의 비중 조절
#시총 상위 100개의 코인으로 모멘텀 계산산
#현금비중=100-margetStrength
momentumList<-getUpbitCoinMomentum("days","",c(100),c(1), coinList$symbol)
marketStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
#모멘텀 방식: 0 ~ 50%, 인덱스: 나머지
#지금 1달 간의 모멘텀 계산
#상위 5개의 코인 매입
momentumList<-getUpbitCoinMomentum("days","",c(10,20,30),c(0.5,0.3,0.2),getUpbitCoinList()$market)
momentumStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
momentumRatioLimit<-marketStrength*momentumStrength*0.5
momentumCoin<-getMomentumBalance(coinList,num,momentumRatioLimit,"EQUAL",momentumList)
#인덱스
#5개의 코인 구입
#비율:
indexLimitRatio <- marketStrength-momentumRatioLimit
indexCoin<-getIndexBalance(coinList[1:num,],indexLimitRatio,"MARKET")
coinMomentumUnionTable<-rbind(indexCoin,momentumCoin)
coinMomentumUnionTable<-coinMomentumUnionTable[,.(ratio=sum(ratio)),by=c("symbol","market","market_cap")]
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
#setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
setwd("C:/Users/vicen/Documents/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
#setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
setwd("C:/Users/vicen/Documents/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
num<-5
coinNumLimit<-100
bandLimit<-0.5
currentBalance<-getCurrentBalance()
totalBalance<-currentBalance[,sum(balance)]
coinList<-getUpbitCoinListDetail(coinNumLimit)
#1. 전체 시장의 모멘텀 계산(3개월로 계산)
#전체 시장에서 상승하는 모멘텀의 개수비율로 코인과 현금의 비중 조절
#시총 상위 100개의 코인으로 모멘텀 계산산
#현금비중=100-margetStrength
momentumList<-getUpbitCoinMomentum("days","",c(100),c(1), coinList$symbol)
marketStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
#모멘텀 방식: 0 ~ 50%, 인덱스: 나머지
#지금 1달 간의 모멘텀 계산
#상위 5개의 코인 매입
momentumList<-getUpbitCoinMomentum("days","",c(10,20,30),c(0.5,0.3,0.2),getUpbitCoinList()$market)
momentumStrength<-NROW(momentumList[momentum>100])/NROW(momentumList)
momentumRatioLimit<-marketStrength*momentumStrength*0.5
momentumCoin<-getMomentumBalance(coinList,num,momentumRatioLimit,"EQUAL",momentumList)
#인덱스
#5개의 코인 구입
#비율:
indexLimitRatio <- marketStrength-momentumRatioLimit
indexCoin<-getIndexBalance(coinList[1:num,],indexLimitRatio,"MARKET")
coinMomentumUnionTable<-rbind(indexCoin,momentumCoin)
coinMomentumUnionTable<-coinMomentumUnionTable[,.(ratio=sum(ratio)),by=c("symbol","market","market_cap")]
balanceCombinedTable<-merge(coinMomentumUnionTable,currentBalance,by="market",all=TRUE)
balanceCombinedTable[,totalBalance:=totalBalance]
balanceCombinedTable<-balanceCombinedTable[market!="KRW-KRW"]
balanceCombinedTable[is.na(ratio)]$ratio<-0
balanceCombinedTable[is.na(balance)]$balance<-0
balanceCombinedTable[is.na(curvolume)]$curvolume<-0
balanceCombinedTable[,symbol:=sapply(strsplit(market,"-"),function(x)x[2])]
balanceCombinedTable[,targetBalance:=totalBalance*ratio]
balanceCombinedTable[,curRatio:=balance/totalBalance]
balanceCombinedTable[,diffRatio:=abs(curRatio-ratio)]
balanceCombinedTable[,outsideofBand:=diffRatio>ratio*bandLimit]
balanceCombinedTable
orderTable<-createOrderTable(balanceCombinedTable)
orderTable
createOrderTable<-function(balanceCombinedTable){
minimumOrder<-getMinimumOrderUnit(balanceCombinedTable$market)
balanceCombinedTable<-merge(balanceCombinedTable,minimumOrder,by.x="market",by.y="market",all=TRUE)
balanceCombinedTable[is.na(balance)]$balance<-0
balanceCombinedTable[is.na(targetBalance)]$targetBalance<-0
balanceCombinedTable[is.na(ratio)]$ratio<-0
balanceCombinedTable[is.na(curvolume)]$curvolume<-0
balanceCombinedTable[,diff:=targetBalance-balance]
balanceCombinedTable[diff<0][diff>ask_min]$targetBalance<-balanceCombinedTable[diff<0][diff>ask_min]$balance
balanceCombinedTable[diff>0][diff<bid_min]$targetBalance<-balanceCombinedTable[diff>0][diff<bid_min]$balance
balanceCombinedTable[,diff:=targetBalance-balance]
balanceCombinedTable[,sellall:=targetBalance==0]
totalBalance<-balanceCombinedTable[,sum(targetBalance)]
remainedBalance<-totalBalance-balanceCombinedTable[diff==0][,sum(balance)]
if(remainedBalance!=totalBalance){
balanceCombinedTable[diff!=0]$targetBalance<-balanceCombinedTable[diff!=0][,ratio/sum(ratio)]*remainedBalance
balanceCombinedTable[,diff:=targetBalance-balance]
}
balanceCombinedTable<-balanceCombinedTable[,.(market,diff,curvolume,sellall)]
names(balanceCombinedTable)<-c("market","buyamount","currentvolume","sellall")
balanceCombinedTable<-balanceCombinedTable[buyamount!=0]
balanceCombinedTable$ord_type<-'limit'
balanceCombinedTable$side<-'bid'
balanceCombinedTable[buyamount<0]$side<-'ask'
balanceCombinedTable[,buyamount:=abs(buyamount)]
balanceCombinedTable[,price:=getCurrentUpbitPrice(balanceCombinedTable$market)$trade_price]
balanceCombinedTable[,volume:=buyamount/price]
balanceCombinedTable[sellall==T]$volume<-balanceCombinedTable[sellall==T]$currentvolume
balanceCombinedTable[side=="ask"][currentvolume<volume]$volume<-balanceCombinedTable[side=="ask"][currentvolume<volume]$currentvolume
return(balanceCombinedTable)
}
orderTable<-createOrderTable(balanceCombinedTable)
orderTable
coinMomentumUnionTable
source('~/StockTradebot/Rscript/rebalanceCoinIndex.R', encoding = 'UTF-8')
balanceCombinedTable
balanceCombinedTable[,.(market,side,volume,price,ord_type)]
minimumOrder<-getMinimumOrderUnit(balanceCombinedTable$market)
balanceCombinedTable<-merge(balanceCombinedTable,minimumOrder,by.x="market",by.y="market",all=TRUE)
balanceCombinedTable[is.na(balance)]$balance<-0
balanceCombinedTable[is.na(targetBalance)]$targetBalance<-0
balanceCombinedTable[is.na(ratio)]$ratio<-0
balanceCombinedTable[is.na(curvolume)]$curvolume<-0
balanceCombinedTable[,diff:=targetBalance-balance]
balanceCombinedTable[diff<0][diff>ask_min]$targetBalance<-balanceCombinedTable[diff<0][diff>ask_min]$balance
balanceCombinedTable[diff>0][diff<bid_min]$targetBalance<-balanceCombinedTable[diff>0][diff<bid_min]$balance
balanceCombinedTable[,diff:=targetBalance-balance]
balanceCombinedTable[,sellall:=targetBalance==0]
totalBalance<-balanceCombinedTable[,sum(targetBalance)]
remainedBalance<-totalBalance-balanceCombinedTable[diff==0][,sum(balance)]
if(remainedBalance!=totalBalance){
balanceCombinedTable[diff!=0]$targetBalance<-balanceCombinedTable[diff!=0][,ratio/sum(ratio)]*remainedBalance
balanceCombinedTable[,diff:=targetBalance-balance]
}
balanceCombinedTable<-balanceCombinedTable[,.(market,diff,curvolume,sellall)]
names(balanceCombinedTable)<-c("market","buyamount","currentvolume","sellall")
balanceCombinedTable<-balanceCombinedTable[buyamount!=0]
balanceCombinedTable$ord_type<-'limit'
balanceCombinedTable$side<-'bid'
balanceCombinedTable[buyamount<0]$side<-'ask'
balanceCombinedTable[,buyamount:=abs(buyamount)]
balanceCombinedTable[,price:=getCurrentUpbitPrice(balanceCombinedTable$market)$trade_price]
balanceCombinedTable[,volume:=buyamount/price]
balanceCombinedTable[sellall==T]$volume<-balanceCombinedTable[sellall==T]$currentvolume
balanceCombinedTable[side=="ask"][currentvolume<volume]$volume<-balanceCombinedTable[side=="ask"][currentvolume<volume]$currentvolume
balanceCombinedTable[,.(market,side,volume,price,ord_type)]
marketStrength
momentumRatioLimit
indexLimitRatio
setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
pkg = c('quantmod','jsonlite', 'stringr', 'logr',
'jose','openssl','PerformanceAnalytics','xts','curl','data.table',
'httr')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
logDir<-"/home/pi/stockInfoCrawler/StockTradebot/log"
logDir<-"C:/coinTestLog"
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
#setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
setwd("C:/Users/vicen/Documents/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
num<-5
coinNumLimit<-100
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
bandLimit<-0.5
currentBalance<-getCurrentBalance()
totalBalance<-currentBalance[,sum(balance)]
coinList<-getUpbitCoinListDetail(coinNumLimit)
source("./coinFunctionList.R",encoding="utf-8")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
#setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
setwd("C:/Users/vicen/Documents/StockTradebot/Rscript")
source("./coinFunctionList.R",encoding="utf-8")
source("./coinFunctionList.R",encoding="utf-8")
num<-5
coinNumLimit<-100
bandLimit<-0.5
currentBalance<-getCurrentBalance()
totalBalance<-currentBalance[,sum(balance)]
coinList<-getUpbitCoinListDetail(coinNumLimit)
coinList
getUpbitCoinMomentum("days","",c(100),c(1), coinList$symbol)
a<-getUpbitCoinMomentum("days","",c(100),c(1), coinList$symbol)
a[momentum>100]
a<-getUpbitCoinMomentum("days","",c(60),c(1), coinList$symbol)
a[momentum>100]
