?funion
?fsetdiff
library(data.table)
?fsetdiff
fsY
library(RPostgres)
library(DBI)
?dbWriteTable
seq(1,399,100)
seq(1,399,by=100)
?seq
seq(from=1,to=142,by=10)
seq(from=1,to=143,by=10)
fsQ
?dbCreateTable
seq(1:404,by=100)
seq(1,404,by=100)
a<-seq(1,404,100)
a
a<-c(a,404)
a
cnt=1
a
a[-1]
list[0]
list[0:3]
?GET
GET
pkg = c('magrittr', 'rvest', 'httr', 'jsonlite',
'readr', 'stringr', 'lubridate', 'dplyr',
'timetk', 'broom', 'stargazer','data.table')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
GET
h<-new_handle()
library(curl)
h<-new_handle()
h<-new_handle()
h
?handle_setheaders
handle_setheaders(h, .list=list(X-CMC_PRO_API_KEY=api_key,Accepts="application/json"))
handle_setheaders(h, .list=list(X-CMC_PRO_API_KEY=api_key, Accepts="application/json"))
handle_setheaders(h, X-CMC_PRO_API_KEY=api_key, Accepts="application/json")
api_key
api_key<-"7a53f6d1-41fd-4658-836a-b59e6432f5cf"
handle_setheaders(h, X-CMC_PRO_API_KEY=api_key, Accepts="application/json")
handle_setheaders(h, .list=list(X-CMC_PRO_API_KEY=api_key, Accepts="application/json"))
handle_setopt(h, .list = list(customrequest = "PUT"))
handle_setheaders(h, .list=list(X-CMC_PRO_API_KEY=api_key, Accepts="application/json"))
handle_setheaders(h, .list=list(X-CMC_PRO_API_KEY=api_key))
handle_setopt(h, .list = list(X-CMC_PRO_API_KEY=api_key, Accepts="application/json"))
handle_setheaders(h, .list=list("X-CMC_PRO_API_KEY"=api_key, Accepts="application/json"))
h
h<-new_handle()
handle_setheaders(h, .list=list("X-CMC_PRO_API_KEY"=api_key, Accepts="application/json"))
h
r <- curl_fetch_memory(url, h)
url<-"https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest"
r <- curl_fetch_memory(url, h)
r
rawToChar(r$content)
cat(rawToChar(r$content))
?cat
r
rawToChar(r$content)
fronJOSN
fromJSON
fromJSON(rawToChar(r$content))
fromJSON(cat(rawToChar(r$content)))
?cat
fromJSON(rawToChar(r$content))
t<-fromJSON(rawToChar(r$content))
columns(t)
column(t)
colnames(t)
t
rawToChar(r$content)
?fromJSON
jsoncars <- toJSON(mtcars, pretty=TRUE)
cat(jsoncars)
cat(rawToChar(r$content))
fromJSON(r)
cat(r)
str(r)
t
names(t)
t$status
t$data
t$data$name
t$data$num_market_pairs
t$data$symbol
as.data.frame(t$data)
t$data$quote$USD
result<-fromJSON(rawToChar(r$content))$data
result
names(result$quote)
names(result$quote$USE)
names(result$quote$USD)
as.data.table(name=result$name,symbol=result$symbol,market_cap=result$quote$USD$market_cap)
name=result$name
name
market_cap=result$quote$USD$market_cap
market_cap
as.data.table(a=name,b=market_cap)
?as.data.table
data.table(name=result$name,symbol=result$symbol,
market_cap=result$quote$USD$market_cap)
priceList<-result$quote$USD
names(priceList)
data.table(name=result$name,symbol=result$symbol,
priceList)
table<-data.table(name=result$name,symbol=result$symbol,priceList)
table
is.data.table(table)
is.data.frame(table)
table<-data.frame(name=result$name,symbol=result$symbol,priceList)
table
setDT(table())
setDT(table)
table
table$volume_24h
table[,3]
table<-data.table(name=result$name,symbol=result$symbol,priceList)
table
coinMarket_api_key<-"7a53f6d1-41fd-4658-836a-b59e6432f5cf"
source("coinMarketCap.R")
pkg = c('magrittr', 'rvest', 'httr', 'jsonlite', 'curl',
'readr', 'stringr', 'lubridate', 'dplyr',
'timetk', 'broom', 'stargazer','data.table')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
coinMarket_api_key<-"7a53f6d1-41fd-4658-836a-b59e6432f5cf"
h<-new_handle()
handle_setheaders(h, .list=list("X-CMC_PRO_API_KEY"=coinMarket_api_key, Accepts="application/json"))
url<-"https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest"
r <- curl_fetch_memory(url, h)
result<-fromJSON(rawToChar(r$content))$data
priceList<-result$quote$USD
coinMarketTable<-data.table(name=result$name,symbol=result$symbol,priceList)
coinMarketTable<-coinMarketTable[order(-market_cap)]
coinMarketTable
url<-'https://api.upbit.com/v1/market/all?isDetails=false'
h<-new_handle()
handle_setheaders(h, .list=list(Accepts="application/json"))
r <- curl_fetch_memory(url, h)
upbitCoinTable<-rawToChar(r$content)
Encoding(upbitCoinTable)<-"UTF-8"
upbitCoinTable<-as.data.table(fromJSON(upbitCoinTable))
upbitCoinTable<-upbitCoinTable[substr(market,1,3)=="KRW"]
upbitCoinTable[,market:=str_replace(market,"KRW-","")]
upbitCoinTable
upbitCoinTable$market
#coinmarketcap과 join
coinTable<-coinMarketTable[upbitCoinTable,on=c(symbol="market"),nomatch=0]
coinTable
coinTable<-coinTable[order(-market_cap)]
coinTable
upbitCoinTable
#upbit 리스트조회
url<-'https://api.upbit.com/v1/market/all?isDetails=false'
h<-new_handle()
handle_setheaders(h, .list=list(Accepts="application/json"))
r <- curl_fetch_memory(url, h)
upbitCoinTable<-rawToChar(r$content)
Encoding(upbitCoinTable)<-"UTF-8"
upbitCoinTable<-as.data.table(fromJSON(upbitCoinTable))
upbitCoinTable
upbitCoinTable$korean_name
upbitCoinTable$korean_name=="유니스왑"
which(upbitCoinTable$korean_name=="유니스왑")
upbitCoinTable[223,]
pkg = c('jose','openssl','PerformanceAnalytics','xts','curl','data.table')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
getCoinMarketCapList<-function(){
coinMarket_api_key<-"7a53f6d1-41fd-4658-836a-b59e6432f5cf"
h<-new_handle()
handle_setheaders(h, .list=list("X-CMC_PRO_API_KEY"=coinMarket_api_key, Accepts="application/json"))
url<-"https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest"
r <- curl_fetch_memory(url, h)
result<-fromJSON(rawToChar(r$content))$data
priceList<-result$quote$USD
coinMarketTable<-data.table(name=result$name,symbol=result$symbol,priceList)
return(coinMarketTable[order(-market_cap)])
}
getUpbitCoinList<-function(){
url<-'https://api.upbit.com/v1/market/all?isDetails=false'
h<-new_handle()
handle_setheaders(h, .list=list(Accepts="application/json"))
r <- curl_fetch_memory(url, h)
upbitCoinTable<-rawToChar(r$content)
Encoding(upbitCoinTable)<-"UTF-8"
upbitCoinTable<-as.data.table(fromJSON(upbitCoinTable))
upbitCoinTable<-upbitCoinTable[substr(market,1,3)=="KRW"]
upbitCoinTable[,market:=str_replace(market,"KRW-","")]
return(upbitCoinTable)
}
getTopNUpbitCoinList<-function(num){
coinMarketCapTable<-getCoinMarketCapList()
upbitCoinTable<-getUpbitCoinList()
coinTable<-coinMarketCapTable[upbitCoinTable,on=c(symbol="market"),nomatch=0]
coinTable<-coinTable[order(-market_cap)]
coinTable<-subset(coinTable,select=-english_name)
return(coinTable)
}
getTopNUpbitCoinList(10
)
getTopNUpbitCoinList<-function(num){
coinMarketCapTable<-getCoinMarketCapList()
upbitCoinTable<-getUpbitCoinList()
coinTable<-coinMarketCapTable[upbitCoinTable,on=c(symbol="market"),nomatch=0]
coinTable<-coinTable[order(-market_cap)]
coinTable<-subset(coinTable,select=-english_name)
return(coinTable[1:num,])
}
getTopNUpbitCoinList(10)
coinTable
coinTable<-coinTable[1:10,]
coinTable$market_cap
coinTable$market_cap/sum(coinTable$market_cap)
sum(coinTable$market_cap)
sum(coinTable$market_cap)/10000
sum(coinTable$market_cap)/1e10
ratio<-coinTable$market_cap/sum(coinTable$market_cap)
.1/ratio
(.1/ratio)*coinTable$market_cap
sum(coinTable$market_cap)
ratio
sum(coinTable$market_cap)
sum(coinTable$market_cap)/q0
sum(coinTable$market_cap)/10
sum(coinTable$market_cap)/10/1e11
a<-coinTable$market_cap
a[1]<-70000000
a
a[1]<-800000000000
a
sum(a)/1e10
sum(coinTable$market_cap/10)
sum(coinTable$market_cap)
ratio
0.1/ratio
coinTable$market_cap/ratio
coinTable$market_cap
b<-getTopNUpbitCoinList(10)
b
b$market_cap
coinTable$market_cap
r<-b$market_cap/sum(b$market_cap)
r
b$market_cap/r
coinTable$market_cap/ratio
sum(b$market_cap)/sum(coinTable$market_cap)
b$market_cap/coinTable$market_cap
sum(b$market_cap/coinTable$market_cap)/10
(sum(b$market_cap/coinTable$market_cap)/10)*coinTable$market_cap/ratio
code<-'003960'
url = paste0(
'https://comp.fnguide.com/SVO2/ASP/'
,'SVD_Finance.asp?pGB=1&gicode=A',
code)
# 이 후 과정은 위와 동일함
# 데이터 다운로드 후 테이블 추출
data = GET(url) %>%
read_html() %>%
html_table()
GET(url)
setwd("C:/Users/vicen/Documents/Github/StockTradebot/Rscript")
print(paste0(Sys.time()," : Starting Script"))
library(RPostgres)
library(DBI)
library(jsonlite)
dbConfig=read_json("./config.json")$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
#함수 불러돌이기
source("./RQuantFunctionList.R",encoding="utf-8")
library(RPostgres)
library(DBI)
library(jsonlite)
dbConfig=read_json("./config.json")$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
availableDate<-getLastBizdayofMonth(3)
if(month(Sys.Date())==month(availableDate[2])) {
availableDate<-availableDate[1]
} else{
availableDate<-availableDate[2]
}
availableDate
day<-str_remove_all(availableDate,"-")
#전달 말 등록된 기업정보
df<-KRXDataMerge(day)
day
businessDay<-day
down_sector_KOSPI<-KRXIndStat(businessDay,'STK')
# 산업별 현황 OTP 발급
gen_otp_url =
'http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd'
gen_otp_data = list(
mktId = type,
trdDd = businessDay,
money = '1',
csvxls_isNo = 'false',
name = 'fileDown',
url='dbms/MDC/STAT/standard/MDCSTAT03901'
)
gen_otp_data
gen_otp_data = list(
mktId = type,
trdDd = businessDay,
money = '1',
csvxls_isNo = 'false',
name = 'fileDown',
url='dbms/MDC/STAT/standard/MDCSTAT03901'
)
list(
mktId = type,
trdDd = businessDay,
money = '1',
csvxls_isNo = 'false',
name = 'fileDown',
url='dbms/MDC/STAT/standard/MDCSTAT03901'
)
type<-'STK'
gen_otp_data = list(
mktId = type,
trdDd = businessDay,
money = '1',
csvxls_isNo = 'false',
name = 'fileDown',
url='dbms/MDC/STAT/standard/MDCSTAT03901'
)
otp = POST(gen_otp_url, query = gen_otp_data) %>%
read_html() %>%
html_text()
otp = POST(gen_otp_url, query = gen_otp_data) %>%
read_html() %>%
html_text()
opt
otp
POST(gen_otp_url, query = gen_otp_data)
a<-POST(gen_otp_url, query = gen_otp_data)
a$content
read_html(a)
read_html(a)$body
b<-read_html(a)
html_text(b)
?html_text
down_sector_KOSPI<-KRXIndStat(businessDay,'STK')
down_sector_KOSPI
down_monitoring<-KRXMonitoringStat()
down_monitoring
down_ind<-KRXIndividualStat(businessDay)
down_ind
down_sector = POST(down_url, query = list(code = otp))
day
businessDay
type
# 산업별 현황 OTP 발급
gen_otp_url =
'http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd'
gen_otp_data = list(
mktId = type,
trdDd = businessDay,
money = '1',
csvxls_isNo = 'false',
name = 'fileDown',
url='dbms/MDC/STAT/standard/MDCSTAT03901'
)
otp = POST(gen_otp_url, query = gen_otp_data) %>%
read_html() %>%
html_text()
# 산업별 현황 데이터 다운로드
down_url = 'http://data.krx.co.kr/comm/fileDn/download_csv/download.cmd'
down_sector = POST(down_url, query = list(code = otp))
down_sector
read_html(down_sector)
read_html(down_sector,encoding='cp949')
read_html(down_sector,encoding='utf8')
read_html(down_sector,encoding='utf-8')
read_html(down_sector,encoding='cp949')
?read_html
down_sector
POST(gen_otp_url, query = gen_otp_data)
?POST
?GET
down_sector = POST(down_url, query = list(code = otp))
down_sector
GET(down_url, query = list(code = otp))
down_sector
read_html(.,encoding='cp949')
read_html(down_sector,encoding='cp949')
read_html(down_sector,encoding='euc-kr')
read_html(down_sector,encoding='utf-8')
a<-read_html(down_sector,encoding='utf-8')
a<-read_html(down_sector,encoding='cp949')
html_text(a)
down_sector = POST(down_url, query = list(code = otp)) %>%
read_html(.,encoding='cp949') %>%
html_text() %>%
read_csv()
down_sector
