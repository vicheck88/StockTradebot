setDT(KOR_ticker)
setorder(KOR_ticker,'시가총액') #시가총액으로 정렬
KOR_ticker <- KOR_ticker[!grepl('스팩', KOR_ticker$'종목명'),]
KOR_ticker <- KOR_ticker[str_sub(KOR_ticker$'종목코드', -1, -1) == 0,] #우선주
KOR_ticker$일자<-as.Date(businessDay,format='%Y%m%d')
KOR_ticker<-subset(KOR_ticker,select = c('일자','종목코드','종목명','시장구분','업종명','종가','시가총액',
'주당배당금','배당수익률','관리종목'))
names(KOR_ticker)<-c('일자','종목코드','종목명','시장구분','산업분류','현재가(종가)','시가총액',
'주당배당금','배당수익률','관리여부')
return(KOR_ticker)
}
WICSSectorInfo<-function(businessDay){
#각 섹터별로 정보 얻기
# 10: 에너지, 15: 소재, 20: 산업재, 25: 경기관련소비재, 30: 필수소비재, 35: 건강관리
# 40: 금융, 45: IT, 50: 커뮤니케이션서비스, 55: 유틸리티
sector_code = c('G25', 'G35', 'G50', 'G40', 'G10',
'G20', 'G55', 'G30', 'G15', 'G45')
data_sector = list()
for (i in sector_code) {
url = paste0(
'http://www.wiseindex.com/Index/GetIndexComponets',
'?ceil_yn=0&dt=',businessDay,'&sec_cd=',i)
data = fromJSON(url)
data = data$list
data_sector[[i]] = data
Sys.sleep(1)
}
data_sector = do.call(rbind, data_sector)
}
#KRX 데이터와 WICS데이터 조인 -> 특정 날에 존재한 기업에 대한 정보 획득
mergeWICSKRX<-function(businessDay){
KRX<-KRXDataMerge(businessDay)
WICS<-WICSSectorInfo(businessDay)[,c(1,2,4)]
table<-merge(WICS,KRX,by.x="CMP_CD",by.y="종목코드")
setnames(table,old=c("CMP_CD","IDX_CD","IDX_NM_KOR"),new=c("종목코드","섹션IDX","섹션"))
return(table)
}
adjustedPriceFromNaver<-function(interval, cnt, code){
# 오류 발생 시 이를 무시하고 다음 루프로 진행
tryCatch({
# url 생성
url = paste0(
'https://fchart.stock.naver.com/sise.nhn?symbol='
,code,'&timeframe=',interval,'&count=',cnt,'&requestType=0')
# 이 후 과정은 위와 동일함
# 데이터 다운로드
data = GET(url)
data_html = read_html(data, encoding = 'EUC-KR') %>%
html_nodes("item") %>%
html_attr("data")
# 데이터 나누기
price = read_delim(data_html, delim = '|')
# 필요한 열만 선택 후 클렌징
price = price[c(1, 5)]
price = data.frame(price)
colnames(price) = c('Date', code)
price[, 1] = ymd(price[, 1])
rownames(price) = price[, 1]
price[, 1] = NULL
return(price)
}, error = function(e) {
# 오류 발생시 해당 종목명을 출력
warning(paste0("Error in Ticker: ", code))
})
}
#각 월별 마지막 거래일 출력
getLastBizdayofMonth<-function(cnt){
return(rownames(adjustedPriceFromNaver('month',cnt,'005930')))
}
#Fnguide에서 데이터 받기
getFSHtmlFromFnGuide<-function(codeList){
htmlData<-list()
i<-1
for(code in codeList){
url = paste0(
'https://comp.fnguide.com/SVO2/ASP/'
,'SVD_Finance.asp?pGB=1&gicode=A',
code)
# 이 후 과정은 위와 동일함
# 데이터 다운로드 후 테이블 추출
data = GET(url) %>%
read_html() %>%
html_table()
htmlData[[code]]<-data
print(paste0(Sys.time()," : [",i,"/",length(codeList),"] Success: ",code))
i<-i+1
}
return(htmlData)
}
#Fnguide에서 받은 데이터 정리하기
cleanFSHtmlToDataFrame<-function(type,htmlData){
data<-htmlData[[1]]
if(length(data)==0) return(NULL)
if(type=="Y") r=1 else r=2
idxList<-0:2*2+r
# 3개 재무제표를 하나로 합치기
data_IS<-data[[idxList[1]]]
data_BS<-data[[idxList[2]]]
data_CF<-data[[idxList[3]]]
data_IS<-data_IS[, 1:(ncol(data_IS)-2)]
data_IS$name<-'포괄손익계산서'
data_BS$name<-'재무상태표'
data_CF$name<-'현금흐름표'
data_fs<-rbind(data_IS,data_BS,data_CF)
# 데이터 클랜징
data_fs[, 1] = gsub('계산에 참여한 계정 펼치기','',data_fs[, 1])
data_fs = data_fs[!duplicated(data_fs[, 1]), ]
rownames(data_fs) = NULL
ftype<-data_fs[,1]
data_fs<-data_fs[,-1]
Name<-data_fs[,length(names(data_fs))]
data_fs<-data_fs[,-length(names(data_fs))]
data_fs = sapply(data_fs, function(x) {
str_replace_all(x, ',', '') %>%
as.numeric()
}) %>%
data.frame(., row.names = rownames(data_fs))
data_fs$'계정'<-ftype
data_fs$code<-names(htmlData)
data_fs$'항목'<-Name
data_fs<-subset(data_fs,select=c(6,7,5,1,2,3,4))
date<-names(data_fs)[4:7]
date<-str_replace_all(date,'[X]','')
names(data_fs)[4:7]<-date
if(type=='Q') {names(data_fs)[4:7]<-date} else{
month<-substr(date,6,7)
if(month[length(date)]!=month[1]) data_fs<-data_fs[,-length(names(data_fs))]
}
data_fs<-as.data.table(data_fs)
data_fs<-melt.data.table(data_fs,1:3)
names(data_fs)<-c("종목코드","종류","계정","일자","값")
data_fs$값<-data_fs$값*100000000
data_fs<-data_fs[!is.na(data_fs$값),]
return(data_fs)
}
getCurrentPrice<-function(code){
url = paste0('https://comp.fnguide.com/SVO2/ASP/SVD_main.asp?pGB=1&gicode=A',code)
data = GET(url)
price = read_html(data) %>%
html_node(xpath = '//*[@id="svdMainChartTxt11"]') %>%
html_text() %>%
parse_number()
return(price)
}
#현재 주식 수
getCurrentStockNumbers<-function(code){
url = paste0('https://comp.fnguide.com/SVO2/ASP/SVD_main.asp?pGB=1&gicode=A',code)
data = GET(url)
share = read_html(data) %>%
html_node(xpath = '//*[@id="svdMainGrid1"]/table/tbody/tr[7]/td[1]') %>%
html_text() %>%
strsplit('/') %>%
unlist() %>%
parse_number()
return(share)
}
#현재 보통주 수
getCurrentOrdinaryStockNumbers<-function(code){
return(getCurrentStockNumbers(code)[1])
}
#현재 우선주 수
getCurrentPreferredStockNumbers<-function(code){
return(getCurrentStockNumbers(code)[2])
}
getPriceList<-function(businessDay, codeList){
result<-c()
for(code in codeList){
result[code]=getCurrentPrice(code)
}
return(result)
}
getStockNumberList<-function(businessDay, codeList){
result<-data.frame(ordinary=double(),preferred=double())
for(code in codeList){
result[code,] <- getCurrentStockNumbers(code)
}
return(result)
}
cleanDataAndExtractEntitiesFromFS<-function(corpData,yearData,quarterData,isNew){
result<-NULL
tryCatch(
{
businessDate<-as.Date(corpData[[1]],format='%Y-%m-%d')
code<-corpData[[2]]
yData<-yearData[종목코드==code]
qData<-quarterData[종목코드==code]
lastYearDate<-businessDate %m+% months(-12)
yData<-yData[등록일자>=lastYearDate]
qData<-qData[등록일자>=lastYearDate]
if(!isNew){
yData<-yData[등록일자<=businessDate]
qData<-qData[등록일자<=businessDate]
}
yDate<-as.character(yData$일자)
qDate<-as.character(qData$일자)
qRank<-frank(-as.double(qDate),ties.method="dense")
yRank<-frank(-as.double(yDate),ties.method="dense")
if(length(yRank) == 0 & length(unique(qRank)) < 4 ){return(result)}
curQRange<-diff(range(as.double(qDate)[qRank<5]))
if(length(unique(qDate))>=4 & curQRange<=1){
data<-qData[qRank<=4]
} else{ data<-yData[yRank==1] }
result <- extractFSEntities(corpData, data)
},
error=function(e) print(paste0("Fail to Read: ",code," Date:",businessDate))
)
return(result)
}
sumQuarterData<-function(data){
fs<-data[data$종류=='재무상태표']
data<-data[data$종류!='재무상태표']
fs<-fs[fs$일자==max(fs$일자)]
fs<-fs[,-c('일자','등록일자')]
if(length(unique(data$일자))>1) data<-data[,.(값=sum(값)),by=c('종목코드','종류','계정')] else{
data<-data[,-c('일자','등록일자')]
}
names(fs)<-names(data)
data<-rbind(data,fs)
return(data)
}
extractFSEntities<-function(corpData,data){
marketPrice<-corpData$시가총액
code<-corpData$종목코드
data<-data[data$종목코드==code]
data<-unique(data,by=c("종목코드","종류","계정","일자"),fromLast=T)
if(length(unique(data$일자))==4){
data<-sumQuarterData(data)
}
#  data[,일자:=corpData[[1]]]
#  data<-subset(data,select=c(5,1,2,3,4))
value_type <- c('지배주주순이익','자본','자본금','영업활동으로인한현금흐름',
'재무활동으로인한현금흐름','투자활동으로인한현금흐름','매출액','매출총이익','영업이익',
'유동자산','부채','유상증자','자산','유동부채','당기순이익')
tmp<-data[data[,계정 %in% value_type]]$값
names(tmp)<-data[data[,계정 %in% value_type]]$계정
corpData[,':='(자산=tmp['자산'],유동자산=tmp['유동자산'],부채=tmp['부채'],유동부채=tmp['유동부채'],
자본=tmp['자본'],자본금=tmp['자본금'],매출액=tmp['매출액'],매출총이익=tmp['매출총이익'],
영업이익=tmp['영업이익'],지배주주순이익=tmp['지배주주순이익'],당기순이익=tmp['당기순이익'],
영업활동으로인한현금흐름=tmp['영업활동으로인한현금흐름'],
재무활동으로인한현금흐름=tmp['재무활동으로인한현금흐름'],
투자활동으로인한현금흐름=tmp['투자활동으로인한현금흐름'],
유상증자=tmp['유상증자'])]
return(corpData)
}
addMomentum<-function(businessDay, codeList){
result<-NULL
for(code in codeList){
tryCatch(
{
priceList<-adjustedPriceFromNaver('day',365,code)
Return<-Return.calculate(priceList)
Return<-Return[!is.na(Return)]
volatility<-sd(Return)*sqrt(length(Return))
monthPrice<-adjustedPriceFromNaver('month',14,code)[,1]
latestValue<-monthPrice[13]
monthlyMomentum<-latestValue/monthPrice[-12:-13]-1
avgMomentum<-(mean(monthlyMomentum))/volatility
result2<-rbind(result,unlist(c('종목코드'=code,Momentum=avgMomentum)))
Sys.sleep(0.3)
},
error=function(e) print(paste0("Fail to Read: ",code))
)
}
return(result)
}
winsorizing<-function(val){
newval<-ifelse(percent_rank(val)>0.99,
quantile(val,0.99,na.rm=TRUE),val)
return(newval)
}
adjustedPriceFromNaver('day',200,'133690')
interval<-'day'
cnt<-200
adjustedPriceFromNaver('day',200,133690)
code<-'133690'
# url 생성
url = paste0(
'https://fchart.stock.naver.com/sise.nhn?symbol='
,code,'&timeframe=',interval,'&count=',cnt,'&requestType=0')
url
# 이 후 과정은 위와 동일함
# 데이터 다운로드
data = GET(url)
data
data_html = read_html(data, encoding = 'EUC-KR') %>%
html_nodes("item") %>%
html_attr("data")
# 데이터 나누기
price = read_delim(data_html, delim = '|')
data_html
data_html[2]
read_delim(data_html, delim = '|')
?read_delim
split(data_html,'|')
split(data_html[1],'|')
strsplit(data_html,'|')
data_html = read_html(data, encoding = 'EUC-KR') %>%
html_nodes("item") %>%
html_attr("data")
data_html
?read_delim
clipboard()
data_html = read_html(data, encoding = 'EUC-KR') %>%
html_nodes("item") %>%
html_attr("data")
clipboard()
data_html
clipboard()
adjustedPriceFromNaver('month',cnt,'005930')
cnt<-1
adjustedPriceFromNaver('month',cnt,'005930')
print(paste0(Sys.time()," : Starting Script"))
library(RPostgres)
library(DBI)
library(jsonlite)
dbConfig=read_json("./config.json")$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
availableDate<-getLastBizdayofMonth(3)
read_delim(I("a|b\n1.0|2.0"), delim = "|")
read_delim("a|b\n1.0|2.0", delim = "|")
data_html
read_delim(data_html,delim='|')
read_delim("20230727|88470|89195|88040|89140|87323",delim='|')
read_delim("a|b|c",delim="|")
read_delim("a|b|1.0|2.0", delim = "|")
read_delim(I("a|b|1.0|2.0"), delim = "|")
?I
read_delim(I(data_html),delim="|")
adjustedPriceFromNaver<-function(interval, cnt, code){
# 오류 발생 시 이를 무시하고 다음 루프로 진행
tryCatch({
# url 생성
url = paste0(
'https://fchart.stock.naver.com/sise.nhn?symbol='
,code,'&timeframe=',interval,'&count=',cnt,'&requestType=0')
# 이 후 과정은 위와 동일함
# 데이터 다운로드
data = GET(url)
data_html = read_html(data, encoding = 'EUC-KR') %>%
html_nodes("item") %>%
html_attr("data")
# 데이터 나누기
price = read_delim(I(data_html), delim = '|')
# 필요한 열만 선택 후 클렌징
price = price[c(1, 5)]
price = data.frame(price)
colnames(price) = c('Date', code)
price[, 1] = ymd(price[, 1])
rownames(price) = price[, 1]
price[, 1] = NULL
return(price)
}, error = function(e) {
# 오류 발생시 해당 종목명을 출력
warning(paste0("Error in Ticker: ", code))
})
}
availableDate<-getLastBizdayofMonth(3)
availableDate
?read_delim
read_delim("a|b\n1|2",delim="|")
read_delim("1|2",delim="|")
read_delim(I("1|2"),delim="|")
data_html
read_delim(data_html,delim="|")
read_delim(I(data_html),delim="|")
nasdaqList<-adjustedPriceFromNaver('day',200,NASDAQCode)
NASDAQCode<-'379810'
SNPCode<-'379800'
nasdaqList<-adjustedPriceFromNaver('day',200,NASDAQCode)
nasdaqList
nrow(nasdaqList)
adjustedPriceFromNaver<-function(interval, cnt, code){
# 오류 발생 시 이를 무시하고 다음 루프로 진행
tryCatch({
# url 생성
url = paste0(
'https://fchart.stock.naver.com/sise.nhn?symbol='
,code,'&timeframe=',interval,'&count=',cnt+1,'&requestType=0')
# 이 후 과정은 위와 동일함
# 데이터 다운로드
data = GET(url)
data_html = read_html(data, encoding = 'EUC-KR') %>%
html_nodes("item") %>%
html_attr("data")
# 데이터 나누기
price = read_delim(I(data_html), delim = '|')
# 필요한 열만 선택 후 클렌징
price = price[c(1, 5)]
price = data.frame(price)
colnames(price) = c('Date', code)
price[, 1] = ymd(price[, 1])
rownames(price) = price[, 1]
price[, 1] = NULL
return(price)
}, error = function(e) {
# 오류 발생시 해당 종목명을 출력
warning(paste0("Error in Ticker: ", code))
})
}
nasdaqList<-adjustedPriceFromNaver('day',200,NASDAQCode)
nrow(nasdaqList)
snpList<-adjustedPriceFromNaver('day',200,SNPCode)
snpList
nasdaqList
nasdaqList<-adjustedPriceFromNaver('day',200,NASDAQCode)
snpList<-adjustedPriceFromNaver('day',200,SNPCode)
names(nasdaqList)
names(snpList)
names(nasdaqList)<-"NASDAQ"
names(snpList)<-"SNP"
combinedList<-nasdaqList+snpList
combinedList
combinedList<-combinedList/2
combinedList
mean(combinedList)
mean(combinedList[,1])
SNPRatio<-0.5
NASDAQRatio<-1-SNPRatio
nasdaqList[-1,]
nasdaqList[1,]
tail(nasdaqList)
tail(nasdaqList,1)<-1
nasdaqList[nrow(nasdaqList),]<-currentNasdaqPrice
nasdaqList[nrow(nasdaqList),]<-11
nasdaqList
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('QQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
tmptoken<-getToken(apiConfig,account)
currentQQQPrice<-getCurrentOverseasPrice(apiConfig,account,tmptoken,"QQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,tmptoken,"TQQQ",'NAS')
bilPrice<-getCurrentOverseasPrice(apiConfig,account,tmptoken,"BIL",'AMS')
revokeToken(apiConfig,account,tmptoken)
tmptoken<-NULL
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),QQQ.Adjusted=currentQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*QQQ.Adjusted/y-100)]
currentDisparity
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
library(data.table)
library(xts)
library(PerformanceAnalytics)
library(quantmod)
symbols = c('QQQ','TQQQ','SQQQ')
getSymbols(symbols, src = 'yahoo',from='1990-01-01')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x))))
rets = Return.calculate(prices)
tqqqnaRow<-sum(is.na(prices$TQQQ.Adjusted))
prices<-as.data.table(prices)
rets<-as.data.table(rets)
rets[is.na(TQQQ.Adjusted),TQQQ.Adjusted:=QQQ.Adjusted*3]
rets[is.na(SQQQ.Adjusted),SQQQ.Adjusted:=-3*QQQ.Adjusted]
for(i in tqqqnaRow:1){
p<-prices[i+1,"TQQQ.Adjusted"]
ratio<-rets[i+1,TQQQ.Adjusted]
prices[i,TQQQ.Adjusted:=p/(1+ratio)]
pp<-prices[i+1,SQQQ.Adjusted]
rratio<-rets[i+1,SQQQ.Adjusted]
prices[i,SQQQ.Adjusted:=pp/(1+rratio)]
}
rets<-rets[-1,]
movingAvg<-NULL
for(i in c(5,10,20,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(as.xts(prices),movingAvg)
priceWithMA<-as.data.table(priceWithMA)
priceWith200MA<-priceWithMA[,.(index,QQQ.Adjusted,SQQQ.Adjusted,TQQQ.Adjusted,QQQ.Adjusted.MA.200)]
priceWith200MA[,QQQDisparity:=100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100]
priceWith200MA<-na.omit(as.xts(priceWith200MA))
rets<-rets[,-"QQQ.Adjusted"]
rets<-as.xts(rets)
rets$Cash<-0
priceWith200MA
