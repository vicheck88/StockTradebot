names(fsQ)<-names(FfsQ[,-'등록일자'])
names(fsY)<-names(FfsY[,-'등록일자'])
newfsQ<-fsetdiff(fsQ,FfsQ[,-'등록일자'])
newfsY<-fsetdiff(fsY,FfsY[,-'등록일자'])
newfsQ$등록일자<-Sys.Date()
newfsY$등록일자<-Sys.Date()
names(newfsQ)<-names(FfsQ)
names(newfsY)<-names(FfsY)
fsY<-rbind(FfsY,newfsY)
fsQ<-rbind(FfsQ,newfsQ)
fsY$일자<-as.character(fsY$일자)
fsQ$일자<-as.character(fsQ$일자)
newfsQ
newfsY
fsy[1,]$종류
fsY[1,]$종류
fsY$종류
fsY$계정
data_fs
data
data_fs<-as.data.table(rbind(data_IS,data_BS,data_CF))
data_fs
data_fs[,1]
data_fs[,1][[1]]
# 데이터 클랜징
data_fs[, 1] = gsub('계산에 참여한 계정 펼치기','',data_fs[,1][[1]])
data_fs
data_fs$`IFRS(연결)`
print(paste0(Sys.time()," : Starting Script"))
library(RPostgres)
library(DBI)
library(jsonlite)
dbConfig=read_json("./config.json")$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbConfig$database,host=dbConfig$host,port=dbConfig$port,user=dbConfig$user,password=dbConfig$passwd)
#함수 불러돌이기
source("~/StockTradebot/Rscript/RQuantFunctionList.R",encoding="utf-8")
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
#전월 말 날짜 구하기
print(paste0(Sys.time()," : Starting to get date"))
availableDate<-getLastBizdayofMonth(2)
if(month(Sys.Date())==month(availableDate[2])) {
availableDate<-availableDate[1]
} else{
availableDate<-availableDate[2]
}
latestDate<-dbGetQuery(conn,SQL("select max(일자) from metainfo.월별기업정보"))[,1]
while(TRUE){
tryCatch({
print(paste0(Sys.time()," : Starting to get current coporation list"))
day<-str_remove_all(availableDate,"-")
#전달 말 등록된 기업정보
df<-KRXDataMerge(day)
corpTable<-as.data.table(df)
break
}, error = function(e) {
print(paste0(Sys.time()," : Fail to get corp Data. Try again after 20mins"))
Sys.sleep(60*20)
})
}
#지금까지 등록되어있는 기업정보 구하기
corpList<-dbGetQuery(conn,SQL("select distinct 종목코드 from metainfo.월별기업정보"))$종목코드
corpList<-unique(c(corpList,corpTable$종목코드))
corpList
?sprintf
code<-'005930'
code
FfsY<-data.table(dbGetQuery(conn,SQL(sprintf("SELECT * FROM metainfo.연간재무제표 WHERE 종목코드=%s",code))))
FfsY
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
currentTQQQPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
sgovPrice<-getCurrentOverseasPrice(apiConfig,account,token,"SGOV",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=currentTQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-floor(as.numeric(currentBalance$summary2[,"frcr_evlu_tota"])/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
totalBalanceSum<-totalBalanceSum+sum(as.numeric(currentBalance$sheet[buy_crcy_cd=="USD",frcr_evlu_amt2]))
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
if(length(curTQQQRatio)) curTQQQRatio<-0
}
totalBalanceSum
currentBalance
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
currentTQQQPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
sgovPrice<-getCurrentOverseasPrice(apiConfig,account,token,"SGOV",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=currentTQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-floor(as.numeric(currentBalance$summary2[,"frcr_evlu_tota"])/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
totalBalanceSum<-totalBalanceSum+sum(as.numeric(currentBalance$sheet[buy_crcy_cd=="USD",frcr_evlu_amt2]))
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
if(length(curTQQQRatio)) curTQQQRatio<-0
}
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
if(sign(currentDisparity$TQQQ.Adjusted.MA.200)>=0) TQQQGoalRatio<-max(TQQQGoalRatio,curTQQQRatio)
if(sign(currentDisparity$TQQQ.Adjusted.MA.200)<0) TQQQGoalRatio<-min(TQQQGoalRatio,curTQQQRatio)
#sendMessage
message<-paste0("TQQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentDisparity$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity$TQQQ.Adjusted.MA.200),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('SGOV'),거래소_현재가='AMS',거래소='AMEX',현재가=sgovPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(nrow(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','ovrs_excg_cd','ccld_qty_smtl1','frcr_evlu_amt2','buy_crcy_cd')]
names(currentBalanceSheet)<-c('종목코드','종목명','거래소','보유수량','평가금액','매수통화코드')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','거래소'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
combinedSheet[,매수통화코드:='USD']
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet[is.na(매수통화코드)]$매수통화코드<-"USD"
combinedSheet<-combinedSheet[(signal>0 & 목표금액>평가금액) | (signal<0 & 목표금액<평가금액) | (signal==0 & 평가금액!=목표금액)]
print("Final stock list")
print(combinedSheet)
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
currentTQQQPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
sgovPrice<-getCurrentOverseasPrice(apiConfig,account,token,"SGOV",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=currentTQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-floor(as.numeric(currentBalance$summary2[,"frcr_evlu_tota"])/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
totalBalanceSum<-totalBalanceSum+sum(as.numeric(currentBalance$sheet[buy_crcy_cd=="USD",frcr_evlu_amt2]))
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
if(length(curTQQQRatio)) curTQQQRatio<-0
}
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
if(sign(currentDisparity$TQQQ.Adjusted.MA.200)>=0) TQQQGoalRatio<-max(TQQQGoalRatio,curTQQQRatio)
if(sign(currentDisparity$TQQQ.Adjusted.MA.200)<0) TQQQGoalRatio<-min(TQQQGoalRatio,curTQQQRatio)
#sendMessage
message<-paste0("TQQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentDisparity$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity$TQQQ.Adjusted.MA.200),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('SGOV'),거래소_현재가='AMS',거래소='AMEX',현재가=sgovPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
if(nrow(currentBalance$sheet)>0){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','ovrs_excg_cd','ccld_qty_smtl1','frcr_evlu_amt2','buy_crcy_cd')]
names(currentBalanceSheet)<-c('종목코드','종목명','거래소','보유수량','평가금액','매수통화코드')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','거래소'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
combinedSheet[,매수통화코드:='USD']
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet[is.na(매수통화코드)]$매수통화코드<-"USD"
combinedSheet<-combinedSheet[(signal>0 & 목표금액>평가금액) | (signal<0 & 목표금액<평가금액) | (signal==0 & 평가금액!=목표금액)]
print("Final stock list")
print(combinedSheet)
7101/35.78
currentBalance
9636703/1356
7014.62-42.79
url<-paste0(apiConfig$url,'/uapi/overseas-stock/v1/trading/inquire-psamount')
headers<-c(
Authorization=paste('Bearer',token),
appkey=account$appkey,
appsecret=account$appsecret,
tr_id='TTTS3007R'
)
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
OVRS_EXCG_CD='NASD',
ITEM_CD='TQQQ',
TR_MKET_CD='00',
OVRS_ORD_UNPR='35'
)
response<-GET(url,add_headers(headers),query=query)
res<-fromJSON(rawToChar(response$content))
res
url<-paste0(apiConfig$url,'/uapi/overseas-stock/v1/trading/inquire-psamount')
headers<-c(
Authorization=paste('Bearer',token),
appkey=account$appkey,
appsecret=account$appsecret,
tr_id='TTTS3007R'
)
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
OVRS_EXCG_CD='NASD',
ITEM_CD='SPY',
OVRS_ORD_UNPR='100'
)
response<-GET(url,add_headers(headers),query=query)
res<-fromJSON(rawToChar(response$content))
re
res
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
OVRS_EXCG_CD='NASD',
ITEM_CD='APPL',
OVRS_ORD_UNPR='100'
)
response<-GET(url,add_headers(headers),query=query)
res<-fromJSON(rawToChar(response$content))
res
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
OVRS_EXCG_CD='AMEX',
ITEM_CD='SPY',
OVRS_ORD_UNPR='100'
)
response<-GET(url,add_headers(headers),query=query)
res<-fromJSON(rawToChar(response$content))
res
as.numeric(res$output$ovrs_ord_psbl_amt)
getAvailablePurchaseAmount<-function(token,apiConfig,account){
url<-paste0(apiConfig$url,'/uapi/overseas-stock/v1/trading/inquire-psamount')
headers<-c(
Authorization=paste('Bearer',token),
appkey=account$appkey,
appsecret=account$appsecret,
tr_id='TTTS3007R'
)
query<-list(CANO=substr(account$accNo,1,8),
ACNT_PRDT_CD=substr(account$accNo,9,10),
OVRS_EXCG_CD='AMEX',
ITEM_CD='SPY',
OVRS_ORD_UNPR='100'
)
response<-GET(url,add_headers(headers),query=query)
res<-fromJSON(rawToChar(response$content))
if(res$rt_cd!=0) return(-1)
return(as.numeric(res$output$ovrs_ord_psbl_amt))
}
currentBalance
combinedSheet
stockTable<-combinedSheet
i<-1
code<-stockTable[i,]$종목코드
excdcode2<-stockTable[i,]$거래소_현재가
excdcode<-stockTable[i,]$거래소
ordertype<-stockTable[i,]$주문구분
price<-getCurrentOverseasPrice(apiConfig,account,token,code,excdcode2)
curQty<-stockTable[i,]$보유수량
priceSum<-stockTable[i,]$목표금액-price*curQty
priceSum
priceSum<-min(priceSum,getAvailablePurchaseAmount(token,apiConfig,account))
priceSum
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
currentTQQQPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
sgovPrice<-getCurrentOverseasPrice(apiConfig,account,token,"SGOV",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=currentTQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-floor(as.numeric(currentBalance$summary2[,"frcr_evlu_tota"])/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
totalBalanceSum<-totalBalanceSum+sum(as.numeric(currentBalance$sheet[buy_crcy_cd=="USD",frcr_evlu_amt2]))
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
if(length(curTQQQRatio)) curTQQQRatio<-0
}
totalBalanceSum
as.numeric(currentBalance$summary2[,"frcr_evlu_tota"]
)
currentBalance
totalBalanceSum<-floor(as.numeric(currentBalance$summary2[,"tot_asst_amt"])/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
totalBalanceSum
currentBalance$summary2[,"tot_asst_amt"]
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
currentTQQQPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
sgovPrice<-getCurrentOverseasPrice(apiConfig,account,token,"SGOV",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=currentTQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-floor(as.numeric(currentBalance$summary2[,"tot_asst_amt"])/as.numeric(currentBalance$summary[,"frst_bltn_exrt"]))
curTQQQRatio<-0
if(nrow(currentBalance$sheet)>0){
curTQQQBalance<-as.numeric(currentBalance$sheet[pdno=="TQQQ",frcr_evlu_amt2])
curTQQQRatio<-curTQQQBalance/totalBalanceSum
if(length(curTQQQRatio)) curTQQQRatio<-0
}
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
if(sign(currentDisparity$TQQQ.Adjusted.MA.200)>=0) TQQQGoalRatio<-max(TQQQGoalRatio,curTQQQRatio)
if(sign(currentDisparity$TQQQ.Adjusted.MA.200)<0) TQQQGoalRatio<-min(TQQQGoalRatio,curTQQQRatio)
#sendMessage
message<-paste0("TQQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nTQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nTQQQ Disparity: ", round(currentDisparity$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
message
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity$TQQQ.Adjusted.MA.200),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('SGOV'),거래소_현재가='AMS',거래소='AMEX',현재가=sgovPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
goalBalanceSheet
