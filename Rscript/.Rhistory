priceWithRatio[,CashinvestRatio:=1-TQQQinvestRatio]
priceWithRatio<-as.xts(priceWithRatio)
Tactical = Return.portfolio(rets[,c("TQQQ.Adjusted","Cash")], priceWithRatio[,c("TQQQinvestRatio","CashinvestRatio")], verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('Hold', 'MA strategy'))
charts.PerformanceSummary(portfolios, main = "Buy & Hold vs Tactical")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
library(data.table)
library(xts)
library(PerformanceAnalytics)
library(quantmod)
symbols = c('QQQ','TQQQ','SQQQ')
getSymbols(symbols, src = 'yahoo',from='1990-01-01')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x))))
rets = Return.calculate(prices)
tqqqnaRow<-sum(is.na(prices$TQQQ.Adjusted))
prices<-as.data.table(prices)
rets<-as.data.table(rets)
rets[is.na(TQQQ.Adjusted),TQQQ.Adjusted:=QQQ.Adjusted*3]
rets[is.na(SQQQ.Adjusted),SQQQ.Adjusted:=-3*QQQ.Adjusted]
for(i in tqqqnaRow:1){
p<-prices[i+1,"TQQQ.Adjusted"]
ratio<-rets[i+1,TQQQ.Adjusted]
prices[i,TQQQ.Adjusted:=p/(1+ratio)]
pp<-prices[i+1,SQQQ.Adjusted]
rratio<-rets[i+1,SQQQ.Adjusted]
prices[i,SQQQ.Adjusted:=pp/(1+rratio)]
}
rets<-rets[-1,]
movingAvg<-NULL
for(i in c(5,10,20,60,100,200,300)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(as.xts(prices),movingAvg)
priceWithMA<-as.data.table(priceWithMA)
priceWith200MA<-priceWithMA[,.(index,QQQ.Adjusted,SQQQ.Adjusted,TQQQ.Adjusted,QQQ.Adjusted.MA.100,TQQQ.Adjusted.MA.100)]
priceWith200MA[,TQQQDisparity:=100*TQQQ.Adjusted/TQQQ.Adjusted.MA.100-100]
priceWith200MA[,QQQDisparity:=100*QQQ.Adjusted/QQQ.Adjusted.MA.100-100]
priceWith200MA<-na.omit(as.xts(priceWith200MA))
rets<-rets[,-"QQQ.Adjusted"]
rets<-as.xts(rets)
rets$Cash<-0
getTQQQInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$TQQQDisparity
#disparity<-table[i,]$QQQDisparity
#TQQQratio
addRatio<-floor(disparity)*0.5
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
table[i,]$TQQQinvestRatio<-newRatio
}
return(table)
}
priceWithRatio<-as.data.table(priceWith200MA)
priceWithRatio[,TQQQinvestRatio:=0]
priceWithRatio[,SQQQinvestRatio:=0]
priceWithRatio[,CashinvestRatio:=0]
priceWithRatio<-priceWithRatio[,getTQQQInvestRatio(.SD)]
priceWithRatio[,CashinvestRatio:=1-TQQQinvestRatio]
priceWithRatio<-as.xts(priceWithRatio)
Tactical = Return.portfolio(rets[,c("TQQQ.Adjusted","Cash")], priceWithRatio[,c("TQQQinvestRatio","CashinvestRatio")], verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('Hold', 'MA strategy'))
charts.PerformanceSummary(portfolios, main = "Buy & Hold vs Tactical")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
library(data.table)
library(xts)
library(PerformanceAnalytics)
library(quantmod)
symbols = c('QQQ','TQQQ','SQQQ')
getSymbols(symbols, src = 'yahoo',from='1990-01-01')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x))))
rets = Return.calculate(prices)
tqqqnaRow<-sum(is.na(prices$TQQQ.Adjusted))
prices<-as.data.table(prices)
rets<-as.data.table(rets)
rets[is.na(TQQQ.Adjusted),TQQQ.Adjusted:=QQQ.Adjusted*3]
rets[is.na(SQQQ.Adjusted),SQQQ.Adjusted:=-3*QQQ.Adjusted]
for(i in tqqqnaRow:1){
p<-prices[i+1,"TQQQ.Adjusted"]
ratio<-rets[i+1,TQQQ.Adjusted]
prices[i,TQQQ.Adjusted:=p/(1+ratio)]
pp<-prices[i+1,SQQQ.Adjusted]
rratio<-rets[i+1,SQQQ.Adjusted]
prices[i,SQQQ.Adjusted:=pp/(1+rratio)]
}
rets<-rets[-1,]
movingAvg<-NULL
for(i in c(5,10,20,60,100,200,300)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(as.xts(prices),movingAvg)
priceWithMA<-as.data.table(priceWithMA)
priceWith200MA<-priceWithMA[,.(index,QQQ.Adjusted,SQQQ.Adjusted,TQQQ.Adjusted,QQQ.Adjusted.MA.200,TQQQ.Adjusted.MA.200)]
priceWith200MA[,TQQQDisparity:=100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100]
priceWith200MA[,QQQDisparity:=100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100]
priceWith200MA<-na.omit(as.xts(priceWith200MA))
rets<-rets[,-"QQQ.Adjusted"]
rets<-as.xts(rets)
rets$Cash<-0
getTQQQInvestRatio<-function(table){
for(i in 1:nrow(table)){
disparity<-table[i,]$TQQQDisparity
#disparity<-table[i,]$QQQDisparity
#TQQQratio
addRatio<-floor(disparity)*0.5
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
table[i,]$TQQQinvestRatio<-newRatio
}
return(table)
}
priceWithRatio<-as.data.table(priceWith200MA)
priceWithRatio[,TQQQinvestRatio:=0]
priceWithRatio[,SQQQinvestRatio:=0]
priceWithRatio[,CashinvestRatio:=0]
priceWithRatio<-priceWithRatio[,getTQQQInvestRatio(.SD)]
priceWithRatio[,CashinvestRatio:=1-TQQQinvestRatio]
priceWithRatio<-as.xts(priceWithRatio)
Tactical = Return.portfolio(rets[,c("TQQQ.Adjusted","Cash")], priceWithRatio[,c("TQQQinvestRatio","CashinvestRatio")], verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('Hold', 'MA strategy'))
charts.PerformanceSummary(portfolios, main = "Buy & Hold vs Tactical")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
library(data.table)
library(xts)
library(PerformanceAnalytics)
library(quantmod)
symbols = c('QQQ','TQQQ','SQQQ')
getSymbols(symbols, src = 'yahoo',from='1990-01-01')
prices = do.call(cbind,
lapply(symbols, function(x) Ad(get(x))))
rets = Return.calculate(prices)
tqqqnaRow<-sum(is.na(prices$TQQQ.Adjusted))
prices<-as.data.table(prices)
rets<-as.data.table(rets)
rets[is.na(TQQQ.Adjusted),TQQQ.Adjusted:=QQQ.Adjusted*3]
rets[is.na(SQQQ.Adjusted),SQQQ.Adjusted:=-3*QQQ.Adjusted]
for(i in tqqqnaRow:1){
p<-prices[i+1,"TQQQ.Adjusted"]
ratio<-rets[i+1,TQQQ.Adjusted]
prices[i,TQQQ.Adjusted:=p/(1+ratio)]
pp<-prices[i+1,SQQQ.Adjusted]
rratio<-rets[i+1,SQQQ.Adjusted]
prices[i,SQQQ.Adjusted:=pp/(1+rratio)]
}
rets<-rets[-1,]
movingAvg<-NULL
for(i in c(5,10,20,60,100,200,300)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(as.xts(prices),movingAvg)
priceWithMA<-as.data.table(priceWithMA)
priceWith200MA<-priceWithMA[,.(index,QQQ.Adjusted,SQQQ.Adjusted,TQQQ.Adjusted,QQQ.Adjusted.MA.200,TQQQ.Adjusted.MA.200)]
priceWith200MA[,TQQQDisparity:=100*TQQQ.Adjusted/TQQQ.Adjusted.MA.200-100]
priceWith200MA[,QQQDisparity:=100*QQQ.Adjusted/QQQ.Adjusted.MA.200-100]
priceWith200MA<-na.omit(as.xts(priceWith200MA))
rets<-rets[,-"QQQ.Adjusted"]
rets<-as.xts(rets)
rets$Cash<-0
getTQQQInvestRatio<-function(table){
for(i in 1:nrow(table)){
#disparity<-table[i,]$TQQQDisparity
disparity<-table[i,]$QQQDisparity
#TQQQratio
addRatio<-floor(disparity)*0.5
if(i>1){
prevRatio<-table[i-1,]$investRatio
if(addRatio>=0) addRatio<-max(prevRatio,addRatio)
if(addRatio<0) addRatio<-min(1+addRatio,prevRatio)
}
newRatio<-min(1,addRatio)
newRatio<-max(0,newRatio)
table[i,]$TQQQinvestRatio<-newRatio
}
return(table)
}
priceWithRatio<-as.data.table(priceWith200MA)
priceWithRatio[,TQQQinvestRatio:=0]
priceWithRatio[,SQQQinvestRatio:=0]
priceWithRatio[,CashinvestRatio:=0]
priceWithRatio<-priceWithRatio[,getTQQQInvestRatio(.SD)]
priceWithRatio[,CashinvestRatio:=1-TQQQinvestRatio]
priceWithRatio<-as.xts(priceWithRatio)
Tactical = Return.portfolio(rets[,c("TQQQ.Adjusted","Cash")], priceWithRatio[,c("TQQQinvestRatio","CashinvestRatio")], verbose = TRUE)
portfolios = na.omit(cbind(rets[,1], Tactical$returns)) %>%
setNames(c('Hold', 'MA strategy'))
charts.PerformanceSummary(portfolios, main = "Buy & Hold vs Tactical")
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
currentTQQQPrice<-getCurrentOverseasPrice(apiConfig,account,token,"QQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
sgovPrice<-getCurrentOverseasPrice(apiConfig,account,token,"SGOV",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=currentTQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
currentPrice
currentPrice$TQQQ.Adjusted.MA.200
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
currentTQQQPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
sgovPrice<-getCurrentOverseasPrice(apiConfig,account,token,"SGOV",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=currentTQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
#sendMessage
message<-paste0("QQQ price: ",currentPrice$QQQ.Adjusted)
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$QQQ.Adjusted.MA.200,2))
currentPrice
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
currentTQQQPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
sgovPrice<-getCurrentOverseasPrice(apiConfig,account,token,"SGOV",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=currentTQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
#sendMessage
message<-paste0("QQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentDisparity$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-as.numeric(currentBalance$summary[crcy_cd=="USD",frcr_drwg_psbl_amt_1])
if(nrow(currentBalance$sheet)>0){
totalBalanceSum<-totalBalanceSum+sum(as.numeric(currentBalance$sheet[buy_crcy_cd=="USD",frcr_evlu_amt2]))
}
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity$QQQ.Adjusted.MA.200),주문구분='34')
goalBalanceSum
bondBalanceSum
goalBalanceSheet
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
currentTQQQPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
sgovPrice<-getCurrentOverseasPrice(apiConfig,account,token,"SGOV",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=currentTQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
#sendMessage
message<-paste0("QQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentDisparity$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-as.numeric(currentBalance$summary[crcy_cd=="USD",frcr_drwg_psbl_amt_1])
if(nrow(currentBalance$sheet)>0){
totalBalanceSum<-totalBalanceSum+sum(as.numeric(currentBalance$sheet[buy_crcy_cd=="USD",frcr_evlu_amt2]))
}
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity$TQQQ.Adjusted.MA.200),주문구분='34')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('SGOV'),거래소_현재가='AMS',거래소='AMEX',현재가=sgovPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
goalBalanceSheet
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('SGOV'),거래소_현재가='AMS',거래소='AMEX',현재가=sgovPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('data.table','xts','quantmod','stringr','timeDate','lubridate')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
newYorkTime<-with_tz(Sys.time(),"America/New_York")
weekday<-as.POSIXlt(newYorkTime)$wday
holidays<-with_tz(holidayNYSE(year = getRmetricsOptions("currentYear"))@Data,"America/New_York")
if(weekday %in% c(0,6) | as.Date(newYorkTime) %in% as.Date(holidays)){
stop("Today is weekend, or holiday")
}
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
symbols = c('TQQQ')
getSymbols(symbols, src = 'yahoo')
prices = do.call(cbind,lapply(symbols, function(x) Ad(get(x))))
prices<-as.data.table(prices)
token<-getToken(apiConfig,account)
currentTQQQPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
tqqqPrice<-getCurrentOverseasPrice(apiConfig,account,token,"TQQQ",'NAS')
sgovPrice<-getCurrentOverseasPrice(apiConfig,account,token,"SGOV",'AMS')
prices<-as.xts(rbind(prices,data.table(index=Sys.Date(),TQQQ.Adjusted=currentTQQQPrice)))
movingAvg<-NULL
for(i in c(5,10,20,30,60,100,200)){
tbl<-as.xts(prices)
tbl<-do.call(cbind,lapply(tbl,function(y)rollmean(y,i,align='right')))
names(tbl)<-paste0(names(tbl),".MA.",i)
movingAvg<-cbind(movingAvg,tbl)
}
priceWithMA<-cbind(prices,movingAvg)
priceWithMA<-as.data.table(priceWithMA)
currentPrice<-tail(priceWithMA,1)
currentPrice<-currentPrice[,-1]
currentDisparity<-currentPrice[,lapply(.SD,function(y) 100*TQQQ.Adjusted/y-100)]
#TQQQratio
TQQQGoalRatio<-floor(currentDisparity$TQQQ.Adjusted.MA.200)*0.5
TQQQGoalRatio<-min(1,TQQQGoalRatio)
TQQQGoalRatio<-max(0,TQQQGoalRatio)
#sendMessage
message<-paste0("QQQ price: ",currentPrice$TQQQ.Adjusted)
message<-paste0(message,"\nQQQ 200 MA: ",round(currentPrice$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nQQQ Disparity: ", round(currentDisparity$TQQQ.Adjusted.MA.200,2))
message<-paste0(message,"\nToday TQQQ Ratio: ",TQQQGoalRatio)
sendMessage(message)
currentBalance<-getPresentOverseasBalancesheet(token,apiConfig,account)
if(currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
totalBalanceSum<-as.numeric(currentBalance$summary[crcy_cd=="USD",frcr_drwg_psbl_amt_1])
if(nrow(currentBalance$sheet)>0){
totalBalanceSum<-totalBalanceSum+sum(as.numeric(currentBalance$sheet[buy_crcy_cd=="USD",frcr_evlu_amt2]))
}
goalBalanceSum<-totalBalanceSum*TQQQGoalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
goalBalanceSheet<-data.table(종목코드=c('TQQQ'),거래소_현재가='NAS',거래소='NASD',현재가=tqqqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity$TQQQ.Adjusted.MA.200),주문구분='34')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=c('SGOV'),거래소_현재가='AMS',거래소='AMEX',현재가=sgovPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
