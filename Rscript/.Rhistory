'주당배당금','배당수익률','관리여부')]
prevCorpTable$일자<-availableDate
prevCorpTable[,일자]<-availableDate
prevCorpTable
prevCorpTable$일자<-3
availableDate
prevCorpTable[,일자]<-availableDate
prevCorpTable$일자<-availableDate
is.character(availableDate)
prevCorpTable<-prevCorpTable[,c('일자','종목코드','종목명','시장구분','산업분류','현재가(종가)','시가총액',
'주당배당금','배당수익률','관리여부')]
#지금까지 등록되어있는 기업정보 구하기
prevCorpTable<-as.data.table(dbGetQuery(conn,
SQL("select * from metainfo.월별기업정보
where 일자=(select max(일자) from metainfo.월별기업정보)")))
prevCorpTable<-prevCorpTable[,c('일자','종목코드','종목명','시장구분','산업분류','현재가(종가)','시가총액',
'주당배당금','배당수익률','관리여부')]
str(prevCorpTable)
as.Date(availableDate)
prevCorpTable$일자<-as.Date(availableDate)
prevCorpTable
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('stringr')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
today<-str_replace_all(Sys.Date(),"-","")
token<-getToken(apiConfig,account)
if(isKoreanHoliday(token,apiConfig,account,today)=="N") stop("Market closed")
nasdaqCode<-'418660' #tiger 나스닥 레버리지
sofrCode<-'456610' #tiger sofr
nasdaqList<-adjustedPriceFromNaver('day',200,nasdaqCode)
sofrList<-adjustedPriceFromNaver('day',200,sofrCode)
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
nasdaqList[nrow(nasdaqList),]<-currentNasdaqPrice
movingAvg<-mean(nasdaqList[,1])
currentDisparity<-100*(currentNasdaqPrice/movingAvg)-100
goalRatio<-floor(currentDisparity)*0.5
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
currentBalance<-getBalancesheet(apiConfig,account)
getwd()
apiConfig
config
account
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('stringr')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
today<-str_replace_all(Sys.Date(),"-","")
token<-getToken(apiConfig,account)
if(isKoreanHoliday(token,apiConfig,account,today)=="N") stop("Market closed")
nasdaqCode<-'418660' #tiger 나스닥 레버리지
sofrCode<-'456610' #tiger sofr
nasdaqList<-adjustedPriceFromNaver('day',200,nasdaqCode)
sofrList<-adjustedPriceFromNaver('day',200,sofrCode)
currentNasdaqPrice<-getCurrentPrice(apiConfig,account,token,nasdaqCode)
currentSofrPrice<-getCurrentPrice(apiConfig,account,token,sofrCode)
nasdaqList[nrow(nasdaqList),]<-currentNasdaqPrice
movingAvg<-mean(nasdaqList[,1])
currentDisparity<-100*(currentNasdaqPrice/movingAvg)-100
goalRatio<-floor(currentDisparity)*0.5
goalRatio<-min(1,goalRatio)
goalRatio<-max(0,goalRatio)
goalRatio
currentBalance<-getBalancesheet(apiConfig,account)
account
token
currentBalance<-getBalancesheet(token,apiConfig,account)
currentBalance
totalBalanceSum<-as.numeric(currentBalance$summary$tot_evlu_amt)
totalBalanceSum
goalBalanceSum<-totalBalanceSum*goalRatio
bondBalanceSum<-totalBalanceSum-goalBalanceSum
bondBalanceSum
goalBalanceSheet<-output[,c('종목코드','종목명')]
goalBalanceSheet<-data.table(종목코드=nasdaqCode,종목명='tiger 나스닥 레버리지',현재가=currentNasdaqPrice,목표금액=goalBalanceSum,signal=sign(currentDisparity),주문구분='00')
goalBalanceSheet<-rbind(goalBalanceSheet,data.table(종목코드=sofrCode,종목명='tiger sofr',현재가=currentSofrPrice,목표금액=bondBalanceSum,signal=0,주문구분='00'))
goalBalanceSheet
if(!is.null(currentBalance$sheet)){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','hldg_qty','evlu_amt')]
names(currentBalanceSheet)<-c('종목코드','종목명','보유수량','평가금액')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','종목명'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
}
combinedSheet
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet<-combinedSheet[,c('종목코드','종목명','보유수량','목표금액','평가금액')]
combeindSheet
combinedSheet
sellSheet<-combinedSheet[평가금액>목표금액]
sellSheet
buySheet<-combinedSheet[평가금액<목표금액]
buySheet
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('RPostgres', 'DBI','stringr')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
dbconfig<-config$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbconfig$database,host=dbconfig$host,port=dbconfig$port,user=dbconfig$user,password=dbconfig$passwd)
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
token<-getToken(apiConfig,account)
#재무제표 이상한 기업 우선 거르기
#최근 1년 간 분기재무제표에서 매출, 매출원가가 음수인 경우가 한 번이라도 있다면 목록에서 제거
prevDate<-str_replace(substring(Sys.Date()-365,1,7),'-','.')
sql<-sprintf("select * from metainfo.월별기업정보 a
where 일자=(select max(일자) from metainfo.월별기업정보)
and not exists (
select 1 from (
select * from metainfo.분기재무제표 c
union all
select * from metainfo.연간재무제표 y
) m
where 일자>'%s'
and (계정='매출액' or 계정='매출원가')
and 값<0 and a.종목코드=m.종목코드)",prevDate)
corpTable<-dbGetQuery(conn,SQL(sql))
setDT(corpTable)
filter<-function(data){
dat<-data[관리여부!="관리종목"]
dat<-dat[is.na(매출총이익)==F]
dat<-dat[is.na(잉여현금흐름)==F]
dat<-dat[is.na(자산)==F]
dat<-dat[매출액>=매출총이익] #매출원가가 -인 경우 제외
dat<-dat[자본>자본금] #자본잠식상태가 아님
dat<-dat[잉여현금흐름>0]
dat<-dat[매출총이익>0]
dat<-dat[is.na(유상증자)] #최근 1년간 유상증자 안함
return(dat)
}
orderData<-function(data){
data[,SIZERANK:=rank(시가총액)]
data[,QUALITYRANK:=rank(-(매출총이익+잉여현금흐름)/자산)]
data[,VALUERANK:=0]
data[,MOMENTUMRANK:=0]
data[,TOTALRANK:=QUALITYRANK+SIZERANK+VALUERANK+MOMENTUMRANK]
setorder(data,TOTALRANK,QUALITYRANK,SIZERANK)
return(data)
}
currentBalance<-getBalancesheet(token,apiConfig,account)
totalBalanceSum<-currentBalance$summary$tot_evlu_amt
args<-commandArgs(trailingOnly = TRUE)
if(length(args)==0){
stocknum<-15
goalBalanceSum<-as.numeric(totalBalanceSum)
} else{
stocknum<-as.numeric(args[1])
goalBalanceSum<-as.numeric(args[2])
}
print(paste0("Number of Stocks: ",stocknum))
print(paste0("Total stock balance: ",goalBalanceSum))
output<-filter(corpTable)
output<-orderData(output)
output<-output[1:stocknum]
output$일자<-as.character(output$일자)
print("Selected stocks")
print(output)
goalBalanceSheet<-output[,c('종목코드','종목명')]
goalBalanceSheet$목표비율<-1
goalBalanceSheet$목표금액<-floor(goalBalanceSheet[,목표비율/sum(목표비율)]*goalBalanceSum)
if(currentBalance$rt_cd!='0' | currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
if(!is.null(currentBalance$sheet)){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','hldg_qty','evlu_amt')]
names(currentBalanceSheet)<-c('종목코드','종목명','보유수량','평가금액')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','종목명'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet<-combinedSheet[,c('종목코드','종목명','보유수량','목표금액','평가금액')]
print("Final stock list")
print(combinedSheet)
corpTable
down_sector_KOSPI<-as.data.table(read_csv("./python/kospi_code.csv"))
down_sector_KOSDAQ<-as.data.table(read_csv("./python/kosdaq_code.csv"))
down_sector_KOSPI$지수업종대분류<-as.character(down_sector_KOSPI$지수업종대분류)
sector_code<-as.data.table(read_csv("./python/idx_code.csv"))
sector_code
down_sector_KOSDAQ
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('RPostgres', 'DBI','stringr')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
dbconfig<-config$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbconfig$database,host=dbconfig$host,port=dbconfig$port,user=dbconfig$user,password=dbconfig$passwd)
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
token<-getToken(apiConfig,account)
#재무제표 이상한 기업 우선 거르기
#최근 1년 간 분기재무제표에서 매출, 매출원가가 음수인 경우가 한 번이라도 있다면 목록에서 제거
prevDate<-str_replace(substring(Sys.Date()-365,1,7),'-','.')
sql<-sprintf("select * from metainfo.월별기업정보 a
where 일자=(select max(일자) from metainfo.월별기업정보)
and not exists (
select 1 from (
select * from metainfo.분기재무제표 c
union all
select * from metainfo.연간재무제표 y
) m
where 일자>'%s'
and (계정='매출액' or 계정='매출원가')
and 값<0 and a.종목코드=m.종목코드)",prevDate)
corpTable<-dbGetQuery(conn,SQL(sql))
setDT(corpTable)
filter<-function(data){
dat<-data[관리여부!="관리종목"]
dat<-dat[is.na(매출총이익)==F]
dat<-dat[is.na(잉여현금흐름)==F]
dat<-dat[is.na(자산)==F]
dat<-dat[매출액>=매출총이익] #매출원가가 -인 경우 제외
dat<-dat[자본>자본금] #자본잠식상태가 아님
dat<-dat[잉여현금흐름>0]
dat<-dat[매출총이익>0]
dat<-dat[is.na(유상증자)] #최근 1년간 유상증자 안함
return(dat)
}
orderData<-function(data){
data[,SIZERANK:=rank(시가총액)]
data[,QUALITYRANK:=rank(-(매출총이익+잉여현금흐름)/자산)]
data[,VALUERANK:=0]
data[,MOMENTUMRANK:=0]
data[,TOTALRANK:=QUALITYRANK+SIZERANK+VALUERANK+MOMENTUMRANK]
setorder(data,TOTALRANK,QUALITYRANK,SIZERANK)
return(data)
}
currentBalance<-getBalancesheet(token,apiConfig,account)
totalBalanceSum<-currentBalance$summary$tot_evlu_amt
args<-commandArgs(trailingOnly = TRUE)
if(length(args)==0){
stocknum<-15
goalBalanceSum<-as.numeric(totalBalanceSum)
} else{
stocknum<-as.numeric(args[1])
goalBalanceSum<-as.numeric(args[2])
}
print(paste0("Number of Stocks: ",stocknum))
print(paste0("Total stock balance: ",goalBalanceSum))
output<-filter(corpTable)
output<-orderData(output)
output<-output[1:stocknum]
output$일자<-as.character(output$일자)
print("Selected stocks")
print(output)
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('RPostgres', 'DBI','stringr')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
dbconfig<-config$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbconfig$database,host=dbconfig$host,port=dbconfig$port,user=dbconfig$user,password=dbconfig$passwd)
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
token<-getToken(apiConfig,account)
#재무제표 이상한 기업 우선 거르기
#최근 1년 간 분기재무제표에서 매출, 매출원가가 음수인 경우가 한 번이라도 있다면 목록에서 제거
prevDate<-str_replace(substring(Sys.Date()-365,1,7),'-','.')
sql<-sprintf("select * from metainfo.월별기업정보 a
where 일자=(select max(일자) from metainfo.월별기업정보)
and not exists (
select 1 from (
select * from metainfo.분기재무제표 c
union all
select * from metainfo.연간재무제표 y
) m
where 일자>'%s'
and (계정='매출액' or 계정='매출원가')
and 값<0 and a.종목코드=m.종목코드)",prevDate)
corpTable<-dbGetQuery(conn,SQL(sql))
setDT(corpTable)
filter<-function(data){
dat<-data[관리여부!="관리종목"]
dat<-dat[is.na(매출총이익)==F]
dat<-dat[is.na(잉여현금흐름)==F]
dat<-dat[is.na(자산)==F]
dat<-dat[매출액>=매출총이익] #매출원가가 -인 경우 제외
dat<-dat[자본>자본금] #자본잠식상태가 아님
dat<-dat[잉여현금흐름>0]
dat<-dat[매출총이익>0]
dat<-dat[is.na(유상증자)] #최근 1년간 유상증자 안함
return(dat)
}
orderData<-function(data){
data[,SIZERANK:=rank(시가총액)]
data[,QUALITYRANK:=rank(-(매출총이익+잉여현금흐름)/자산)]
data[,VALUERANK:=0]
data[,MOMENTUMRANK:=0]
data[,TOTALRANK:=QUALITYRANK+SIZERANK+VALUERANK+MOMENTUMRANK]
setorder(data,TOTALRANK,QUALITYRANK,SIZERANK)
return(data)
}
currentBalance<-getBalancesheet(token,apiConfig,account)
totalBalanceSum<-currentBalance$summary$tot_evlu_amt
args<-commandArgs(trailingOnly = TRUE)
if(length(args)==0){
stocknum<-15
goalBalanceSum<-as.numeric(totalBalanceSum)
} else{
stocknum<-as.numeric(args[1])
goalBalanceSum<-as.numeric(args[2])
}
print(paste0("Number of Stocks: ",stocknum))
print(paste0("Total stock balance: ",goalBalanceSum))
output<-filter(corpTable)
output<-orderData(output)
output<-output[1:stocknum]
output$일자<-as.character(output$일자)
print("Selected stocks")
print(output)
goalBalanceSheet<-output[,c('종목코드','종목명')]
goalBalanceSheet$목표비율<-1
goalBalanceSheet$목표금액<-floor(goalBalanceSheet[,목표비율/sum(목표비율)]*goalBalanceSum)
if(currentBalance$rt_cd!='0' | currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
if(!is.null(currentBalance$sheet)){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','hldg_qty','evlu_amt')]
names(currentBalanceSheet)<-c('종목코드','종목명','보유수량','평가금액')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','종목명'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet<-combinedSheet[,c('종목코드','종목명','보유수량','목표금액','평가금액')]
print("Final stock list")
print(combinedSheet)
#Sys.setlocale('LC_ALL','en_US.UTF-8')
source("~/StockTradebot/Rscript/Han2FunctionList.R") #macOS에서 읽는 경우
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/Han2FunctionList.R") #라즈베리에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
pkg = c('RPostgres', 'DBI','stringr')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("~/config.json")
dbconfig<-config$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbconfig$database,host=dbconfig$host,port=dbconfig$port,user=dbconfig$user,password=dbconfig$passwd)
#apiConfig<-config$api$config$dev
apiConfig<-config$api$config$prod
#account<-config$api$account$dev
account<-config$api$account$prod$main
token<-getToken(apiConfig,account)
#재무제표 이상한 기업 우선 거르기
#최근 1년 간 분기재무제표에서 매출, 매출원가가 음수인 경우가 한 번이라도 있다면 목록에서 제거
prevDate<-str_replace(substring(Sys.Date()-365,1,7),'-','.')
sql<-sprintf("select * from metainfo.월별기업정보 a
where 일자=(select max(일자) from metainfo.월별기업정보)
and not exists (
select 1 from (
select * from metainfo.분기재무제표 c
union all
select * from metainfo.연간재무제표 y
) m
where 일자>'%s'
and (계정='매출액' or 계정='매출원가')
and 값<0 and a.종목코드=m.종목코드)",prevDate)
corpTable<-dbGetQuery(conn,SQL(sql))
setDT(corpTable)
filter<-function(data){
dat<-data[관리여부!="관리종목"]
dat<-dat[is.na(매출총이익)==F]
dat<-dat[is.na(잉여현금흐름)==F]
dat<-dat[is.na(자산)==F]
dat<-dat[매출액>=매출총이익] #매출원가가 -인 경우 제외
dat<-dat[자본>자본금] #자본잠식상태가 아님
dat<-dat[잉여현금흐름>0]
dat<-dat[매출총이익>0]
dat<-dat[is.na(유상증자)] #최근 1년간 유상증자 안함
return(dat)
}
orderData<-function(data){
data[,SIZERANK:=rank(시가총액)]
data[,QUALITYRANK:=rank(-(매출총이익+잉여현금흐름)/자산)]
data[,VALUERANK:=0]
data[,MOMENTUMRANK:=0]
data[,TOTALRANK:=QUALITYRANK+SIZERANK+VALUERANK+MOMENTUMRANK]
setorder(data,TOTALRANK,QUALITYRANK,SIZERANK)
return(data)
}
currentBalance<-getBalancesheet(token,apiConfig,account)
totalBalanceSum<-currentBalance$summary$tot_evlu_amt
args<-commandArgs(trailingOnly = TRUE)
if(length(args)==0){
stocknum<-15
goalBalanceSum<-as.numeric(totalBalanceSum)
} else{
stocknum<-as.numeric(args[1])
goalBalanceSum<-as.numeric(args[2])
}
print(paste0("Number of Stocks: ",stocknum))
print(paste0("Total stock balance: ",goalBalanceSum))
output<-filter(corpTable)
output<-orderData(output)
output<-output[1:stocknum]
output$일자<-as.character(output$일자)
print("Selected stocks")
print(output)
goalBalanceSheet<-output[,c('종목코드','종목명')]
goalBalanceSheet$목표비율<-1
goalBalanceSheet$목표금액<-floor(goalBalanceSheet[,목표비율/sum(목표비율)]*goalBalanceSum)
if(currentBalance$rt_cd!='0' | currentBalance$status_code!='200'){
stop("Fail to get current balance. Stop script")
}
if(!is.null(currentBalance$sheet)){
currentBalanceSheet<-currentBalance$sheet[,c('pdno','prdt_name','hldg_qty','evlu_amt')]
names(currentBalanceSheet)<-c('종목코드','종목명','보유수량','평가금액')
combinedSheet<-merge(goalBalanceSheet,currentBalanceSheet,by=c('종목코드','종목명'),all=T)
} else{
totalBalanceSum<-0
combinedSheet<-goalBalanceSheet
combinedSheet[,c('평가금액','보유수량'):=0]
}
combinedSheet[,평가금액:=as.numeric(평가금액)]
combinedSheet[,보유수량:=as.numeric(보유수량)]
combinedSheet[is.na(목표금액)]$목표금액<-0
combinedSheet[is.na(평가금액)]$평가금액<-0
combinedSheet[is.na(보유수량)]$보유수량<-0
combinedSheet<-combinedSheet[,c('종목코드','종목명','보유수량','목표금액','평가금액')]
print("Final stock list")
print(combinedSheet)
goalBalanceSheet
output
#setwd("/home/pi/stockInfoCrawler/StockTradebot/Rscript")
setwd("/Users/chhan/StockTradebot/Rscript")
source("~/StockTradebot/Rscript/telegramAPI.R") #macOS에서 읽는 경우
#source("~/stockInfoCrawler/StockTradebot/Rscript/telegramAPI.R") #라즈베리에서 읽는 경우
source("./coinFunctionList.R",encoding="utf-8")
num<-1
coinNumLimit<-1
bandLimit<-0.3
changeThreshold<-0.05
currentBalance<-getCurrentBalance()
krwCoinList<-getUpbitCoinList()
balanceList<-getCurrentUpbitAccountInfo()
krwCoinList
krwCoinList
url<-"https://api.upbit.com/v1/accounts"
result<-getResponseParam(url,NULL)
result
result<-getResponseParam(url,NULL)
result
