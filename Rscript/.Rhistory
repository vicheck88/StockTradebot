year(lastYearDate)<-year(businessDate)-1
lastlastYearDate<-lastYearDate
year(lastlastYearDate)<-year(lastYearDate)-1
yData<-yData[yDate<=businessDate & yDate>=lastlastYearDate]
qData<-qData[qDate<=businessDate & qDate>=lastlastYearDate]
yDate<-yData$일자
qDate<-qData$일자
qRank<-frank(-as.double(qDate),ties.method="dense")
yRank<-frank(-as.double(yDate),ties.method="dense")
if(length(yRank) == 0 & length(unique(qRank)) < 4 ){return(result)}
if(length(unique(qDate))>=4){
data<-qData[qRank<=4]
} else{ data<-yData[yRank==1] }
if(length(unique(qDate))>=5){
previousData<-qData[qRank>=2 & qRank<=5]
} else if(length(unique(yDate))>=2) {
previousData<-yData[yRank==2] } else{
previousData<-NULL
}
result <- getCurrentValueQualityFactorQuarter(corpData, data, previousData)
},
error=function(e) print(paste0("Fail to Read: ",code," Date:",businessDate))
)
return(result)
}
for(i in 1:nrow(a)){
fs<-rbind(fs,cleanDataAndGetFactor(a[i,],fsY,fsQ))
}
fs
a<-corpTable[종목코드=='086250']
for(i in 1:nrow(a)){
fs<-rbind(fs,cleanDataAndGetFactor(a[i,],fsY,fsQ))
}
ㄹㄴ
fs
a<-corpTable[종목코드=='208340']
for(i in 1:nrow(a)){
fs<-rbind(fs,cleanDataAndGetFactor(a[i,],fsY,fsQ))
}
a
corpData<-a[18,]
businessDate<-as.Date(corpData[[1]],format='%Y-%m-%d')
code<-corpData[[2]]
yData<-yearData[yearData$종목코드==code,]
qData<-quarterData[quarterData$종목코드==code,]
yDate<-as.Date(paste0(yData$일자,'.01'),format='%Y.%m.%d')
qDate<-as.Date(paste0(qData$일자,'.01'),format='%Y.%m.%d')
monthCrit<-month(yDate[1])
monthTerm<-rep(3,12)
monthTerm[monthCrit]<-4
month(yDate)<-month(yDate)+4
month(qDate)<-month(qDate)+monthTerm[month(qDate)]
lastYearDate<-businessDate
year(lastYearDate)<-year(businessDate)-1
lastlastYearDate<-lastYearDate
year(lastlastYearDate)<-year(lastYearDate)-1
yData<-yData[yDate<=businessDate & yDate>=lastlastYearDate]
qData<-qData[qDate<=businessDate & qDate>=lastlastYearDate]
yDate<-yData$일자
qDate<-qData$일자
qRank<-frank(-as.double(qDate),ties.method="dense")
yRank<-frank(-as.double(yDate),ties.method="dense")
qRank
yRank
if(length(yRank) == 0 & length(unique(qRank)) < 4 ){return(result)}
if(length(unique(qDate))>=4){
data<-qData[qRank<=4]
} else{ data<-yData[yRank==1] }
if(length(unique(qDate))>=5){
previousData<-qData[qRank>=2 & qRank<=5]
} else if(length(unique(yDate))>=2) {
previousData<-yData[yRank==2] } else{
previousData<-NULL
}
data
previousData
getCurrentValueQualityFactorQuarter(corpData, data, previousData)
marketPrice<-corpData$시가총액
code<-corpData$종목코드
data<-data[data$종목코드==code]
if(length(unique(data$일자))==4){
data<-sumQuarterData(data)
}
if(!is.null(previousData) & length(unique(previousData$일자))==4){
previousData<-sumQuarterData(data)
}
value_type <- c('지배주주순이익','자본','영업활동으로인한현금흐름','매출액','유상증자','매출총이익','영업이익',
'유동자산','부채','유상증자','자산','유동부채','당기순이익')
if(!is.null(previousData)){
tmp<-previousData[previousData[,계정 %in% value_type]]$값
names(tmp)<-previousData[previousData[,계정 %in% value_type]]$계정
last_value_index<-c()
last_value_index['지배주주순이익']<-tmp['지배주주순이익'] #수익
last_value_index['영업활동으로인한현금흐름']<-tmp['영업활동으로인한현금흐름'] #영업현금흐름
last_value_index['ROA']<-tmp['자산']/tmp['지배주주순이익'] #ROA 증가
last_value_index['영업활동으로인한현금흐름증가']<-tmp['영업활동으로인한현금흐름']-tmp['지배주주순이익'] #영업현금흐름크기
last_value_index['부채비율']<-tmp['부채']/tmp['자본'] #부채비율 증가
last_value_index['유동비율']<-tmp['유동자산']/tmp['유동부채'] #유동비율
last_value_index['자본']<-tmp['자본'] #신규주식발행
last_value_index['매출총이익']<-tmp['매출총이익']
last_value_index['자산회전율']<-tmp['매출액']/tmp['자산']
}
tmp
tmp<-data[data[,계정 %in% value_type]]$값
names(tmp)<-data[data[,계정 %in% value_type]]$계정
if(!is.na(tmp['지배주주순이익'])){
corpData[,PER:= marketPrice/tmp['지배주주순이익'] ]
} else if(!is.na(tmp['당기순이익'])){
corpData[,PER:= marketPrice/tmp['당기순이익'] ]
}
corpData[,PBR:=marketPrice/tmp['자본']]
corpData[,PCR:=marketPrice/tmp['영업활동으로인한현금흐름']]
corpData[,PSR:=marketPrice/tmp['매출액']]
corpData[,POR:=marketPrice/tmp['영업이익']]
corpData[,NCAV:=tmp['유동자산']-tmp['부채']]
corpData
if(!is.na(tmp['자산'])) corpData[,GPA:=tmp['매출총이익']/tmp['자산']]
if(!is.na(corpData[,PER])) corpData[,ROE:=corpData$PBR/corpData$PER]
if(!is.na(tmp['자본'])) corpData[,ROA:=corpData$ROE*tmp['자산']/tmp['자본']]
corpData[,NCAV_Ratio:=corpData[,NCAV]/marketPrice]
fscore<-as.integer(0)
newfscore<-as.integer(0)
if(!is.na(tmp['지배주주순이익']) & tmp['지배주주순이익']>0) {fscore<-fscore+1; newfscore<-newfscore+1;}
if(!is.na(tmp['영업활동으로인한현금흐름']) & tmp['영업활동으로인한현금흐름']>0) {fscore<-fscore+1; newfscore<-newfscore+1;}
if(!is.na(tmp['영업활동으로인한현금흐름']) & !is.na(tmp['지배주주순이익'])
& tmp['영업활동으로인한현금흐름']>tmp['지배주주순이익']) fscore<-fscore+1
if(!is.null(previousData)){
if(!is.na(last_value_index['ROA']) & last_value_index['ROA']<corpData$ROA) fscore<-fscore+1
if(!is.na(last_value_index['부채비율']) & !is.na(tmp['자본']) & last_value_index['부채비율']>tmp['부채']/tmp['자본']) fscore<-fscore+1
if(!is.na(last_value_index['유동비율']) & !is.na(tmp['유동부채'] & last_value_index['유동비율']<tmp['유동자산']/tmp['유동부채'])) fscore<-fscore+1
if(!is.na(last_value_index['자본']) & last_value_index['자본']==tmp['자본']) {fscore<-fscore+1; newfscore<-newfscore+1;}
if(!is.na(last_value_index['매출총이익']) & last_value_index['매출총이익']<tmp['매출총이익']) fscore<-fscore+1
if(!is.na(last_value_index['자산회전율']) & !is.na(tmp['자산']) & last_value_index['자산회전율']<tmp['매출액']/tmp['자산']) fscore<-fscore+1
}
last_value_index["매출총이익"]
tmp['매출총이익']
data
is.na(corpData$ROA)
#PER, PBR, PCR, PSR, NCAV, GPA 계산(분기)
getCurrentValueQualityFactorQuarter<-function(corpData, data, previousData){
marketPrice<-corpData$시가총액
code<-corpData$종목코드
data<-data[data$종목코드==code]
if(length(unique(data$일자))==4){
data<-sumQuarterData(data)
}
if(!is.null(previousData) & length(unique(previousData$일자))==4){
previousData<-sumQuarterData(data)
}
value_type <- c('지배주주순이익','자본','영업활동으로인한현금흐름','매출액','유상증자','매출총이익','영업이익',
'유동자산','부채','유상증자','자산','유동부채','당기순이익')
if(!is.null(previousData)){
tmp<-previousData[previousData[,계정 %in% value_type]]$값
names(tmp)<-previousData[previousData[,계정 %in% value_type]]$계정
last_value_index<-c()
last_value_index['지배주주순이익']<-tmp['지배주주순이익'] #수익
last_value_index['영업활동으로인한현금흐름']<-tmp['영업활동으로인한현금흐름'] #영업현금흐름
last_value_index['ROA']<-tmp['자산']/tmp['지배주주순이익'] #ROA 증가
last_value_index['영업활동으로인한현금흐름증가']<-tmp['영업활동으로인한현금흐름']-tmp['지배주주순이익'] #영업현금흐름크기
last_value_index['부채비율']<-tmp['부채']/tmp['자본'] #부채비율 증가
last_value_index['유동비율']<-tmp['유동자산']/tmp['유동부채'] #유동비율
last_value_index['자본']<-tmp['자본'] #신규주식발행
last_value_index['매출총이익']<-tmp['매출총이익']
last_value_index['자산회전율']<-tmp['매출액']/tmp['자산']
}
tmp<-data[data[,계정 %in% value_type]]$값
names(tmp)<-data[data[,계정 %in% value_type]]$계정
if(!is.na(tmp['지배주주순이익'])){
corpData[,PER:= marketPrice/tmp['지배주주순이익'] ]
} else if(!is.na(tmp['당기순이익'])){
corpData[,PER:= marketPrice/tmp['당기순이익'] ]
}
corpData[,PBR:=marketPrice/tmp['자본']]
corpData[,PCR:=marketPrice/tmp['영업활동으로인한현금흐름']]
corpData[,PSR:=marketPrice/tmp['매출액']]
corpData[,POR:=marketPrice/tmp['영업이익']]
corpData[,NCAV:=tmp['유동자산']-tmp['부채']]
if(!is.na(tmp['자산'])) corpData[,GPA:=tmp['매출총이익']/tmp['자산']]
if(!is.na(corpData[,PER])) corpData[,ROE:=corpData$PBR/corpData$PER]
if(!is.na(tmp['자본'])) corpData[,ROA:=corpData$ROE*tmp['자산']/tmp['자본']]
corpData[,NCAV_Ratio:=corpData[,NCAV]/marketPrice]
fscore<-as.integer(0)
newfscore<-as.integer(0)
if(!is.na(tmp['지배주주순이익']) & tmp['지배주주순이익']>0) {fscore<-fscore+1; newfscore<-newfscore+1;}
if(!is.na(tmp['영업활동으로인한현금흐름']) & tmp['영업활동으로인한현금흐름']>0) {fscore<-fscore+1; newfscore<-newfscore+1;}
if(!is.na(tmp['영업활동으로인한현금흐름']) & !is.na(tmp['지배주주순이익'])
& tmp['영업활동으로인한현금흐름']>tmp['지배주주순이익']) fscore<-fscore+1
if(!is.null(previousData)){
if(!is.na(last_value_index['ROA']) & !is.na(corpData$ROA) &
last_value_index['ROA']<corpData$ROA) fscore<-fscore+1
if(!is.na(last_value_index['부채비율']) & !is.na(tmp['자본']) & !is.na(tmp['부채']) &
last_value_index['부채비율']>tmp['부채']/tmp['자본']) fscore<-fscore+1
if(!is.na(last_value_index['유동비율']) & !is.na(tmp['유동부채'] & !is.na(tmp['유동자산']) &
last_value_index['유동비율']<tmp['유동자산']/tmp['유동부채'])) fscore<-fscore+1
if(!is.na(last_value_index['자본']) & !is.na(tmp['자본']) &
last_value_index['자본']==tmp['자본']) {fscore<-fscore+1; newfscore<-newfscore+1;}
if(!is.na(last_value_index['매출총이익']) & !is.na(tmp['매출총이익']) &
last_value_index['매출총이익']<tmp['매출총이익']) fscore<-fscore+1
if(!is.na(last_value_index['자산회전율']) & !is.na(tmp['자산']) & !is.na(tmp['매출액'])
last_value_index['자산회전율']<tmp['매출액']/tmp['자산']) fscore<-fscore+1
}
corpData[,Fscore:=fscore]
corpData[,New_Fscore:=newfscore]
return(corpData)
}
#PER, PBR, PCR, PSR, NCAV, GPA 계산(분기)
getCurrentValueQualityFactorQuarter<-function(corpData, data, previousData){
marketPrice<-corpData$시가총액
code<-corpData$종목코드
data<-data[data$종목코드==code]
if(length(unique(data$일자))==4){
data<-sumQuarterData(data)
}
if(!is.null(previousData) & length(unique(previousData$일자))==4){
previousData<-sumQuarterData(data)
}
value_type <- c('지배주주순이익','자본','영업활동으로인한현금흐름','매출액','유상증자','매출총이익','영업이익',
'유동자산','부채','유상증자','자산','유동부채','당기순이익')
if(!is.null(previousData)){
tmp<-previousData[previousData[,계정 %in% value_type]]$값
names(tmp)<-previousData[previousData[,계정 %in% value_type]]$계정
last_value_index<-c()
last_value_index['지배주주순이익']<-tmp['지배주주순이익'] #수익
last_value_index['영업활동으로인한현금흐름']<-tmp['영업활동으로인한현금흐름'] #영업현금흐름
last_value_index['ROA']<-tmp['자산']/tmp['지배주주순이익'] #ROA 증가
last_value_index['영업활동으로인한현금흐름증가']<-tmp['영업활동으로인한현금흐름']-tmp['지배주주순이익'] #영업현금흐름크기
last_value_index['부채비율']<-tmp['부채']/tmp['자본'] #부채비율 증가
last_value_index['유동비율']<-tmp['유동자산']/tmp['유동부채'] #유동비율
last_value_index['자본']<-tmp['자본'] #신규주식발행
last_value_index['매출총이익']<-tmp['매출총이익']
last_value_index['자산회전율']<-tmp['매출액']/tmp['자산']
}
tmp<-data[data[,계정 %in% value_type]]$값
names(tmp)<-data[data[,계정 %in% value_type]]$계정
if(!is.na(tmp['지배주주순이익'])){
corpData[,PER:= marketPrice/tmp['지배주주순이익'] ]
} else if(!is.na(tmp['당기순이익'])){
corpData[,PER:= marketPrice/tmp['당기순이익'] ]
}
corpData[,PBR:=marketPrice/tmp['자본']]
corpData[,PCR:=marketPrice/tmp['영업활동으로인한현금흐름']]
corpData[,PSR:=marketPrice/tmp['매출액']]
corpData[,POR:=marketPrice/tmp['영업이익']]
corpData[,NCAV:=tmp['유동자산']-tmp['부채']]
if(!is.na(tmp['자산'])) corpData[,GPA:=tmp['매출총이익']/tmp['자산']]
if(!is.na(corpData[,PER])) corpData[,ROE:=corpData$PBR/corpData$PER]
if(!is.na(tmp['자본'])) corpData[,ROA:=corpData$ROE*tmp['자산']/tmp['자본']]
corpData[,NCAV_Ratio:=corpData[,NCAV]/marketPrice]
fscore<-as.integer(0)
newfscore<-as.integer(0)
if(!is.na(tmp['지배주주순이익']) & tmp['지배주주순이익']>0) {fscore<-fscore+1; newfscore<-newfscore+1;}
if(!is.na(tmp['영업활동으로인한현금흐름']) & tmp['영업활동으로인한현금흐름']>0) {fscore<-fscore+1; newfscore<-newfscore+1;}
if(!is.na(tmp['영업활동으로인한현금흐름']) & !is.na(tmp['지배주주순이익'])
& tmp['영업활동으로인한현금흐름']>tmp['지배주주순이익']) fscore<-fscore+1
if(!is.null(previousData)){
if(!is.na(last_value_index['ROA']) & !is.na(corpData$ROA) &
last_value_index['ROA']<corpData$ROA) fscore<-fscore+1
if(!is.na(last_value_index['부채비율']) & !is.na(tmp['자본']) & !is.na(tmp['부채']) &
last_value_index['부채비율']>tmp['부채']/tmp['자본']) fscore<-fscore+1
if(!is.na(last_value_index['유동비율']) & !is.na(tmp['유동부채'] & !is.na(tmp['유동자산']) &
last_value_index['유동비율']<tmp['유동자산']/tmp['유동부채'])) fscore<-fscore+1
if(!is.na(last_value_index['자본']) & !is.na(tmp['자본']) &
last_value_index['자본']==tmp['자본']) {fscore<-fscore+1; newfscore<-newfscore+1;}
if(!is.na(last_value_index['매출총이익']) & !is.na(tmp['매출총이익']) &
last_value_index['매출총이익']<tmp['매출총이익']) fscore<-fscore+1
if(!is.na(last_value_index['자산회전율']) & !is.na(tmp['자산']) & !is.na(tmp['매출액']) &
last_value_index['자산회전율']<tmp['매출액']/tmp['자산']) fscore<-fscore+1
}
corpData[,Fscore:=fscore]
corpData[,New_Fscore:=newfscore]
return(corpData)
}
ㅁ
a
for(i in 1:nrow(a)){
fs<-rbind(fs,cleanDataAndGetFactor(a[i,],fsY,fsQ))
}
fs
a<-corpTable[좀목코드=='208340' & 일자 %in% c('2020-04-29','2020-05-27')]
a<-corpTable[종종목코드=='208340' & 일자 %in% c('2020-04-29','2020-05-27')]
a<-corpTable[종목코드=='208340' & 일자 %in% c('2020-04-29','2020-05-27')]
a
a<-corpTable[종목코드=='208340']
a
a<-corpTable[종목코드=='208340' &( 일자 %in% c('2020-04-29','2020-05-27'))]
a
corpTable[일자 %in% c('2020-04-29','2020-05-27')]
a<-corpTable[종목코드=='208340']
a<-a[일자=='2020-04-29' | 일자=='2020-05-27']
a
#전월 말 날짜 구하기
availableDate<-getLastBizdayofMonth(3)
availableDate
Sys.Date()
a<-'2020.05.06'
as.character(a)
aa<-as.Date(a)
aa<-as.Date(a,format='%Y-%m-%d')
aa
a
aa<-as.Date(a,format='%Y.%m.%d')
aa
as.character(aa)
as.double(as.character(aa))
'2020-05'>'2020-06'
as.Date('2020-05',format='%Y.%m')
as.Date('2020.05',format='%Y.%m')
as.Date('2020.05.01',format='%Y.%m.%d')
library(RPostgres)
library(RPostgres)
library(DBI)
conn<-dbConnect(RPostgres::Postgres(),dbname='stocks',host='203.243.21.33',port='5432',user='postgres',password='12dnjftod')
#함수 불러돌이기
source("./RQuantFunctionList.R",encoding="utf-8")
year<-as.character(2010:2020)
availableDate<-getLastBizdayofMonth(100)
ㅛㄷㅁㄱ
year
availableDate
availableDate<-availableDate[-99]
availableDate
pkg = c('RPostgres', 'DBI', 'jsonlite', 'data.table')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("../config.json")
dbconfig<-config$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbconfig$database,host=dbconfig$host,port=dbconfig$port,user=dbconfig$user,password=dbconfig$passwd)
#함수 불러돌이기
corpTable<-dbGetQuery(conn,SQL("select * from metainfo.기업정보 where 일자=
(select max(일자) from metainfo.월별기업정보)"))
setDT(corpTable)
config<-fromJSON("C:/Users/vicen/OneDrive/바탕 화면/Debug/config.json")
dbconfig<-config$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbconfig$database,host=dbconfig$host,port=dbconfig$port,user=dbconfig$user,password=dbconfig$passwd)
#함수 불러돌이기
corpTable<-dbGetQuery(conn,SQL("select * from metainfo.기업정보 where 일자=
(select max(일자) from metainfo.월별기업정보)"))
setDT(corpTable)
corpTable
data<-corpTable
dat<-data[관리여부!="관리종목"]
corpTable
#함수 불러돌이기
corpTable<-dbGetQuery(conn,SQL("select * from metainfo.월별기업정보 where 일자=
(select max(일자) from metainfo.월별기업정보)"))
setDT(corpTable)
data<-corpTable
data
data[,지배주주순이익]
is.na(data[,지배주주순이익])
dat[,순이익:=지배주주순이익익]
dat[,순이익:=지배주주순이익]
dat[,순이익:='지배주주순이익']
dat
dat[,순이익:=dat$지배주주순이익익]
dat[,순이익:=dat$지배주주순이익]
dat<-data[관리여부!="관리종목"]
dat[,순이익:=dat$지배주주순이익]
dat
dat<-data[관리여부!="관리종목"]
dat$지배주주순이익
dat[,순이익:=dat$지배주주순이익]
dat
dat[,function(x) x]
dat[,function(x){print(x)}]
dat[,a:=function(x){print(x)}]
idx<-is.na(dat$순이익)
ㅑㅇㅌ
idx
dat[,순이익][idx]
dat[,순이익][idx]<-dat$당기순이익[idx]
dat$당기순이익[idx]
dat[,순이익][idx]
dat$순이익[idx]<-dat$당기순이익[idx]
dat
dat
dat
dat<-data[관리여부!="관리종목"]
dat[,순이익:=dat$지배주주순이익]
idx<-is.na(dat$순이익)
dat$순이익[idx]<-dat$당기순이익[idx]
dat
dat<-data[관리여부!="관리종목"]
dat[,순이익:=dat$지배주주순이익]
idx<-is.na(dat$순이익)
idx
dat$당기순이익[idx]
dat$순이익[idx]
dat$순이익[idx]<-dat$당기순이익[idx]
dat
dat<-dat[순이익>=0]
dat<-dat[is.na(매출충이익)==F]
dat<-dat[is.na(자본)==F]
data[,SIZERANK:=rank(시가총액)]
data[,QUALITYRANK:=rank(-매출총이익/자산)]
data[,VALUERANK:=rank(-시가총액/자본)]
data
pkg = c('RPostgres', 'DBI', 'jsonlite', 'data.table')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("../config.json")
dbconfig<-config$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbconfig$database,host=dbconfig$host,port=dbconfig$port,user=dbconfig$user,password=dbconfig$passwd)
#함수 불러돌이기
corpTable<-dbGetQuery(conn,SQL("select * from metainfo.월별기업정보 where 일자=
(select max(일자) from metainfo.월별기업정보)"))
setDT(corpTable)
filter<-function(data){
dat<-data[관리여부!="관리종목"]
dat[,순이익:=dat$지배주주순이익]
idx<-is.na(dat$순이익)
dat$순이익[idx]<-dat$당기순이익[idx]
dat<-dat[순이익>=0]
dat<-dat[is.na(매출충이익)==F]
dat<-dat[is.na(자본)==F]
return(dat)
}
orderData<-function(data){
data[,SIZERANK:=rank(시가총액)]
data[,QUALITYRANK:=rank(-매출총이익/자산)]
data[,VALUERANK:=rank(-시가총액/자본)]
data[,MOMENTUMRANK:=0]
data[,TOTALRANK:=QUALITYRANK+VALUERANK+SIZERANK]
setorder(data,TOTALRANK,QUALITYRANK,VALUERANK,SIZERANK)
return(data)
}
output<-filter(corpTable)
output<-orderData(output)
output<-output[1:stocknum]
output$일자<-as.character(output$일자)
pkg = c('RPostgres', 'DBI', 'jsonlite', 'data.table')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
sapply(pkg,library,character.only=T)
config<-fromJSON("../config.json")
dbconfig<-config$database
conn<-dbConnect(RPostgres::Postgres(),dbname=dbconfig$database,host=dbconfig$host,port=dbconfig$port,user=dbconfig$user,password=dbconfig$passwd)
#함수 불러돌이기
corpTable<-dbGetQuery(conn,SQL("select * from metainfo.월별기업정보 where 일자=
(select max(일자) from metainfo.월별기업정보)"))
setDT(corpTable)
filter<-function(data){
dat<-data[관리여부!="관리종목"]
dat[,순이익:=dat$지배주주순이익]
idx<-is.na(dat$순이익)
dat$순이익[idx]<-dat$당기순이익[idx]
dat<-dat[순이익>=0]
dat<-dat[is.na(매출총이익)==F]
dat<-dat[is.na(자본)==F]
return(dat)
}
orderData<-function(data){
data[,SIZERANK:=rank(시가총액)]
data[,QUALITYRANK:=rank(-매출총이익/자산)]
data[,VALUERANK:=rank(-시가총액/자본)]
data[,MOMENTUMRANK:=0]
data[,TOTALRANK:=QUALITYRANK+VALUERANK+SIZERANK]
setorder(data,TOTALRANK,QUALITYRANK,VALUERANK,SIZERANK)
return(data)
}
output<-filter(corpTable)
output<-orderData(output)
output<-output[1:stocknum]
output$일자<-as.character(output$일자)
dat
filter<-function(data){
dat<-data[관리여부!="관리종목"]
q<-quantile(dat$시가총액,probs=seq(0,1,0.2))
dat<-dat[시가총액<=q[2]]
dat<-dat[is.na(매출총이익)==F]
dat<-dat[is.na(영업활동으로인한현금흐름)==F]
return(dat)
}
orderData<-function(data){
data[,SIZERANK:=rank(시가총액)]
data[,QUALITYRANK:=rank(rank(-영업활동으로인한현금흐름/자산)+rank(-매출총이익/자산))]
data[,VALUERANK:=0]
data[,MOMENTUMRANK:=0]
data[,TOTALRANK:=QUALITYRANK+SIZERANK+VALUERANK+MOMENTUMRANK]
setorder(data,TOTALRANK,QUALITYRANK,SIZERANK)
return(data)
}
output<-filter(corpTable)
output<-orderData(output)
stockNum<-50
output<-output[1:stocknum]
stocknum<-50
output<-output[1:stocknum]
output
source('C:/Users/vicen/Source/Repos/StockTradebot/Rscript/InsertCorpData_All.R', encoding = 'UTF-8')
?dateadd
?%m%
?%+m%
lastYearDate<-businessDate %+m% -12
lastYearDate<-businessDate %+m% months(-12)
lastYearDate<-businessDate %m+% months(-12)
library(lubridate)
d<-Sys.Date()
d
d %m+% 12
d %m+% month(12)
dd<-d %m+% month(12)
dd<-d %m+% months(12)
dd
dd<-d %m+% 12
dd<-d %m+% -12
d %m+% months(120)
